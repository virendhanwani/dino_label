{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, Children, useEffect, useState, memo } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport PropTypes from 'prop-types';\nvar initialState = {\n  data: {},\n  ids: []\n};\nvar getDataAndIds = function (record, source, fieldKey) {\n  var list = get(record, source);\n  if (!list) {\n    return initialState;\n  }\n  return fieldKey ? {\n    data: list.reduce(function (prev, item) {\n      prev[item[fieldKey]] = item;\n      return prev;\n    }, {}),\n    ids: list.map(function (item) {\n      return item[fieldKey];\n    })\n  } : {\n    data: list.reduce(function (prev, item) {\n      prev[JSON.stringify(item)] = item;\n      return prev;\n    }, {}),\n    ids: list.map(JSON.stringify)\n  };\n};\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If the array value contains a lot of items, you may experience slowdowns in the UI.\n * In such cases, set the `fieldKey` prop to use one field as key, and reduce CPU and memory usage:\n *\n * @example\n *     <ArrayField source=\"backlinks\" fieldKey=\"uuid\">\n *         ...\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     );\n *     TagsField.defaultProps = { addLabel: true };\n */\nexport var ArrayField = memo(function (props) {\n  var addLabel = props.addLabel,\n    basePath = props.basePath,\n    children = props.children,\n    _record = props.record,\n    resource = props.resource,\n    sortable = props.sortable,\n    source = props.source,\n    fieldKey = props.fieldKey,\n    rest = __rest(props, [\"addLabel\", \"basePath\", \"children\", \"record\", \"resource\", \"sortable\", \"source\", \"fieldKey\"]);\n  var record = useRecordContext(props);\n  var _a = useState(initialState.ids),\n    ids = _a[0],\n    setIds = _a[1];\n  var _b = useState(initialState.data),\n    data = _b[0],\n    setData = _b[1];\n  useEffect(function () {\n    var _a = getDataAndIds(record, source, fieldKey),\n      ids = _a.ids,\n      data = _a.data;\n    setIds(ids);\n    setData(data);\n  }, [record, source, fieldKey]);\n  return React.createElement(ListContextProvider, {\n    value: {\n      ids: ids,\n      data: data,\n      loading: false,\n      basePath: basePath,\n      selectedIds: [],\n      currentSort: {\n        field: null,\n        order: null\n      },\n      displayedFilters: null,\n      filterValues: null,\n      hasCreate: null,\n      hideFilter: null,\n      loaded: true,\n      onSelect: null,\n      onToggleItem: null,\n      onUnselectItems: null,\n      page: null,\n      perPage: null,\n      resource: resource,\n      setFilters: null,\n      setPage: null,\n      setPerPage: null,\n      setSort: null,\n      showFilter: null,\n      total: ids.length\n    }\n  }, cloneElement(Children.only(children), __assign({\n    ids: ids,\n    data: data,\n    loading: false,\n    basePath: basePath,\n    currentSort: {\n      field: null,\n      order: null\n    },\n    resource: resource\n  }, rest)));\n});\nArrayField.defaultProps = {\n  addLabel: true\n};\nArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  fieldKey: PropTypes.string\n});\nArrayField.displayName = 'ArrayField';\nexport default ArrayField;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","cloneElement","Children","useEffect","useState","memo","get","ListContextProvider","useRecordContext","fieldPropTypes","PropTypes","initialState","data","ids","getDataAndIds","record","source","fieldKey","list","reduce","prev","item","map","JSON","stringify","ArrayField","props","addLabel","basePath","children","_record","resource","sortable","rest","_a","setIds","_b","setData","createElement","value","loading","selectedIds","currentSort","field","order","displayedFilters","filterValues","hasCreate","hideFilter","loaded","onSelect","onToggleItem","onUnselectItems","page","perPage","setFilters","setPage","setPerPage","setSort","showFilter","total","only","defaultProps","propTypes","string","displayName"],"sources":["/node_modules/ra-ui-materialui/esm/field/ArrayField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { cloneElement, Children, useEffect, useState, memo, } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport PropTypes from 'prop-types';\nvar initialState = {\n    data: {},\n    ids: [],\n};\nvar getDataAndIds = function (record, source, fieldKey) {\n    var list = get(record, source);\n    if (!list) {\n        return initialState;\n    }\n    return fieldKey\n        ? {\n            data: list.reduce(function (prev, item) {\n                prev[item[fieldKey]] = item;\n                return prev;\n            }, {}),\n            ids: list.map(function (item) { return item[fieldKey]; }),\n        }\n        : {\n            data: list.reduce(function (prev, item) {\n                prev[JSON.stringify(item)] = item;\n                return prev;\n            }, {}),\n            ids: list.map(JSON.stringify),\n        };\n};\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If the array value contains a lot of items, you may experience slowdowns in the UI.\n * In such cases, set the `fieldKey` prop to use one field as key, and reduce CPU and memory usage:\n *\n * @example\n *     <ArrayField source=\"backlinks\" fieldKey=\"uuid\">\n *         ...\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     );\n *     TagsField.defaultProps = { addLabel: true };\n */\nexport var ArrayField = memo(function (props) {\n    var addLabel = props.addLabel, basePath = props.basePath, children = props.children, _record = props.record, resource = props.resource, sortable = props.sortable, source = props.source, fieldKey = props.fieldKey, rest = __rest(props, [\"addLabel\", \"basePath\", \"children\", \"record\", \"resource\", \"sortable\", \"source\", \"fieldKey\"]);\n    var record = useRecordContext(props);\n    var _a = useState(initialState.ids), ids = _a[0], setIds = _a[1];\n    var _b = useState(initialState.data), data = _b[0], setData = _b[1];\n    useEffect(function () {\n        var _a = getDataAndIds(record, source, fieldKey), ids = _a.ids, data = _a.data;\n        setIds(ids);\n        setData(data);\n    }, [record, source, fieldKey]);\n    return (React.createElement(ListContextProvider, { value: {\n            ids: ids,\n            data: data,\n            loading: false,\n            basePath: basePath,\n            selectedIds: [],\n            currentSort: { field: null, order: null },\n            displayedFilters: null,\n            filterValues: null,\n            hasCreate: null,\n            hideFilter: null,\n            loaded: true,\n            onSelect: null,\n            onToggleItem: null,\n            onUnselectItems: null,\n            page: null,\n            perPage: null,\n            resource: resource,\n            setFilters: null,\n            setPage: null,\n            setPerPage: null,\n            setSort: null,\n            showFilter: null,\n            total: ids.length,\n        } }, cloneElement(Children.only(children), __assign({ ids: ids, data: data, loading: false, basePath: basePath, currentSort: { field: null, order: null }, resource: resource }, rest))));\n});\nArrayField.defaultProps = {\n    addLabel: true,\n};\nArrayField.propTypes = __assign(__assign({}, fieldPropTypes), { fieldKey: PropTypes.string });\nArrayField.displayName = 'ArrayField';\nexport default ArrayField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}