{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { LinearProgress } from '../layout';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nvar ReferenceArrayField = function (props) {\n  var basePath = props.basePath,\n    children = props.children,\n    filter = props.filter,\n    _a = props.page,\n    page = _a === void 0 ? 1 : _a,\n    perPage = props.perPage,\n    reference = props.reference,\n    resource = props.resource,\n    sort = props.sort,\n    source = props.source;\n  var record = useRecordContext(props);\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n  }\n  var isReferenceDeclared = useSelector(function (state) {\n    return typeof state.admin.resources[props.reference] !== 'undefined';\n  });\n  if (!isReferenceDeclared) {\n    throw new Error(\"You must declare a <Resource name=\\\"\" + props.reference + \"\\\"> in order to use a <ReferenceArrayField reference=\\\"\" + props.reference + \"\\\">\");\n  }\n  var controllerProps = useReferenceArrayFieldController({\n    basePath: basePath,\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props, controllerProps))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired\n});\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    progress: {\n      marginTop: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaReferenceArrayField'\n});\nexport var ReferenceArrayFieldView = function (props) {\n  var children = props.children,\n    pagination = props.pagination,\n    className = props.className,\n    resource = props.resource,\n    reference = props.reference,\n    rest = __rest(props, [\"children\", \"pagination\", \"className\", \"resource\", \"reference\"]);\n  var classes = useStyles(props);\n  var loaded = useListContext(props).loaded;\n  if (!loaded) {\n    return React.createElement(LinearProgress, {\n      className: classes.progress\n    });\n  }\n  return React.createElement(React.Fragment, null, cloneElement(Children.only(children), __assign(__assign({}, sanitizeFieldRestProps(rest)), {\n    className: className,\n    resource: resource\n  })), ' ', pagination && props.total !== undefined && cloneElement(pagination, sanitizeFieldRestProps(rest)));\n};\nReferenceArrayFieldView.propTypes = {\n  basePath: PropTypes.string,\n  classes: PropTypes.any,\n  className: PropTypes.string,\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  reference: PropTypes.string.isRequired\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","Children","cloneElement","memo","PropTypes","makeStyles","useSelector","ListContextProvider","useListContext","useReferenceArrayFieldController","ResourceContextProvider","useRecordContext","fieldPropTypes","sanitizeFieldRestProps","LinearProgress","ReferenceArrayField","props","basePath","children","filter","_a","page","perPage","reference","resource","sort","source","record","count","Error","isReferenceDeclared","state","admin","resources","controllerProps","createElement","value","PureReferenceArrayFieldView","propTypes","addLabel","bool","string","classes","object","className","element","isRequired","label","any","sortBy","sortByOrder","defaultProps","useStyles","theme","progress","marginTop","spacing","name","ReferenceArrayFieldView","pagination","rest","loaded","Fragment","only","total","undefined","data","ids","array"],"sources":["/node_modules/ra-ui-materialui/esm/field/ReferenceArrayField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext, } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { LinearProgress } from '../layout';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nvar ReferenceArrayField = function (props) {\n    var basePath = props.basePath, children = props.children, filter = props.filter, _a = props.page, page = _a === void 0 ? 1 : _a, perPage = props.perPage, reference = props.reference, resource = props.resource, sort = props.sort, source = props.source;\n    var record = useRecordContext(props);\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n    }\n    var isReferenceDeclared = useSelector(function (state) { return typeof state.admin.resources[props.reference] !== 'undefined'; });\n    if (!isReferenceDeclared) {\n        throw new Error(\"You must declare a <Resource name=\\\"\" + props.reference + \"\\\"> in order to use a <ReferenceArrayField reference=\\\"\" + props.reference + \"\\\">\");\n    }\n    var controllerProps = useReferenceArrayFieldController({\n        basePath: basePath,\n        filter: filter,\n        page: page,\n        perPage: perPage,\n        record: record,\n        reference: reference,\n        resource: resource,\n        sort: sort,\n        source: source,\n    });\n    return (React.createElement(ResourceContextProvider, { value: reference },\n        React.createElement(ListContextProvider, { value: controllerProps },\n            React.createElement(PureReferenceArrayFieldView, __assign({}, props, controllerProps)))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), { addLabel: PropTypes.bool, basePath: PropTypes.string, classes: PropTypes.object, className: PropTypes.string, children: PropTypes.element.isRequired, label: PropTypes.string, record: PropTypes.any, reference: PropTypes.string.isRequired, resource: PropTypes.string, sortBy: PropTypes.string, sortByOrder: fieldPropTypes.sortByOrder, source: PropTypes.string.isRequired });\nReferenceArrayField.defaultProps = {\n    addLabel: true,\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    progress: { marginTop: theme.spacing(2) },\n}); }, { name: 'RaReferenceArrayField' });\nexport var ReferenceArrayFieldView = function (props) {\n    var children = props.children, pagination = props.pagination, className = props.className, resource = props.resource, reference = props.reference, rest = __rest(props, [\"children\", \"pagination\", \"className\", \"resource\", \"reference\"]);\n    var classes = useStyles(props);\n    var loaded = useListContext(props).loaded;\n    if (!loaded) {\n        return React.createElement(LinearProgress, { className: classes.progress });\n    }\n    return (React.createElement(React.Fragment, null,\n        cloneElement(Children.only(children), __assign(__assign({}, sanitizeFieldRestProps(rest)), { className: className, resource: resource })),\n        ' ',\n        pagination &&\n            props.total !== undefined &&\n            cloneElement(pagination, sanitizeFieldRestProps(rest))));\n};\nReferenceArrayFieldView.propTypes = {\n    basePath: PropTypes.string,\n    classes: PropTypes.any,\n    className: PropTypes.string,\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    loaded: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n    reference: PropTypes.string.isRequired,\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}