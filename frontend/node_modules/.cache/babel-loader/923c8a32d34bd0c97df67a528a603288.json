{"ast":null,"code":"import get from 'lodash/get';\nimport { linkToRecord } from '../../util';\n/**\n * Get the link toward the referenced resource\n *\n * @example\n *\n * const linkPath = getResourceLinkPath({\n *      basePath: '/comments',\n *      link: 'edit',\n *      reference: 'users',\n *      record: {\n *          userId: 7\n *      },\n *      resource: 'comments',\n *      source: 'userId',\n * }); // '/users/7'\n *\n * @param {Object} option\n * @param {string} option.basePath basepath to current resource\n * @param {string | false | LinkToFunctionType} option.link=\"edit\" The link toward the referenced record. 'edit', 'show' or false for no link (default to edit). Alternatively a function that returns a string\n * @param {string | false | LinkToFunctionType} [option.linkType] DEPRECATED : old name for link\n * @param {string} option.reference The linked resource name\n * @param {Object} option.record The current resource record\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @returns {string | false} The link to the reference record\n */\nvar getResourceLinkPath = function (_a) {\n  var resource = _a.resource,\n    source = _a.source,\n    reference = _a.reference,\n    _b = _a.link,\n    link = _b === void 0 ? 'edit' : _b,\n    _c = _a.record,\n    record = _c === void 0 ? {\n      id: ''\n    } : _c,\n    _d = _a.basePath,\n    basePath = _d === void 0 ? '' : _d,\n    linkType = _a.linkType;\n  if (linkType !== undefined) {\n    console.warn(\"The 'linkType' prop is deprecated and should be named to 'link' in <ReferenceField />\");\n  }\n  var sourceId = get(record, source);\n  var rootPath = basePath ? basePath.replace(resource, reference) : \"/\" + reference;\n  var linkTo = linkType !== undefined ? linkType : link;\n  // Backward compatibility: keep linkType but with warning\n  return !linkTo ? false : typeof linkTo === 'function' ? linkTo(record, reference) : linkToRecord(rootPath, sourceId, linkTo);\n};\nexport default getResourceLinkPath;","map":{"version":3,"names":["get","linkToRecord","getResourceLinkPath","_a","resource","source","reference","_b","link","_c","record","id","_d","basePath","linkType","undefined","console","warn","sourceId","rootPath","replace","linkTo"],"sources":["/node_modules/ra-core/esm/controller/field/getResourceLinkPath.js"],"sourcesContent":["import get from 'lodash/get';\nimport { linkToRecord } from '../../util';\n/**\n * Get the link toward the referenced resource\n *\n * @example\n *\n * const linkPath = getResourceLinkPath({\n *      basePath: '/comments',\n *      link: 'edit',\n *      reference: 'users',\n *      record: {\n *          userId: 7\n *      },\n *      resource: 'comments',\n *      source: 'userId',\n * }); // '/users/7'\n *\n * @param {Object} option\n * @param {string} option.basePath basepath to current resource\n * @param {string | false | LinkToFunctionType} option.link=\"edit\" The link toward the referenced record. 'edit', 'show' or false for no link (default to edit). Alternatively a function that returns a string\n * @param {string | false | LinkToFunctionType} [option.linkType] DEPRECATED : old name for link\n * @param {string} option.reference The linked resource name\n * @param {Object} option.record The current resource record\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @returns {string | false} The link to the reference record\n */\nvar getResourceLinkPath = function (_a) {\n    var resource = _a.resource, source = _a.source, reference = _a.reference, _b = _a.link, link = _b === void 0 ? 'edit' : _b, _c = _a.record, record = _c === void 0 ? { id: '' } : _c, _d = _a.basePath, basePath = _d === void 0 ? '' : _d, linkType = _a.linkType;\n    if (linkType !== undefined) {\n        console.warn(\"The 'linkType' prop is deprecated and should be named to 'link' in <ReferenceField />\");\n    }\n    var sourceId = get(record, source);\n    var rootPath = basePath\n        ? basePath.replace(resource, reference)\n        : \"/\" + reference;\n    var linkTo = linkType !== undefined ? linkType : link;\n    // Backward compatibility: keep linkType but with warning\n    return !linkTo\n        ? false\n        : typeof linkTo === 'function'\n            ? linkTo(record, reference)\n            : linkToRecord(rootPath, sourceId, linkTo);\n};\nexport default getResourceLinkPath;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAC5B,SAASC,YAAY,QAAQ,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,SAAAA,CAAUC,EAAE,EAAE;EACpC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,MAAM,GAAGF,EAAE,CAACE,MAAM;IAAEC,SAAS,GAAGH,EAAE,CAACG,SAAS;IAAEC,EAAE,GAAGJ,EAAE,CAACK,IAAI;IAAEA,IAAI,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,MAAM,GAAGA,EAAE;IAAEE,EAAE,GAAGN,EAAE,CAACO,MAAM;IAAEA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG;MAAEE,EAAE,EAAE;IAAG,CAAC,GAAGF,EAAE;IAAEG,EAAE,GAAGT,EAAE,CAACU,QAAQ;IAAEA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;IAAEE,QAAQ,GAAGX,EAAE,CAACW,QAAQ;EAClQ,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IACxBC,OAAO,CAACC,IAAI,CAAC,uFAAuF,CAAC;EACzG;EACA,IAAIC,QAAQ,GAAGlB,GAAG,CAACU,MAAM,EAAEL,MAAM,CAAC;EAClC,IAAIc,QAAQ,GAAGN,QAAQ,GACjBA,QAAQ,CAACO,OAAO,CAAChB,QAAQ,EAAEE,SAAS,CAAC,GACrC,GAAG,GAAGA,SAAS;EACrB,IAAIe,MAAM,GAAGP,QAAQ,KAAKC,SAAS,GAAGD,QAAQ,GAAGN,IAAI;EACrD;EACA,OAAO,CAACa,MAAM,GACR,KAAK,GACL,OAAOA,MAAM,KAAK,UAAU,GACxBA,MAAM,CAACX,MAAM,EAAEJ,SAAS,CAAC,GACzBL,YAAY,CAACkB,QAAQ,EAAED,QAAQ,EAAEG,MAAM,CAAC;AACtD,CAAC;AACD,eAAenB,mBAAmB"},"metadata":{},"sourceType":"module"}