{"ast":null,"code":"import decodeJwt from 'jwt-decode';\nexport const isAuthenticated = () => {\n  const permissions = localStorage.getItem('permissions');\n  if (!permissions) {\n    return false;\n  }\n  return permissions === 'user' || permissions === 'admin' ? true : false;\n};\n\n/**\n * Login to backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const login = async (email, password) => {\n  // Assert email or password is not empty\n  if (!(email.length > 0) || !(password.length > 0)) {\n    throw new Error('Email or password was not provided');\n  }\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n  const request = new Request('/api/token', {\n    method: 'POST',\n    body: formData\n  });\n  const response = await fetch(request);\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n  const data = await response.json();\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n  if ('access_token' in data) {\n    const decodedToken = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n  return data;\n};\n\n/**\n * Sign up via backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const signUp = async (email, password, passwordConfirmation) => {\n  // Assert email or password or password confirmation is not empty\n  if (!(email.length > 0)) {\n    throw new Error('Email was not provided');\n  }\n  if (!(password.length > 0)) {\n    throw new Error('Password was not provided');\n  }\n  if (!(passwordConfirmation.length > 0)) {\n    throw new Error('Password confirmation was not provided');\n  }\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n  const request = new Request('/api/signup', {\n    method: 'POST',\n    body: formData\n  });\n  const response = await fetch(request);\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n  const data = await response.json();\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n  if ('access_token' in data) {\n    const decodedToken = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n  return data;\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('permissions');\n};","map":{"version":3,"names":["decodeJwt","isAuthenticated","permissions","localStorage","getItem","login","email","password","length","Error","formData","FormData","append","request","Request","method","body","response","fetch","status","data","json","detail","decodedToken","setItem","signUp","passwordConfirmation","logout","removeItem"],"sources":["/app/src/utils/auth.ts"],"sourcesContent":["import decodeJwt from 'jwt-decode';\n\nexport const isAuthenticated = () => {\n  const permissions = localStorage.getItem('permissions');\n  if (!permissions) {\n    return false;\n  }\n  return permissions === 'user' || permissions === 'admin' ? true : false;\n};\n\n/**\n * Login to backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const login = async (email: string, password: string) => {\n  // Assert email or password is not empty\n  if (!(email.length > 0) || !(password.length > 0)) {\n    throw new Error('Email or password was not provided');\n  }\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n\n  const request = new Request('/api/token', {\n    method: 'POST',\n    body: formData,\n  });\n\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken: any = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\n\n/**\n * Sign up via backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const signUp = async (\n  email: string,\n  password: string,\n  passwordConfirmation: string\n) => {\n  // Assert email or password or password confirmation is not empty\n  if (!(email.length > 0)) {\n    throw new Error('Email was not provided');\n  }\n  if (!(password.length > 0)) {\n    throw new Error('Password was not provided');\n  }\n  if (!(passwordConfirmation.length > 0)) {\n    throw new Error('Password confirmation was not provided');\n  }\n\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n\n  const request = new Request('/api/signup', {\n    method: 'POST',\n    body: formData,\n  });\n\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken: any = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\n\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('permissions');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}