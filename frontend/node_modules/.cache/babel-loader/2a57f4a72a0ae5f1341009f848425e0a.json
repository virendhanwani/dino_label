{"ast":null,"code":"import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { loading: false, loaded: false }]\n * - start:   [create, { loading: true, loaded: false }]\n * - success: [create, { data: [data from response], loading: false, loaded: true }]\n * - error:   [create, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param data The data to initialize the new record with, e.g. { title: 'hello, world' }\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [create, { data, error, loading, loaded }].\n *\n * The create() function can be called in 3 different ways:\n *  - with the same parameters as the useCreate() hook: create(resource, data, options)\n *  - with the same syntax as useMutation: create({ resource, payload: { data } }, options)\n *  - with no parameter (if they were already passed to useCreate()): create()\n *\n * @example // set params when calling the update callback\n *\n * import { useCreate } from 'react-admin';\n *\n * const LikeButton = ({ record }) => {\n *     const like = { postId: record.id };\n *     const [create, { loading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', like)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate } from 'react-admin';\n *\n * const LikeButton = ({ record }) => {\n *     const like = { postId: record.id };\n *     const [create, { loading, error }] = useCreate('likes', like);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={create}>Like</button>;\n * };\n */\nvar useCreate = function (resource, data, options) {\n  var _a = useMutation({\n      type: 'create',\n      resource: resource,\n      payload: {\n        data: data\n      }\n    }, options),\n    mutate = _a[0],\n    state = _a[1];\n  var create = useCallback(function (resource, data, options) {\n    if (typeof resource === 'string') {\n      var query = {\n        type: 'create',\n        resource: resource,\n        payload: {\n          data: data\n        }\n      };\n      return mutate(query, options);\n    } else {\n      return mutate(resource, data);\n    }\n  }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return [create, state];\n};\nexport default useCreate;","map":{"version":3,"names":["useCallback","useMutation","useCreate","resource","data","options","_a","type","payload","mutate","state","create","query"],"sources":["/node_modules/ra-core/esm/dataProvider/useCreate.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { loading: false, loaded: false }]\n * - start:   [create, { loading: true, loaded: false }]\n * - success: [create, { data: [data from response], loading: false, loaded: true }]\n * - error:   [create, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param data The data to initialize the new record with, e.g. { title: 'hello, world' }\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [create, { data, error, loading, loaded }].\n *\n * The create() function can be called in 3 different ways:\n *  - with the same parameters as the useCreate() hook: create(resource, data, options)\n *  - with the same syntax as useMutation: create({ resource, payload: { data } }, options)\n *  - with no parameter (if they were already passed to useCreate()): create()\n *\n * @example // set params when calling the update callback\n *\n * import { useCreate } from 'react-admin';\n *\n * const LikeButton = ({ record }) => {\n *     const like = { postId: record.id };\n *     const [create, { loading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', like)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate } from 'react-admin';\n *\n * const LikeButton = ({ record }) => {\n *     const like = { postId: record.id };\n *     const [create, { loading, error }] = useCreate('likes', like);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={create}>Like</button>;\n * };\n */\nvar useCreate = function (resource, data, options) {\n    var _a = useMutation({ type: 'create', resource: resource, payload: { data: data } }, options), mutate = _a[0], state = _a[1];\n    var create = useCallback(function (resource, data, options) {\n        if (typeof resource === 'string') {\n            var query = {\n                type: 'create',\n                resource: resource,\n                payload: {\n                    data: data,\n                },\n            };\n            return mutate(query, options);\n        }\n        else {\n            return mutate(resource, data);\n        }\n    }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n    return [create, state];\n};\nexport default useCreate;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,WAAW,MAAM,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAC/C,IAAIC,EAAE,GAAGL,WAAW,CAAC;MAAEM,IAAI,EAAE,QAAQ;MAAEJ,QAAQ,EAAEA,QAAQ;MAAEK,OAAO,EAAE;QAAEJ,IAAI,EAAEA;MAAK;IAAE,CAAC,EAAEC,OAAO,CAAC;IAAEI,MAAM,GAAGH,EAAE,CAAC,CAAC,CAAC;IAAEI,KAAK,GAAGJ,EAAE,CAAC,CAAC,CAAC;EAC7H,IAAIK,MAAM,GAAGX,WAAW,CAAC,UAAUG,QAAQ,EAAEC,IAAI,EAAEC,OAAO,EAAE;IACxD,IAAI,OAAOF,QAAQ,KAAK,QAAQ,EAAE;MAC9B,IAAIS,KAAK,GAAG;QACRL,IAAI,EAAE,QAAQ;QACdJ,QAAQ,EAAEA,QAAQ;QAClBK,OAAO,EAAE;UACLJ,IAAI,EAAEA;QACV;MACJ,CAAC;MACD,OAAOK,MAAM,CAACG,KAAK,EAAEP,OAAO,CAAC;IACjC,CAAC,MACI;MACD,OAAOI,MAAM,CAACN,QAAQ,EAAEC,IAAI,CAAC;IACjC;EACJ,CAAC,EAAE,CAACK,MAAM,CAAC,CAAC;EAAA,CACX;;EACD,OAAO,CAACE,MAAM,EAAED,KAAK,CAAC;AAC1B,CAAC;AACD,eAAeR,SAAS"},"metadata":{},"sourceType":"module"}