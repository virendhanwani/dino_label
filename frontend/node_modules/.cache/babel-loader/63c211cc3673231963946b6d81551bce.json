{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { Button, Menu, MenuItem, Tooltip, IconButton, useMediaQuery } from '@material-ui/core';\nimport SortIcon from '@material-ui/icons/Sort';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { shallowEqual } from 'react-redux';\nimport { useListSortContext, useTranslate, getFieldLabelTranslationArgs } from 'ra-core';\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = props => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton basePath={props.basePath} />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nvar SortButton = function (props) {\n  var fields = props.fields,\n    _a = props.label,\n    label = _a === void 0 ? 'ra.sort.sort_by' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b;\n  var _c = useListSortContext(),\n    resource = _c.resource,\n    currentSort = _c.currentSort,\n    setSort = _c.setSort;\n  var translate = useTranslate();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('xs');\n  });\n  var _d = React.useState(null),\n    anchorEl = _d[0],\n    setAnchorEl = _d[1];\n  var handleClick = function (event) {\n    setAnchorEl(event.currentTarget);\n  };\n  var handleClose = function () {\n    setAnchorEl(null);\n  };\n  var handleChangeSort = function (event) {\n    var field = event.currentTarget.dataset.sort;\n    setSort(field, field === currentSort.field ? inverseOrder(currentSort.order) : 'ASC');\n    setAnchorEl(null);\n  };\n  var buttonLabel = translate(label, {\n    field: translate.apply(void 0, getFieldLabelTranslationArgs({\n      resource: resource,\n      source: currentSort.field\n    })),\n    order: translate(\"ra.sort.\" + currentSort.order),\n    _: label\n  });\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: buttonLabel\n  }, React.createElement(IconButton, {\n    \"aria-label\": buttonLabel,\n    color: \"primary\",\n    onClick: handleClick\n  }, icon)) : React.createElement(Button, {\n    \"aria-controls\": \"simple-menu\",\n    \"aria-haspopup\": \"true\",\n    color: \"primary\",\n    onClick: handleClick,\n    startIcon: icon,\n    endIcon: React.createElement(ArrowDropDownIcon, null),\n    size: \"small\"\n  }, buttonLabel), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, fields.map(function (field) {\n    return React.createElement(MenuItem, {\n      onClick: handleChangeSort,\n      \"data-sort\": field,\n      key: field\n    }, translate.apply(void 0, getFieldLabelTranslationArgs({\n      resource: resource,\n      source: field\n    })), ' ', translate(\"ra.sort.\" + (currentSort.field === field ? inverseOrder(currentSort.order) : 'ASC')));\n  })));\n};\nvar defaultIcon = React.createElement(SortIcon, null);\nvar inverseOrder = function (sort) {\n  return sort === 'ASC' ? 'DESC' : 'ASC';\n};\nvar arePropsEqual = function (prevProps, nextProps) {\n  return shallowEqual(prevProps.fields, nextProps.fields);\n};\nexport default memo(SortButton, arePropsEqual);","map":{"version":3,"names":["React","memo","Button","Menu","MenuItem","Tooltip","IconButton","useMediaQuery","SortIcon","ArrowDropDownIcon","shallowEqual","useListSortContext","useTranslate","getFieldLabelTranslationArgs","SortButton","props","fields","_a","label","_b","icon","defaultIcon","_c","resource","currentSort","setSort","translate","isXSmall","theme","breakpoints","down","_d","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","handleChangeSort","field","dataset","sort","inverseOrder","order","buttonLabel","apply","source","_","createElement","Fragment","title","color","onClick","startIcon","endIcon","size","id","keepMounted","open","Boolean","onClose","map","key","arePropsEqual","prevProps","nextProps"],"sources":["/node_modules/ra-ui-materialui/esm/button/SortButton.js"],"sourcesContent":["import * as React from 'react';\nimport { memo } from 'react';\nimport { Button, Menu, MenuItem, Tooltip, IconButton, useMediaQuery, } from '@material-ui/core';\nimport SortIcon from '@material-ui/icons/Sort';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { shallowEqual } from 'react-redux';\nimport { useListSortContext, useTranslate, getFieldLabelTranslationArgs, } from 'ra-core';\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = props => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton basePath={props.basePath} />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nvar SortButton = function (props) {\n    var fields = props.fields, _a = props.label, label = _a === void 0 ? 'ra.sort.sort_by' : _a, _b = props.icon, icon = _b === void 0 ? defaultIcon : _b;\n    var _c = useListSortContext(), resource = _c.resource, currentSort = _c.currentSort, setSort = _c.setSort;\n    var translate = useTranslate();\n    var isXSmall = useMediaQuery(function (theme) {\n        return theme.breakpoints.down('xs');\n    });\n    var _d = React.useState(null), anchorEl = _d[0], setAnchorEl = _d[1];\n    var handleClick = function (event) {\n        setAnchorEl(event.currentTarget);\n    };\n    var handleClose = function () {\n        setAnchorEl(null);\n    };\n    var handleChangeSort = function (event) {\n        var field = event.currentTarget.dataset.sort;\n        setSort(field, field === currentSort.field\n            ? inverseOrder(currentSort.order)\n            : 'ASC');\n        setAnchorEl(null);\n    };\n    var buttonLabel = translate(label, {\n        field: translate.apply(void 0, getFieldLabelTranslationArgs({\n            resource: resource,\n            source: currentSort.field,\n        })),\n        order: translate(\"ra.sort.\" + currentSort.order),\n        _: label,\n    });\n    return (React.createElement(React.Fragment, null,\n        isXSmall ? (React.createElement(Tooltip, { title: buttonLabel },\n            React.createElement(IconButton, { \"aria-label\": buttonLabel, color: \"primary\", onClick: handleClick }, icon))) : (React.createElement(Button, { \"aria-controls\": \"simple-menu\", \"aria-haspopup\": \"true\", color: \"primary\", onClick: handleClick, startIcon: icon, endIcon: React.createElement(ArrowDropDownIcon, null), size: \"small\" }, buttonLabel)),\n        React.createElement(Menu, { id: \"simple-menu\", anchorEl: anchorEl, keepMounted: true, open: Boolean(anchorEl), onClose: handleClose }, fields.map(function (field) { return (React.createElement(MenuItem, { onClick: handleChangeSort, \"data-sort\": field, key: field },\n            translate.apply(void 0, getFieldLabelTranslationArgs({\n                resource: resource,\n                source: field,\n            })),\n            ' ',\n            translate(\"ra.sort.\" + (currentSort.field === field\n                ? inverseOrder(currentSort.order)\n                : 'ASC')))); }))));\n};\nvar defaultIcon = React.createElement(SortIcon, null);\nvar inverseOrder = function (sort) { return (sort === 'ASC' ? 'DESC' : 'ASC'); };\nvar arePropsEqual = function (prevProps, nextProps) {\n    return shallowEqual(prevProps.fields, nextProps.fields);\n};\nexport default memo(SortButton, arePropsEqual);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}