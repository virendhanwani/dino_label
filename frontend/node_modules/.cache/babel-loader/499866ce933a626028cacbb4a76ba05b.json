{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { cancel, delay, fork, put, takeEvery } from 'redux-saga/effects';\n/**\n * Distinct reducer on ids\n *\n * @example\n * addIds([1, 2, 3], { payload: { ids: [3, 4] } })\n *   => [1, 2, 3, 4]\n */\nvar addIds = function (oldIds, _a) {\n  var ids = _a.payload.ids;\n  // Using a Set ensure we only keep distinct values\n  var oldIdsSet = new Set(oldIds);\n  ids.forEach(function (id) {\n    return oldIdsSet.add(id);\n  });\n  return Array.from(oldIdsSet);\n};\n// We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\nexport var finalizeFactory = function (tasks, accumulations) {\n  /**\n   * Fetch the accumulated value after a delay\n   *\n   * As this gets canceled by subsequent calls to accumulate(), only the last\n   * call to finalize() will not be canceled. The delay acts as a\n   * debounce.\n   *\n   * @see https://redux-saga.js.org/docs/recipes/#debouncing\n   */\n  return function finalize(key, actionCreator) {\n    var accumulatedValue, action;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          // combined with cancel(), this debounces the calls\n          return [4 /*yield*/, delay(50)];\n        case 1:\n          // combined with cancel(), this debounces the calls\n          _a.sent();\n          accumulatedValue = accumulations[key];\n          // Remove the latest accumulated value so that they do not interfere with later calls\n          delete accumulations[key];\n          action = actionCreator(key, accumulatedValue);\n          return [4 /*yield*/, put(action)];\n        case 2:\n          _a.sent();\n          delete tasks[key];\n          return [2 /*return*/];\n      }\n    });\n  };\n};\n// We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\nexport var accumulateFactory = function (tasks, accumulations, finalize) {\n  /**\n   * Accumulate actions and eventually redispatch an action with the accumulated payload\n   *\n   * @example\n   * accumulate({\n   *    type: CRUD_GET_MANY_ACCUMULATE,\n   *    payload: { ids: [1, 2, 3], resource: 'posts' },\n   *    meta: { accumulate: crudGetMany }\n   * });\n   * accumulate({\n   *    type: CRUD_GET_MANY_ACCUMULATE,\n   *    payload: { ids: [4, 5], resource: 'posts' },\n   *    meta: { accumulate: crudGetMany }\n   * });\n   *   => crudGetMany({ ids: [1, 2, 3, 4, 5], resource: 'posts' })\n   *\n   * @example\n   * accumulate({\n   *    type: CRUD_GET_MATCHING_ACCUMULATE,\n   *    meta: {\n   *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n   *      accumulateValues: () => true,\n   *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n   *    }\n   * });\n   * accumulate({\n   *    type: CRUD_GET_MATCHING_ACCUMULATE,\n   *    meta: {\n   *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n   *      accumulateValues: () => true,\n   *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n   *    }\n   * });\n   *   => crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {})\n   */\n  return function accumulate(action) {\n    var key, accumulateValues, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          key = action.meta.accumulateKey || action.payload.resource;\n          if (!tasks[key]) return [3 /*break*/, 2];\n          return [4 /*yield*/, cancel(tasks[key])];\n        case 1:\n          _c.sent();\n          _c.label = 2;\n        case 2:\n          accumulateValues = action.meta.accumulateValues || addIds;\n          // accumulateValues is a reducer function, it receives the previous accumulatedValues for\n          // the provided key, and must return the updated accumulatedValues\n          accumulations[key] = accumulateValues(accumulations[key], action);\n          _a = tasks;\n          _b = key;\n          return [4 /*yield*/, fork(finalize, key, action.meta.accumulate)];\n        case 3:\n          _a[_b] = _c.sent();\n          return [2 /*return*/];\n      }\n    });\n  };\n};\n\nexport default function () {\n  var accumulations, tasks;\n  return __generator(this, function (_a) {\n    switch (_a.label) {\n      case 0:\n        accumulations = {};\n        tasks = {};\n        return [4 /*yield*/, takeEvery(function (action) {\n          return action.meta && action.meta.accumulate;\n        }, accumulateFactory(tasks, accumulations, finalizeFactory(tasks, accumulations)))];\n      case 1:\n        _a.sent();\n        return [2 /*return*/];\n    }\n  });\n}","map":{"version":3,"names":["__generator","thisArg","body","_","label","sent","t","trys","ops","f","y","g","next","verb","Symbol","iterator","n","v","step","op","TypeError","call","done","value","pop","length","push","e","cancel","delay","fork","put","takeEvery","addIds","oldIds","_a","ids","payload","oldIdsSet","Set","forEach","id","add","Array","from","finalizeFactory","tasks","accumulations","finalize","key","actionCreator","accumulatedValue","action","accumulateFactory","accumulate","accumulateValues","_b","_c","meta","accumulateKey","resource"],"sources":["/node_modules/ra-core/esm/sideEffect/accumulate.js"],"sourcesContent":["var __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { cancel, delay, fork, put, takeEvery } from 'redux-saga/effects';\n/**\n * Distinct reducer on ids\n *\n * @example\n * addIds([1, 2, 3], { payload: { ids: [3, 4] } })\n *   => [1, 2, 3, 4]\n */\nvar addIds = function (oldIds, _a) {\n    var ids = _a.payload.ids;\n    // Using a Set ensure we only keep distinct values\n    var oldIdsSet = new Set(oldIds);\n    ids.forEach(function (id) { return oldIdsSet.add(id); });\n    return Array.from(oldIdsSet);\n};\n// We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\nexport var finalizeFactory = function (tasks, accumulations) {\n    /**\n     * Fetch the accumulated value after a delay\n     *\n     * As this gets canceled by subsequent calls to accumulate(), only the last\n     * call to finalize() will not be canceled. The delay acts as a\n     * debounce.\n     *\n     * @see https://redux-saga.js.org/docs/recipes/#debouncing\n     */\n    return function finalize(key, actionCreator) {\n        var accumulatedValue, action;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: \n                // combined with cancel(), this debounces the calls\n                return [4 /*yield*/, delay(50)];\n                case 1:\n                    // combined with cancel(), this debounces the calls\n                    _a.sent();\n                    accumulatedValue = accumulations[key];\n                    // Remove the latest accumulated value so that they do not interfere with later calls\n                    delete accumulations[key];\n                    action = actionCreator(key, accumulatedValue);\n                    return [4 /*yield*/, put(action)];\n                case 2:\n                    _a.sent();\n                    delete tasks[key];\n                    return [2 /*return*/];\n            }\n        });\n    };\n};\n// We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\nexport var accumulateFactory = function (tasks, accumulations, finalize) {\n    /**\n     * Accumulate actions and eventually redispatch an action with the accumulated payload\n     *\n     * @example\n     * accumulate({\n     *    type: CRUD_GET_MANY_ACCUMULATE,\n     *    payload: { ids: [1, 2, 3], resource: 'posts' },\n     *    meta: { accumulate: crudGetMany }\n     * });\n     * accumulate({\n     *    type: CRUD_GET_MANY_ACCUMULATE,\n     *    payload: { ids: [4, 5], resource: 'posts' },\n     *    meta: { accumulate: crudGetMany }\n     * });\n     *   => crudGetMany({ ids: [1, 2, 3, 4, 5], resource: 'posts' })\n     *\n     * @example\n     * accumulate({\n     *    type: CRUD_GET_MATCHING_ACCUMULATE,\n     *    meta: {\n     *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n     *      accumulateValues: () => true,\n     *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n     *    }\n     * });\n     * accumulate({\n     *    type: CRUD_GET_MATCHING_ACCUMULATE,\n     *    meta: {\n     *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n     *      accumulateValues: () => true,\n     *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n     *    }\n     * });\n     *   => crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {})\n     */\n    return function accumulate(action) {\n        var key, accumulateValues, _a, _b;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    key = action.meta.accumulateKey || action.payload.resource;\n                    if (!tasks[key]) return [3 /*break*/, 2];\n                    return [4 /*yield*/, cancel(tasks[key])];\n                case 1:\n                    _c.sent();\n                    _c.label = 2;\n                case 2:\n                    accumulateValues = action.meta.accumulateValues || addIds;\n                    // accumulateValues is a reducer function, it receives the previous accumulatedValues for\n                    // the provided key, and must return the updated accumulatedValues\n                    accumulations[key] = accumulateValues(accumulations[key], action);\n                    _a = tasks;\n                    _b = key;\n                    return [4 /*yield*/, fork(finalize, key, action.meta.accumulate)];\n                case 3:\n                    _a[_b] = _c.sent();\n                    return [2 /*return*/];\n            }\n        });\n    };\n};\nexport default function () {\n    var accumulations, tasks;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                accumulations = {};\n                tasks = {};\n                return [4 /*yield*/, takeEvery(function (action) { return action.meta && action.meta.accumulate; }, accumulateFactory(tasks, accumulations, finalizeFactory(tasks, accumulations)))];\n            case 1:\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}