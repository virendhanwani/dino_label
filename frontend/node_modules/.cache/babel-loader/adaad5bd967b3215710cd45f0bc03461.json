{"ast":null,"code":"import { useContext, useCallback } from 'react';\nimport { TranslationContext } from './TranslationContext';\nimport { useUpdateLoading } from '../loading';\nimport { useNotify } from '../sideEffect';\n/**\n * Set the current locale using the TranslationContext\n *\n * This hook re-renders when the locale changes.\n *\n * @example\n *\n * import { useSetLocale } from 'react-admin';\n *\n * const availableLanguages = {\n *     en: 'English',\n *     fr: 'Français',\n * }\n * const LanguageSwitcher = () => {\n *     const setLocale = useSetLocale();\n *     return (\n *         <ul>{\n *             Object.keys(availableLanguages).map(locale => {\n *                  <li key={locale} onClick={() => setLocale(locale)}>\n *                      {availableLanguages[locale]}\n *                  </li>\n *              })\n *         }</ul>\n *     );\n * }\n */\nvar useSetLocale = function () {\n  var _a = useContext(TranslationContext),\n    setLocale = _a.setLocale,\n    i18nProvider = _a.i18nProvider;\n  var _b = useUpdateLoading(),\n    startLoading = _b.startLoading,\n    stopLoading = _b.stopLoading;\n  var notify = useNotify();\n  return useCallback(function (newLocale) {\n    return new Promise(function (resolve) {\n      startLoading();\n      // so we systematically return a Promise for the messages\n      // i18nProvider may return a Promise for language changes,\n      resolve(i18nProvider.changeLocale(newLocale));\n    }).then(function () {\n      stopLoading();\n      setLocale(newLocale);\n    }).catch(function (error) {\n      stopLoading();\n      notify('ra.notification.i18n_error', {\n        type: 'warning'\n      });\n      console.error(error);\n    });\n  }, [i18nProvider, notify, setLocale, startLoading, stopLoading]);\n};\nexport default useSetLocale;","map":{"version":3,"names":["useContext","useCallback","TranslationContext","useUpdateLoading","useNotify","useSetLocale","_a","setLocale","i18nProvider","_b","startLoading","stopLoading","notify","newLocale","Promise","resolve","changeLocale","then","catch","error","type","console"],"sources":["/node_modules/ra-core/esm/i18n/useSetLocale.js"],"sourcesContent":["import { useContext, useCallback } from 'react';\nimport { TranslationContext } from './TranslationContext';\nimport { useUpdateLoading } from '../loading';\nimport { useNotify } from '../sideEffect';\n/**\n * Set the current locale using the TranslationContext\n *\n * This hook re-renders when the locale changes.\n *\n * @example\n *\n * import { useSetLocale } from 'react-admin';\n *\n * const availableLanguages = {\n *     en: 'English',\n *     fr: 'Français',\n * }\n * const LanguageSwitcher = () => {\n *     const setLocale = useSetLocale();\n *     return (\n *         <ul>{\n *             Object.keys(availableLanguages).map(locale => {\n *                  <li key={locale} onClick={() => setLocale(locale)}>\n *                      {availableLanguages[locale]}\n *                  </li>\n *              })\n *         }</ul>\n *     );\n * }\n */\nvar useSetLocale = function () {\n    var _a = useContext(TranslationContext), setLocale = _a.setLocale, i18nProvider = _a.i18nProvider;\n    var _b = useUpdateLoading(), startLoading = _b.startLoading, stopLoading = _b.stopLoading;\n    var notify = useNotify();\n    return useCallback(function (newLocale) {\n        return new Promise(function (resolve) {\n            startLoading();\n            // so we systematically return a Promise for the messages\n            // i18nProvider may return a Promise for language changes,\n            resolve(i18nProvider.changeLocale(newLocale));\n        })\n            .then(function () {\n            stopLoading();\n            setLocale(newLocale);\n        })\n            .catch(function (error) {\n            stopLoading();\n            notify('ra.notification.i18n_error', { type: 'warning' });\n            console.error(error);\n        });\n    }, [i18nProvider, notify, setLocale, startLoading, stopLoading]);\n};\nexport default useSetLocale;\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC/C,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,SAASC,SAAS,QAAQ,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAAA,EAAY;EAC3B,IAAIC,EAAE,GAAGN,UAAU,CAACE,kBAAkB,CAAC;IAAEK,SAAS,GAAGD,EAAE,CAACC,SAAS;IAAEC,YAAY,GAAGF,EAAE,CAACE,YAAY;EACjG,IAAIC,EAAE,GAAGN,gBAAgB,EAAE;IAAEO,YAAY,GAAGD,EAAE,CAACC,YAAY;IAAEC,WAAW,GAAGF,EAAE,CAACE,WAAW;EACzF,IAAIC,MAAM,GAAGR,SAAS,EAAE;EACxB,OAAOH,WAAW,CAAC,UAAUY,SAAS,EAAE;IACpC,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAE;MAClCL,YAAY,EAAE;MACd;MACA;MACAK,OAAO,CAACP,YAAY,CAACQ,YAAY,CAACH,SAAS,CAAC,CAAC;IACjD,CAAC,CAAC,CACGI,IAAI,CAAC,YAAY;MAClBN,WAAW,EAAE;MACbJ,SAAS,CAACM,SAAS,CAAC;IACxB,CAAC,CAAC,CACGK,KAAK,CAAC,UAAUC,KAAK,EAAE;MACxBR,WAAW,EAAE;MACbC,MAAM,CAAC,4BAA4B,EAAE;QAAEQ,IAAI,EAAE;MAAU,CAAC,CAAC;MACzDC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,EAAE,CAACX,YAAY,EAAEI,MAAM,EAAEL,SAAS,EAAEG,YAAY,EAAEC,WAAW,CAAC,CAAC;AACpE,CAAC;AACD,eAAeN,YAAY"},"metadata":{},"sourceType":"module"}