{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport { useFormContext } from './useFormContext';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@material-ui/core';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={formGroupState.invalid && formGroupState.dirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n  var form = useForm();\n  var formContext = useFormContext();\n  var _a = useState({\n      dirty: false,\n      errors: undefined,\n      invalid: false,\n      pristine: true,\n      touched: false,\n      valid: true\n    }),\n    state = _a[0],\n    setState = _a[1];\n  useEffect(function () {\n    var unsubscribe = form.subscribe(function () {\n      var fields = formContext.getGroupFields(name);\n      var fieldStates = fields.map(function (field) {\n        return form.getFieldState(field);\n      }).filter(function (fieldState) {\n        return fieldState != undefined;\n      }); // eslint-disable-line\n      var newState = getFormGroupState(fieldStates);\n      setState(function (oldState) {\n        if (!isEqual(oldState, newState)) {\n          return newState;\n        }\n        return oldState;\n      });\n    }, {\n      errors: true,\n      invalid: true,\n      dirty: true,\n      pristine: true,\n      valid: true,\n      touched: true\n    });\n    return unsubscribe;\n  }, [form, formContext, name]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from final-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n    var newState = {\n      dirty: acc.dirty || fieldState.dirty,\n      errors: errors,\n      invalid: acc.invalid || fieldState.invalid,\n      pristine: acc.pristine && fieldState.pristine,\n      touched: acc.touched || fieldState.touched,\n      valid: acc.valid && fieldState.valid\n    };\n    return newState;\n  }, {\n    dirty: false,\n    errors: undefined,\n    invalid: false,\n    pristine: true,\n    valid: true,\n    touched: false\n  });\n};","map":{"version":3,"names":["useState","useEffect","useForm","isEqual","useFormContext","useFormGroup","name","form","formContext","_a","dirty","errors","undefined","invalid","pristine","touched","valid","state","setState","unsubscribe","subscribe","fields","getGroupFields","fieldStates","map","field","getFieldState","filter","fieldState","newState","getFormGroupState","oldState","reduce","acc","error"],"sources":["/node_modules/ra-core/esm/form/useFormGroup.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport { useFormContext } from './useFormContext';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@material-ui/core';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={formGroupState.invalid && formGroupState.dirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n    var form = useForm();\n    var formContext = useFormContext();\n    var _a = useState({\n        dirty: false,\n        errors: undefined,\n        invalid: false,\n        pristine: true,\n        touched: false,\n        valid: true,\n    }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        var unsubscribe = form.subscribe(function () {\n            var fields = formContext.getGroupFields(name);\n            var fieldStates = fields\n                .map(function (field) {\n                return form.getFieldState(field);\n            })\n                .filter(function (fieldState) { return fieldState != undefined; }); // eslint-disable-line\n            var newState = getFormGroupState(fieldStates);\n            setState(function (oldState) {\n                if (!isEqual(oldState, newState)) {\n                    return newState;\n                }\n                return oldState;\n            });\n        }, {\n            errors: true,\n            invalid: true,\n            dirty: true,\n            pristine: true,\n            valid: true,\n            touched: true,\n        });\n        return unsubscribe;\n    }, [form, formContext, name]);\n    return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from final-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n    return fieldStates.reduce(function (acc, fieldState) {\n        var errors = acc.errors || {};\n        if (fieldState.error) {\n            errors[fieldState.name] = fieldState.error;\n        }\n        var newState = {\n            dirty: acc.dirty || fieldState.dirty,\n            errors: errors,\n            invalid: acc.invalid || fieldState.invalid,\n            pristine: acc.pristine && fieldState.pristine,\n            touched: acc.touched || fieldState.touched,\n            valid: acc.valid && fieldState.valid,\n        };\n        return newState;\n    }, {\n        dirty: false,\n        errors: undefined,\n        invalid: false,\n        pristine: true,\n        valid: true,\n        touched: false,\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}