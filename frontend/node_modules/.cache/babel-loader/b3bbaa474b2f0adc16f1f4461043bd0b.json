{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the data provider and pass the result to a child function\n *\n * @param {Function} children Must be a function which will be called with the mutate callback\n * @param {string} type The method called on the data provider, e.g. 'update', 'delete'. Can also be a custom method if the dataProvider supports is.\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} payload The payload object, e.g; { id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @example\n *\n * const ApproveButton = ({ record }) => (\n *     <Mutation\n *         type=\"update\"\n *         resource=\"comments\"\n *         payload={{ id: record.id, data: { isApproved: true } }}\n *     >\n *         {approve => (\n *             <Button label=\"Approve\" onClick={approve} />\n *         )}\n *     </Mutation>\n * );\n */\nvar Mutation = function (_a) {\n  var children = _a.children,\n    type = _a.type,\n    resource = _a.resource,\n    payload = _a.payload,\n    // Provides an undefined onSuccess just so the key `onSuccess` is defined\n    // This is used to detect options in useDataProvider\n    _b = _a.options,\n    // Provides an undefined onSuccess just so the key `onSuccess` is defined\n    // This is used to detect options in useDataProvider\n    options = _b === void 0 ? {\n      onSuccess: undefined\n    } : _b;\n  return children.apply(void 0, useMutation({\n    type: type,\n    resource: resource,\n    payload: payload\n  }, __assign(__assign({}, options), {\n    withDeclarativeSideEffectsSupport: true\n  })));\n};\nexport default Mutation;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useMutation","Mutation","_a","children","type","resource","payload","_b","options","onSuccess","undefined","withDeclarativeSideEffectsSupport"],"sources":["/node_modules/ra-core/esm/dataProvider/Mutation.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the data provider and pass the result to a child function\n *\n * @param {Function} children Must be a function which will be called with the mutate callback\n * @param {string} type The method called on the data provider, e.g. 'update', 'delete'. Can also be a custom method if the dataProvider supports is.\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} payload The payload object, e.g; { id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @example\n *\n * const ApproveButton = ({ record }) => (\n *     <Mutation\n *         type=\"update\"\n *         resource=\"comments\"\n *         payload={{ id: record.id, data: { isApproved: true } }}\n *     >\n *         {approve => (\n *             <Button label=\"Approve\" onClick={approve} />\n *         )}\n *     </Mutation>\n * );\n */\nvar Mutation = function (_a) {\n    var children = _a.children, type = _a.type, resource = _a.resource, payload = _a.payload, \n    // Provides an undefined onSuccess just so the key `onSuccess` is defined\n    // This is used to detect options in useDataProvider\n    _b = _a.options, \n    // Provides an undefined onSuccess just so the key `onSuccess` is defined\n    // This is used to detect options in useDataProvider\n    options = _b === void 0 ? { onSuccess: undefined } : _b;\n    return children.apply(void 0, useMutation({ type: type, resource: resource, payload: payload }, __assign(__assign({}, options), { withDeclarativeSideEffectsSupport: true })));\n};\nexport default Mutation;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,OAAOO,WAAW,MAAM,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,SAAAA,CAAUC,EAAE,EAAE;EACzB,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,IAAI,GAAGF,EAAE,CAACE,IAAI;IAAEC,QAAQ,GAAGH,EAAE,CAACG,QAAQ;IAAEC,OAAO,GAAGJ,EAAE,CAACI,OAAO;IACxF;IACA;IACAC,EAAE,GAAGL,EAAE,CAACM,OAAO;IACf;IACA;IACAA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG;MAAEE,SAAS,EAAEC;IAAU,CAAC,GAAGH,EAAE;EACvD,OAAOJ,QAAQ,CAACJ,KAAK,CAAC,KAAK,CAAC,EAAEC,WAAW,CAAC;IAAEI,IAAI,EAAEA,IAAI;IAAEC,QAAQ,EAAEA,QAAQ;IAAEC,OAAO,EAAEA;EAAQ,CAAC,EAAEpB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEsB,OAAO,CAAC,EAAE;IAAEG,iCAAiC,EAAE;EAAK,CAAC,CAAC,CAAC,CAAC;AAClL,CAAC;AACD,eAAeV,QAAQ"},"metadata":{},"sourceType":"module"}