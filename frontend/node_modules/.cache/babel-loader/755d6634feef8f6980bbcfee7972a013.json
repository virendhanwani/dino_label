{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext } from 'ra-core';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nvar toLocaleStringSupportsLocales = function () {\n  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n  try {\n    new Date().toLocaleString('i');\n  } catch (error) {\n    return error instanceof RangeError;\n  }\n  return false;\n}();\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nexport var DateField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    locales = props.locales,\n    options = props.options,\n    _a = props.showTime,\n    showTime = _a === void 0 ? false : _a,\n    source = props.source,\n    rest = __rest(props, [\"className\", \"emptyText\", \"locales\", \"options\", \"showTime\", \"source\"]);\n  var record = useRecordContext(props);\n  if (!record) {\n    return null;\n  }\n  var value = get(record, source);\n  if (value == null || value === '') {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText) : null;\n  }\n  var date = value instanceof Date ? value : new Date(value);\n  var dateOptions = options;\n  if (typeof value === 'string' && value.length <= 10 && !showTime && !options) {\n    // Input is a date string (e.g. '2022-02-15') without time and time zone.\n    // Force timezone to UTC to fix issue with people in negative time zones\n    // who may see a different date when calling toLocaleDateString().\n    dateOptions = {\n      timeZone: 'UTC'\n    };\n  }\n  var dateString = showTime ? toLocaleStringSupportsLocales ? date.toLocaleString(locales, options) : date.toLocaleString() : toLocaleStringSupportsLocales ? date.toLocaleDateString(locales, dateOptions) : date.toLocaleDateString();\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), dateString);\n});\nDateField.defaultProps = {\n  addLabel: true\n};\nDateField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object,\n  showTime: PropTypes.bool\n});\nDateField.displayName = 'DateField';\nexport default DateField;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","memo","PropTypes","get","Typography","useRecordContext","sanitizeFieldRestProps","fieldPropTypes","toLocaleStringSupportsLocales","Date","toLocaleString","error","RangeError","DateField","props","className","emptyText","locales","options","_a","showTime","source","rest","record","value","createElement","component","variant","date","dateOptions","timeZone","dateString","toLocaleDateString","defaultProps","addLabel","propTypes","oneOfType","string","arrayOf","object","bool","displayName"],"sources":["/node_modules/ra-ui-materialui/esm/field/DateField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext } from 'ra-core';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nvar toLocaleStringSupportsLocales = (function () {\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n    try {\n        new Date().toLocaleString('i');\n    }\n    catch (error) {\n        return error instanceof RangeError;\n    }\n    return false;\n})();\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nexport var DateField = memo(function (props) {\n    var className = props.className, emptyText = props.emptyText, locales = props.locales, options = props.options, _a = props.showTime, showTime = _a === void 0 ? false : _a, source = props.source, rest = __rest(props, [\"className\", \"emptyText\", \"locales\", \"options\", \"showTime\", \"source\"]);\n    var record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    var value = get(record, source);\n    if (value == null || value === '') {\n        return emptyText ? (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeFieldRestProps(rest)), emptyText)) : null;\n    }\n    var date = value instanceof Date ? value : new Date(value);\n    var dateOptions = options;\n    if (typeof value === 'string' &&\n        value.length <= 10 &&\n        !showTime &&\n        !options) {\n        // Input is a date string (e.g. '2022-02-15') without time and time zone.\n        // Force timezone to UTC to fix issue with people in negative time zones\n        // who may see a different date when calling toLocaleDateString().\n        dateOptions = { timeZone: 'UTC' };\n    }\n    var dateString = showTime\n        ? toLocaleStringSupportsLocales\n            ? date.toLocaleString(locales, options)\n            : date.toLocaleString()\n        : toLocaleStringSupportsLocales\n            ? date.toLocaleDateString(locales, dateOptions)\n            : date.toLocaleDateString();\n    return (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeFieldRestProps(rest)), dateString));\n});\nDateField.defaultProps = {\n    addLabel: true,\n};\nDateField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), { locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]), options: PropTypes.object, showTime: PropTypes.bool });\nDateField.displayName = 'DateField';\nexport default DateField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}