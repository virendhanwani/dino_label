{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, useListController, ListContextProvider } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport ListView from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside\n * - bulkActionButtons\n * - component\n * - empty\n * - exporter\n * - filter (the permanent filter to apply to the query)\n * - filterDefaultValues (the default values for `alwaysOn` filters)\n * - filters (a list of inputs used to display the filter button/form combo)\n * - pagination\n * - perPage\n * - sort\n * - title\n * - syncWithLocation\n *\n * @example\n *\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nvar List = function (props) {\n  useCheckMinimumRequiredProps('List', ['children'], props);\n  var controllerProps = useListController(props);\n  return React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListView, __assign({}, props, controllerProps)));\n};\nList.propTypes = {\n  // the props you can change\n  // @ts-ignore-line\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  aside: PropTypes.element,\n  // @ts-ignore-line\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  // @ts-ignore-line\n  pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  perPage: PropTypes.number.isRequired,\n  //@ts-ignore-line\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  title: TitlePropType,\n  // the props managed by react-admin\n  authProvider: PropTypes.func,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  location: PropTypes.any,\n  match: PropTypes.any,\n  path: PropTypes.string,\n  resource: PropTypes.string,\n  syncWithLocation: PropTypes.bool\n};\nList.defaultProps = {\n  filter: {},\n  perPage: 10\n};\nexport default List;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","PropTypes","useCheckMinimumRequiredProps","useListController","ListContextProvider","TitlePropType","ListView","List","props","controllerProps","createElement","value","propTypes","actions","oneOfType","bool","element","aside","bulkActionButtons","children","classes","object","className","string","filter","filterDefaultValues","filters","arrayOf","pagination","perPage","number","isRequired","sort","shape","field","order","title","authProvider","func","hasCreate","hasEdit","hasList","hasShow","location","any","match","path","resource","syncWithLocation","defaultProps"],"sources":["/node_modules/ra-ui-materialui/esm/list/List.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, useListController, ListContextProvider, } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport ListView from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside\n * - bulkActionButtons\n * - component\n * - empty\n * - exporter\n * - filter (the permanent filter to apply to the query)\n * - filterDefaultValues (the default values for `alwaysOn` filters)\n * - filters (a list of inputs used to display the filter button/form combo)\n * - pagination\n * - perPage\n * - sort\n * - title\n * - syncWithLocation\n *\n * @example\n *\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nvar List = function (props) {\n    useCheckMinimumRequiredProps('List', ['children'], props);\n    var controllerProps = useListController(props);\n    return (React.createElement(ListContextProvider, { value: controllerProps },\n        React.createElement(ListView, __assign({}, props, controllerProps))));\n};\nList.propTypes = {\n    // the props you can change\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    // @ts-ignore-line\n    bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    children: PropTypes.element,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number.isRequired,\n    //@ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    title: TitlePropType,\n    // the props managed by react-admin\n    authProvider: PropTypes.func,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    location: PropTypes.any,\n    match: PropTypes.any,\n    path: PropTypes.string,\n    resource: PropTypes.string,\n    syncWithLocation: PropTypes.bool,\n};\nList.defaultProps = {\n    filter: {},\n    perPage: 10,\n};\nexport default List;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,OAAO,KAAKO,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,4BAA4B,EAAEC,iBAAiB,EAAEC,mBAAmB,QAAS,SAAS;AAC/F,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAOC,QAAQ,MAAM,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG,SAAAA,CAAUC,KAAK,EAAE;EACxBN,4BAA4B,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,EAAEM,KAAK,CAAC;EACzD,IAAIC,eAAe,GAAGN,iBAAiB,CAACK,KAAK,CAAC;EAC9C,OAAQR,KAAK,CAACU,aAAa,CAACN,mBAAmB,EAAE;IAAEO,KAAK,EAAEF;EAAgB,CAAC,EACvET,KAAK,CAACU,aAAa,CAACJ,QAAQ,EAAEpB,QAAQ,CAAC,CAAC,CAAC,EAAEsB,KAAK,EAAEC,eAAe,CAAC,CAAC,CAAC;AAC5E,CAAC;AACDF,IAAI,CAACK,SAAS,GAAG;EACb;EACA;EACAC,OAAO,EAAEZ,SAAS,CAACa,SAAS,CAAC,CAACb,SAAS,CAACc,IAAI,EAAEd,SAAS,CAACe,OAAO,CAAC,CAAC;EACjEC,KAAK,EAAEhB,SAAS,CAACe,OAAO;EACxB;EACAE,iBAAiB,EAAEjB,SAAS,CAACa,SAAS,CAAC,CAACb,SAAS,CAACe,OAAO,EAAEf,SAAS,CAACc,IAAI,CAAC,CAAC;EAC3EI,QAAQ,EAAElB,SAAS,CAACe,OAAO;EAC3BI,OAAO,EAAEnB,SAAS,CAACoB,MAAM;EACzBC,SAAS,EAAErB,SAAS,CAACsB,MAAM;EAC3BC,MAAM,EAAEvB,SAAS,CAACoB,MAAM;EACxBI,mBAAmB,EAAExB,SAAS,CAACoB,MAAM;EACrCK,OAAO,EAAEzB,SAAS,CAACa,SAAS,CAAC,CACzBb,SAAS,CAACe,OAAO,EACjBf,SAAS,CAAC0B,OAAO,CAAC1B,SAAS,CAACe,OAAO,CAAC,CACvC,CAAC;EACF;EACAY,UAAU,EAAE3B,SAAS,CAACa,SAAS,CAAC,CAACb,SAAS,CAACe,OAAO,EAAEf,SAAS,CAACc,IAAI,CAAC,CAAC;EACpEc,OAAO,EAAE5B,SAAS,CAAC6B,MAAM,CAACC,UAAU;EACpC;EACAC,IAAI,EAAE/B,SAAS,CAACgC,KAAK,CAAC;IAClBC,KAAK,EAAEjC,SAAS,CAACsB,MAAM;IACvBY,KAAK,EAAElC,SAAS,CAACsB;EACrB,CAAC,CAAC;EACFa,KAAK,EAAE/B,aAAa;EACpB;EACAgC,YAAY,EAAEpC,SAAS,CAACqC,IAAI;EAC5BC,SAAS,EAAEtC,SAAS,CAACc,IAAI;EACzByB,OAAO,EAAEvC,SAAS,CAACc,IAAI;EACvB0B,OAAO,EAAExC,SAAS,CAACc,IAAI;EACvB2B,OAAO,EAAEzC,SAAS,CAACc,IAAI;EACvB4B,QAAQ,EAAE1C,SAAS,CAAC2C,GAAG;EACvBC,KAAK,EAAE5C,SAAS,CAAC2C,GAAG;EACpBE,IAAI,EAAE7C,SAAS,CAACsB,MAAM;EACtBwB,QAAQ,EAAE9C,SAAS,CAACsB,MAAM;EAC1ByB,gBAAgB,EAAE/C,SAAS,CAACc;AAChC,CAAC;AACDR,IAAI,CAAC0C,YAAY,GAAG;EAChBzB,MAAM,EAAE,CAAC,CAAC;EACVK,OAAO,EAAE;AACb,CAAC;AACD,eAAetB,IAAI"},"metadata":{},"sourceType":"module"}