{"ast":null,"code":"import { useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { resetNotification } from '../actions/notificationActions';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n    return authProvider.login(params).then(function (ret) {\n      dispatch(resetNotification());\n      var redirectUrl = pathName ? pathName : nextPathName + nextSearch || defaultAuthParams.afterLoginUrl;\n      history.push(redirectUrl);\n      return ret;\n    });\n  }, [authProvider, history, nextPathName, nextSearch, dispatch]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    dispatch(resetNotification());\n    history.push(defaultAuthParams.afterLoginUrl);\n    return Promise.resolve();\n  }, [history, dispatch]);\n  return authProvider ? login : loginWithoutProvider;\n};\nexport default useLogin;","map":{"version":3,"names":["useCallback","useLocation","useHistory","useDispatch","useAuthProvider","defaultAuthParams","resetNotification","useLogin","authProvider","location","locationState","state","history","dispatch","nextPathName","nextPathname","nextSearch","login","params","pathName","then","ret","redirectUrl","afterLoginUrl","push","loginWithoutProvider","_","__","Promise","resolve"],"sources":["/node_modules/ra-core/esm/auth/useLogin.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { resetNotification } from '../actions/notificationActions';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n    var authProvider = useAuthProvider();\n    var location = useLocation();\n    var locationState = location.state;\n    var history = useHistory();\n    var dispatch = useDispatch();\n    var nextPathName = locationState && locationState.nextPathname;\n    var nextSearch = locationState && locationState.nextSearch;\n    var login = useCallback(function (params, pathName) {\n        if (params === void 0) { params = {}; }\n        return authProvider.login(params).then(function (ret) {\n            dispatch(resetNotification());\n            var redirectUrl = pathName\n                ? pathName\n                : nextPathName + nextSearch ||\n                    defaultAuthParams.afterLoginUrl;\n            history.push(redirectUrl);\n            return ret;\n        });\n    }, [authProvider, history, nextPathName, nextSearch, dispatch]);\n    var loginWithoutProvider = useCallback(function (_, __) {\n        dispatch(resetNotification());\n        history.push(defaultAuthParams.afterLoginUrl);\n        return Promise.resolve();\n    }, [history, dispatch]);\n    return authProvider ? login : loginWithoutProvider;\n};\nexport default useLogin;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,UAAU,QAAQ,kBAAkB;AAC1D,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,eAAe,IAAIC,iBAAiB,QAAQ,mBAAmB;AACtE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,SAAAA,CAAA,EAAY;EACvB,IAAIC,YAAY,GAAGJ,eAAe,EAAE;EACpC,IAAIK,QAAQ,GAAGR,WAAW,EAAE;EAC5B,IAAIS,aAAa,GAAGD,QAAQ,CAACE,KAAK;EAClC,IAAIC,OAAO,GAAGV,UAAU,EAAE;EAC1B,IAAIW,QAAQ,GAAGV,WAAW,EAAE;EAC5B,IAAIW,YAAY,GAAGJ,aAAa,IAAIA,aAAa,CAACK,YAAY;EAC9D,IAAIC,UAAU,GAAGN,aAAa,IAAIA,aAAa,CAACM,UAAU;EAC1D,IAAIC,KAAK,GAAGjB,WAAW,CAAC,UAAUkB,MAAM,EAAEC,QAAQ,EAAE;IAChD,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,CAAC,CAAC;IAAE;IACtC,OAAOV,YAAY,CAACS,KAAK,CAACC,MAAM,CAAC,CAACE,IAAI,CAAC,UAAUC,GAAG,EAAE;MAClDR,QAAQ,CAACP,iBAAiB,EAAE,CAAC;MAC7B,IAAIgB,WAAW,GAAGH,QAAQ,GACpBA,QAAQ,GACRL,YAAY,GAAGE,UAAU,IACvBX,iBAAiB,CAACkB,aAAa;MACvCX,OAAO,CAACY,IAAI,CAACF,WAAW,CAAC;MACzB,OAAOD,GAAG;IACd,CAAC,CAAC;EACN,CAAC,EAAE,CAACb,YAAY,EAAEI,OAAO,EAAEE,YAAY,EAAEE,UAAU,EAAEH,QAAQ,CAAC,CAAC;EAC/D,IAAIY,oBAAoB,GAAGzB,WAAW,CAAC,UAAU0B,CAAC,EAAEC,EAAE,EAAE;IACpDd,QAAQ,CAACP,iBAAiB,EAAE,CAAC;IAC7BM,OAAO,CAACY,IAAI,CAACnB,iBAAiB,CAACkB,aAAa,CAAC;IAC7C,OAAOK,OAAO,CAACC,OAAO,EAAE;EAC5B,CAAC,EAAE,CAACjB,OAAO,EAAEC,QAAQ,CAAC,CAAC;EACvB,OAAOL,YAAY,GAAGS,KAAK,GAAGQ,oBAAoB;AACtD,CAAC;AACD,eAAelB,QAAQ"},"metadata":{},"sourceType":"module"}