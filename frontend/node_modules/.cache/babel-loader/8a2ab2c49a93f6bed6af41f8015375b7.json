{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport merge from 'lodash/merge';\nimport { DEFAULT_LOCALE } from './index';\n/**\n * Resolve the browser locale according to the value of the global window.navigator\n *\n * Use it to determine the <Admin> locale at runtime.\n *\n * @example\n *     import * as React from \"react\";\n *     import { Admin, Resource, resolveBrowserLocale } from 'react-admin';\n *     import englishMessages from 'ra-language-english';\n *     import frenchMessages from 'ra-language-french';\n *     const messages = {\n *        fr: frenchMessages,\n *        en: englishMessages,\n *     };\n *     const App = () => (\n *         <Admin locale={resolveBrowserLocale()} messages={messages}>\n *             ...\n *         </Admin>\n *     );\n *\n * @param {string} defaultLocale Defaults to 'en'\n */\nexport var resolveBrowserLocale = function (defaultLocale) {\n  if (defaultLocale === void 0) {\n    defaultLocale = DEFAULT_LOCALE;\n  }\n  // from http://blog.ksol.fr/user-locale-detection-browser-javascript/\n  // Rely on the window.navigator object to determine user locale\n  var _a = window.navigator,\n    language = _a.language,\n    browserLanguage = _a.browserLanguage,\n    userLanguage = _a.userLanguage;\n  return (language || browserLanguage || userLanguage || defaultLocale).split('-')[0];\n};\n/**\n * Compose translations from multiple packages for a single language (eg: 'english').\n *\n * Use it to merge translations from addons with the main react-admin translations.\n *\n * @example\n *     import * as React from \"react\";\n *     import { Admin, Resource, mergeTranslations } from 'react-admin';\n *     import englishMessages from 'ra-language-english';\n *     import englishTreeMessages from 'ra-tree-language-english';\n *     const messages = {\n *        en: mergeTranslations(englishMessages, englishTreeMessages),\n *     };\n *     const App = () => (\n *         <Admin locale=\"en\" messages={messages}>\n *             ...\n *         </Admin>\n *     );\n */\nexport var mergeTranslations = function () {\n  var translationsModules = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    translationsModules[_i] = arguments[_i];\n  }\n  return merge.apply(void 0, __spreadArray([{}], translationsModules, false));\n};","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","merge","DEFAULT_LOCALE","resolveBrowserLocale","defaultLocale","_a","window","navigator","language","browserLanguage","userLanguage","split","mergeTranslations","translationsModules","_i","apply"],"sources":["/node_modules/ra-core/esm/i18n/TranslationUtils.js"],"sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport merge from 'lodash/merge';\nimport { DEFAULT_LOCALE } from './index';\n/**\n * Resolve the browser locale according to the value of the global window.navigator\n *\n * Use it to determine the <Admin> locale at runtime.\n *\n * @example\n *     import * as React from \"react\";\n *     import { Admin, Resource, resolveBrowserLocale } from 'react-admin';\n *     import englishMessages from 'ra-language-english';\n *     import frenchMessages from 'ra-language-french';\n *     const messages = {\n *        fr: frenchMessages,\n *        en: englishMessages,\n *     };\n *     const App = () => (\n *         <Admin locale={resolveBrowserLocale()} messages={messages}>\n *             ...\n *         </Admin>\n *     );\n *\n * @param {string} defaultLocale Defaults to 'en'\n */\nexport var resolveBrowserLocale = function (defaultLocale) {\n    if (defaultLocale === void 0) { defaultLocale = DEFAULT_LOCALE; }\n    // from http://blog.ksol.fr/user-locale-detection-browser-javascript/\n    // Rely on the window.navigator object to determine user locale\n    var _a = window.navigator, language = _a.language, browserLanguage = _a.browserLanguage, userLanguage = _a.userLanguage;\n    return (language || browserLanguage || userLanguage || defaultLocale).split('-')[0];\n};\n/**\n * Compose translations from multiple packages for a single language (eg: 'english').\n *\n * Use it to merge translations from addons with the main react-admin translations.\n *\n * @example\n *     import * as React from \"react\";\n *     import { Admin, Resource, mergeTranslations } from 'react-admin';\n *     import englishMessages from 'ra-language-english';\n *     import englishTreeMessages from 'ra-tree-language-english';\n *     const messages = {\n *        en: mergeTranslations(englishMessages, englishTreeMessages),\n *     };\n *     const App = () => (\n *         <Admin locale=\"en\" messages={messages}>\n *             ...\n *         </Admin>\n *     );\n */\nexport var mergeTranslations = function () {\n    var translationsModules = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        translationsModules[_i] = arguments[_i];\n    }\n    return merge.apply(void 0, __spreadArray([{}], translationsModules, false));\n};\n"],"mappings":"AAAA,IAAIA,aAAa,GAAI,IAAI,IAAI,IAAI,CAACA,aAAa,IAAK,UAAUC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC1E,IAAIA,IAAI,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGL,IAAI,CAACG,MAAM,EAAEG,EAAE,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACjF,IAAIE,EAAE,IAAI,EAAEF,CAAC,IAAIJ,IAAI,CAAC,EAAE;MACpB,IAAI,CAACM,EAAE,EAAEA,EAAE,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACV,IAAI,EAAE,CAAC,EAAEI,CAAC,CAAC;MACpDE,EAAE,CAACF,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,CAAC;IACnB;EACJ;EACA,OAAOL,EAAE,CAACY,MAAM,CAACL,EAAE,IAAIC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACV,IAAI,CAAC,CAAC;AAC5D,CAAC;AACD,OAAOY,KAAK,MAAM,cAAc;AAChC,SAASC,cAAc,QAAQ,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,oBAAoB,GAAG,SAAAA,CAAUC,aAAa,EAAE;EACvD,IAAIA,aAAa,KAAK,KAAK,CAAC,EAAE;IAAEA,aAAa,GAAGF,cAAc;EAAE;EAChE;EACA;EACA,IAAIG,EAAE,GAAGC,MAAM,CAACC,SAAS;IAAEC,QAAQ,GAAGH,EAAE,CAACG,QAAQ;IAAEC,eAAe,GAAGJ,EAAE,CAACI,eAAe;IAAEC,YAAY,GAAGL,EAAE,CAACK,YAAY;EACvH,OAAO,CAACF,QAAQ,IAAIC,eAAe,IAAIC,YAAY,IAAIN,aAAa,EAAEO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,iBAAiB,GAAG,SAAAA,CAAA,EAAY;EACvC,IAAIC,mBAAmB,GAAG,EAAE;EAC5B,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGvB,SAAS,CAACC,MAAM,EAAEsB,EAAE,EAAE,EAAE;IAC1CD,mBAAmB,CAACC,EAAE,CAAC,GAAGvB,SAAS,CAACuB,EAAE,CAAC;EAC3C;EACA,OAAOb,KAAK,CAACc,KAAK,CAAC,KAAK,CAAC,EAAE5B,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE0B,mBAAmB,EAAE,KAAK,CAAC,CAAC;AAC/E,CAAC"},"metadata":{},"sourceType":"module"}