{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput, warning } from 'ra-core';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\nimport classnames from 'classnames';\nimport Labeled from './Labeled';\nimport { LinearProgress } from '../layout';\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceArrayInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\nvar CheckboxGroupInput = function (props) {\n  var _a = props.choices,\n    choices = _a === void 0 ? [] : _a,\n    className = props.className,\n    classesOverride = props.classes,\n    format = props.format,\n    helperText = props.helperText,\n    label = props.label,\n    loaded = props.loaded,\n    loading = props.loading,\n    _b = props.margin,\n    margin = _b === void 0 ? 'dense' : _b,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onFocus = props.onFocus,\n    optionText = props.optionText,\n    optionValue = props.optionValue,\n    options = props.options,\n    parse = props.parse,\n    resource = props.resource,\n    row = props.row,\n    source = props.source,\n    translate = props.translate,\n    translateChoice = props.translateChoice,\n    validate = props.validate,\n    rest = __rest(props, [\"choices\", \"className\", \"classes\", \"format\", \"helperText\", \"label\", \"loaded\", \"loading\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n  var classes = useStyles(props);\n  warning(source === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the source prop\");\n  warning(choices === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the choices prop\");\n  var _c = useInput(__assign({\n      format: format,\n      onBlur: onBlur,\n      onChange: onChange,\n      onFocus: onFocus,\n      parse: parse,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    id = _c.id,\n    _d = _c.input,\n    finalFormOnChange = _d.onChange,\n    finalFormOnBlur = _d.onBlur,\n    value = _d.value,\n    isRequired = _c.isRequired,\n    _e = _c.meta,\n    error = _e.error,\n    submitError = _e.submitError,\n    touched = _e.touched;\n  var handleCheck = useCallback(function (event, isChecked) {\n    var newValue;\n    if (choices.every(function (item) {\n      return typeof get(item, optionValue) === 'number';\n    })) {\n      try {\n        // try to convert string value to number, e.g. '123'\n        newValue = JSON.parse(event.target.value);\n      } catch (e) {\n        // impossible to convert value, e.g. 'abc'\n        newValue = event.target.value;\n      }\n    } else {\n      newValue = event.target.value;\n    }\n    if (isChecked) {\n      finalFormOnChange(__spreadArray(__spreadArray([], value || [], true), [newValue], false));\n    } else {\n      finalFormOnChange(value.filter(function (v) {\n        return v != newValue;\n      })); // eslint-disable-line eqeqeq\n    }\n\n    finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n  }, [choices, finalFormOnBlur, optionValue, finalFormOnChange, value]);\n  if (loading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: className,\n      isRequired: isRequired,\n      margin: margin\n    }, React.createElement(LinearProgress, null));\n  }\n  return React.createElement(FormControl, __assign({\n    component: \"fieldset\",\n    margin: margin,\n    error: touched && !!(error || submitError),\n    className: classnames(classes.root, className)\n  }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n    component: \"legend\",\n    className: classes.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(FormGroup, {\n    row: row\n  }, choices.map(function (choice) {\n    return React.createElement(CheckboxGroupInputItem, {\n      key: get(choice, optionValue),\n      choice: choice,\n      id: id,\n      onChange: handleCheck,\n      options: options,\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice,\n      value: value\n    });\n  })), React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error || submitError,\n    helperText: helperText\n  })));\n};\nvar sanitizeRestProps = function (_a) {\n  var refetch = _a.refetch,\n    setFilter = _a.setFilter,\n    setPagination = _a.setPagination,\n    setSort = _a.setSort,\n    loaded = _a.loaded,\n    touched = _a.touched,\n    rest = __rest(_a, [\"refetch\", \"setFilter\", \"setPagination\", \"setSort\", \"loaded\", \"touched\"]);\n  return sanitizeInputRestProps(rest);\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    label: {\n      transform: 'translate(0, 8px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    }\n  };\n}, {\n  name: 'RaCheckboxGroupInput'\n});\nCheckboxGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  source: PropTypes.string,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  row: PropTypes.bool,\n  resource: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nCheckboxGroupInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true,\n  fullWidth: true,\n  row: true\n};\nexport default CheckboxGroupInput;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__spreadArray","to","from","pack","l","ar","Array","slice","concat","React","useCallback","PropTypes","get","FormLabel","FormControl","FormGroup","FormHelperText","makeStyles","FieldTitle","useInput","warning","sanitizeInputRestProps","CheckboxGroupInputItem","InputHelperText","classnames","Labeled","LinearProgress","CheckboxGroupInput","props","_a","choices","className","classesOverride","classes","format","helperText","label","loaded","loading","_b","margin","onBlur","onChange","onFocus","optionText","optionValue","options","parse","resource","row","source","translate","translateChoice","validate","rest","useStyles","undefined","_c","id","_d","input","finalFormOnChange","finalFormOnBlur","value","isRequired","_e","meta","error","submitError","touched","handleCheck","event","isChecked","newValue","every","item","JSON","target","filter","v","createElement","component","root","sanitizeRestProps","map","choice","key","refetch","setFilter","setPagination","setSort","theme","transform","transformOrigin","direction","name","propTypes","arrayOf","object","string","oneOfType","bool","func","element","defaultProps","fullWidth"],"sources":["/node_modules/ra-ui-materialui/esm/input/CheckboxGroupInput.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput, warning } from 'ra-core';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\nimport classnames from 'classnames';\nimport Labeled from './Labeled';\nimport { LinearProgress } from '../layout';\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceArrayInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\nvar CheckboxGroupInput = function (props) {\n    var _a = props.choices, choices = _a === void 0 ? [] : _a, className = props.className, classesOverride = props.classes, format = props.format, helperText = props.helperText, label = props.label, loaded = props.loaded, loading = props.loading, _b = props.margin, margin = _b === void 0 ? 'dense' : _b, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, optionText = props.optionText, optionValue = props.optionValue, options = props.options, parse = props.parse, resource = props.resource, row = props.row, source = props.source, translate = props.translate, translateChoice = props.translateChoice, validate = props.validate, rest = __rest(props, [\"choices\", \"className\", \"classes\", \"format\", \"helperText\", \"label\", \"loaded\", \"loading\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n    var classes = useStyles(props);\n    warning(source === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the source prop\");\n    warning(choices === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the choices prop\");\n    var _c = useInput(__assign({ format: format, onBlur: onBlur, onChange: onChange, onFocus: onFocus, parse: parse, resource: resource, source: source, validate: validate }, rest)), id = _c.id, _d = _c.input, finalFormOnChange = _d.onChange, finalFormOnBlur = _d.onBlur, value = _d.value, isRequired = _c.isRequired, _e = _c.meta, error = _e.error, submitError = _e.submitError, touched = _e.touched;\n    var handleCheck = useCallback(function (event, isChecked) {\n        var newValue;\n        if (choices.every(function (item) { return typeof get(item, optionValue) === 'number'; })) {\n            try {\n                // try to convert string value to number, e.g. '123'\n                newValue = JSON.parse(event.target.value);\n            }\n            catch (e) {\n                // impossible to convert value, e.g. 'abc'\n                newValue = event.target.value;\n            }\n        }\n        else {\n            newValue = event.target.value;\n        }\n        if (isChecked) {\n            finalFormOnChange(__spreadArray(__spreadArray([], (value || []), true), [newValue], false));\n        }\n        else {\n            finalFormOnChange(value.filter(function (v) { return v != newValue; })); // eslint-disable-line eqeqeq\n        }\n        finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n    }, [choices, finalFormOnBlur, optionValue, finalFormOnChange, value]);\n    if (loading) {\n        return (React.createElement(Labeled, { label: label, source: source, resource: resource, className: className, isRequired: isRequired, margin: margin },\n            React.createElement(LinearProgress, null)));\n    }\n    return (React.createElement(FormControl, __assign({ component: \"fieldset\", margin: margin, error: touched && !!(error || submitError), className: classnames(classes.root, className) }, sanitizeRestProps(rest)),\n        React.createElement(FormLabel, { component: \"legend\", className: classes.label },\n            React.createElement(FieldTitle, { label: label, source: source, resource: resource, isRequired: isRequired })),\n        React.createElement(FormGroup, { row: row }, choices.map(function (choice) { return (React.createElement(CheckboxGroupInputItem, { key: get(choice, optionValue), choice: choice, id: id, onChange: handleCheck, options: options, optionText: optionText, optionValue: optionValue, translateChoice: translateChoice, value: value })); })),\n        React.createElement(FormHelperText, null,\n            React.createElement(InputHelperText, { touched: touched, error: error || submitError, helperText: helperText }))));\n};\nvar sanitizeRestProps = function (_a) {\n    var refetch = _a.refetch, setFilter = _a.setFilter, setPagination = _a.setPagination, setSort = _a.setSort, loaded = _a.loaded, touched = _a.touched, rest = __rest(_a, [\"refetch\", \"setFilter\", \"setPagination\", \"setSort\", \"loaded\", \"touched\"]);\n    return sanitizeInputRestProps(rest);\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    root: {},\n    label: {\n        transform: 'translate(0, 8px) scale(0.75)',\n        transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right'),\n    },\n}); }, { name: 'RaCheckboxGroupInput' });\nCheckboxGroupInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    source: PropTypes.string,\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    row: PropTypes.bool,\n    resource: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\nCheckboxGroupInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n    fullWidth: true,\n    row: true,\n};\nexport default CheckboxGroupInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}