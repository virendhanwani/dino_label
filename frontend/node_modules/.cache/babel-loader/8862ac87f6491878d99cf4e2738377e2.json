{"ast":null,"code":"import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, valuesAreUrl, valuesAreImageUrl, valuesAreEmail } from './assertions';\nexport var InferenceTypes = ['array', 'boolean', 'date', 'email', 'id', 'image', 'number', 'reference', 'referenceChild', 'referenceArray', 'referenceArrayChild', 'richText', 'string', 'url', 'object'];\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\nexport var inferTypeFromValues = function (name, values) {\n  if (values === void 0) {\n    values = [];\n  }\n  if (name === 'id') {\n    return {\n      type: 'id',\n      props: {\n        source: name\n      }\n    };\n  }\n  if (name.substr(name.length - 3) === '_id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n  if (name.substr(name.length - 2) === 'Id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 2))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n  if (name.substr(name.length - 4) === '_ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 4))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n  if (name.substr(name.length - 3) === 'Ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n  if (values.length === 0) {\n    if (name === 'email') {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n    if (name === 'url') {\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    }\n    // FIXME introspect further using name\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0])) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, []));\n      // FIXME bad visual representation\n      return {\n        type: 'array',\n        props: {\n          source: name\n        },\n        children: Object.keys(leafValues_1).map(function (leafName) {\n          return inferTypeFromValues(leafName, leafValues_1[leafName]);\n        })\n      };\n    }\n    // FIXME introspect further\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n  if (valuesAreBoolean(values)) {\n    return {\n      type: 'boolean',\n      props: {\n        source: name\n      }\n    };\n  }\n  if (valuesAreDate(values)) {\n    return {\n      type: 'date',\n      props: {\n        source: name\n      }\n    };\n  }\n  if (valuesAreString(values)) {\n    if (name === 'email' || valuesAreEmail(values)) {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n    if (name === 'url' || valuesAreUrl(values)) {\n      if (valuesAreImageUrl(values)) {\n        return {\n          type: 'image',\n          props: {\n            source: name\n          }\n        };\n      }\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    }\n    if (valuesAreDateString(values)) {\n      return {\n        type: 'date',\n        props: {\n          source: name\n        }\n      };\n    }\n    if (valuesAreHtml(values)) {\n      return {\n        type: 'richText',\n        props: {\n          source: name\n        }\n      };\n    }\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n      return {\n        type: 'number',\n        props: {\n          source: name\n        }\n      };\n    }\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n  if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n    return {\n      type: 'number',\n      props: {\n        source: name\n      }\n    };\n  }\n  if (valuesAreObject(values)) {\n    /// Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferTypeFromValues(name + \".\" + propName_1, leafValues);\n  }\n  return {\n    type: 'string',\n    props: {\n      source: name\n    }\n  };\n};","map":{"version":3,"names":["inflection","getValuesFromRecords","isObject","valuesAreArray","valuesAreBoolean","valuesAreDate","valuesAreDateString","valuesAreHtml","valuesAreInteger","valuesAreNumeric","valuesAreObject","valuesAreString","valuesAreUrl","valuesAreImageUrl","valuesAreEmail","InferenceTypes","inferTypeFromValues","name","values","type","props","source","substr","length","reference","pluralize","children","leafValues_1","reduce","acc","vals","concat","Object","keys","map","leafName","propName_1","shift","leafValues","v"],"sources":["/node_modules/ra-core/esm/inference/inferTypeFromValues.js"],"sourcesContent":["import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, valuesAreUrl, valuesAreImageUrl, valuesAreEmail, } from './assertions';\nexport var InferenceTypes = [\n    'array',\n    'boolean',\n    'date',\n    'email',\n    'id',\n    'image',\n    'number',\n    'reference',\n    'referenceChild',\n    'referenceArray',\n    'referenceArrayChild',\n    'richText',\n    'string',\n    'url',\n    'object',\n];\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\nexport var inferTypeFromValues = function (name, values) {\n    if (values === void 0) { values = []; }\n    if (name === 'id') {\n        return { type: 'id', props: { source: name } };\n    }\n    if (name.substr(name.length - 3) === '_id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 3)),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 2) === 'Id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 2)),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 4) === '_ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 4)),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (name.substr(name.length - 3) === 'Ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 3)),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (values.length === 0) {\n        if (name === 'email') {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url') {\n            return { type: 'url', props: { source: name } };\n        }\n        // FIXME introspect further using name\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreArray(values)) {\n        if (isObject(values[0][0])) {\n            var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) { return acc.concat(vals); }, []));\n            // FIXME bad visual representation\n            return {\n                type: 'array',\n                props: { source: name },\n                children: Object.keys(leafValues_1).map(function (leafName) {\n                    return inferTypeFromValues(leafName, leafValues_1[leafName]);\n                }),\n            };\n        }\n        // FIXME introspect further\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreBoolean(values)) {\n        return { type: 'boolean', props: { source: name } };\n    }\n    if (valuesAreDate(values)) {\n        return { type: 'date', props: { source: name } };\n    }\n    if (valuesAreString(values)) {\n        if (name === 'email' || valuesAreEmail(values)) {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url' || valuesAreUrl(values)) {\n            if (valuesAreImageUrl(values)) {\n                return { type: 'image', props: { source: name } };\n            }\n            return { type: 'url', props: { source: name } };\n        }\n        if (valuesAreDateString(values)) {\n            return { type: 'date', props: { source: name } };\n        }\n        if (valuesAreHtml(values)) {\n            return { type: 'richText', props: { source: name } };\n        }\n        if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n            return { type: 'number', props: { source: name } };\n        }\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n        return { type: 'number', props: { source: name } };\n    }\n    if (valuesAreObject(values)) {\n        /// Arbitrarily, choose the first prop of the first object\n        var propName_1 = Object.keys(values[0]).shift();\n        var leafValues = values.map(function (v) { return v[propName_1]; });\n        return inferTypeFromValues(name + \".\" + propName_1, leafValues);\n    }\n    return { type: 'string', props: { source: name } };\n};\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,SAASC,QAAQ,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,eAAe,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,cAAc,QAAS,cAAc;AACpP,OAAO,IAAIC,cAAc,GAAG,CACxB,OAAO,EACP,SAAS,EACT,MAAM,EACN,OAAO,EACP,IAAI,EACJ,OAAO,EACP,QAAQ,EACR,WAAW,EACX,gBAAgB,EAChB,gBAAgB,EAChB,qBAAqB,EACrB,UAAU,EACV,QAAQ,EACR,KAAK,EACL,QAAQ,CACX;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,mBAAmB,GAAG,SAAAA,CAAUC,IAAI,EAAEC,MAAM,EAAE;EACrD,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,EAAE;EAAE;EACtC,IAAID,IAAI,KAAK,IAAI,EAAE;IACf,OAAO;MAAEE,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAEJ;MAAK;IAAE,CAAC;EAClD;EACA,IAAIA,IAAI,CAACK,MAAM,CAACL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;IACxC,OAAO;MACHJ,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAE;QACHC,MAAM,EAAEJ,IAAI;QACZO,SAAS,EAAExB,UAAU,CAACyB,SAAS,CAACR,IAAI,CAACK,MAAM,CAAC,CAAC,EAAEL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC;MACnE,CAAC;MACDG,QAAQ,EAAE;QAAEP,IAAI,EAAE;MAAiB;IACvC,CAAC;EACL;EACA,IAAIF,IAAI,CAACK,MAAM,CAACL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;IACvC,OAAO;MACHJ,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAE;QACHC,MAAM,EAAEJ,IAAI;QACZO,SAAS,EAAExB,UAAU,CAACyB,SAAS,CAACR,IAAI,CAACK,MAAM,CAAC,CAAC,EAAEL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC;MACnE,CAAC;MACDG,QAAQ,EAAE;QAAEP,IAAI,EAAE;MAAiB;IACvC,CAAC;EACL;EACA,IAAIF,IAAI,CAACK,MAAM,CAACL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,EAAE;IACzC,OAAO;MACHJ,IAAI,EAAE,gBAAgB;MACtBC,KAAK,EAAE;QACHC,MAAM,EAAEJ,IAAI;QACZO,SAAS,EAAExB,UAAU,CAACyB,SAAS,CAACR,IAAI,CAACK,MAAM,CAAC,CAAC,EAAEL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC;MACnE,CAAC;MACDG,QAAQ,EAAE;QAAEP,IAAI,EAAE;MAAsB;IAC5C,CAAC;EACL;EACA,IAAIF,IAAI,CAACK,MAAM,CAACL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;IACxC,OAAO;MACHJ,IAAI,EAAE,gBAAgB;MACtBC,KAAK,EAAE;QACHC,MAAM,EAAEJ,IAAI;QACZO,SAAS,EAAExB,UAAU,CAACyB,SAAS,CAACR,IAAI,CAACK,MAAM,CAAC,CAAC,EAAEL,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC;MACnE,CAAC;MACDG,QAAQ,EAAE;QAAEP,IAAI,EAAE;MAAsB;IAC5C,CAAC;EACL;EACA,IAAID,MAAM,CAACK,MAAM,KAAK,CAAC,EAAE;IACrB,IAAIN,IAAI,KAAK,OAAO,EAAE;MAClB,OAAO;QAAEE,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK;MAAE,CAAC;IACrD;IACA,IAAIA,IAAI,KAAK,KAAK,EAAE;MAChB,OAAO;QAAEE,IAAI,EAAE,KAAK;QAAEC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK;MAAE,CAAC;IACnD;IACA;IACA,OAAO;MAAEE,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAEJ;MAAK;IAAE,CAAC;EACtD;EACA,IAAId,cAAc,CAACe,MAAM,CAAC,EAAE;IACxB,IAAIhB,QAAQ,CAACgB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACxB,IAAIS,YAAY,GAAG1B,oBAAoB,CAACiB,MAAM,CAACU,MAAM,CAAC,UAAUC,GAAG,EAAEC,IAAI,EAAE;QAAE,OAAOD,GAAG,CAACE,MAAM,CAACD,IAAI,CAAC;MAAE,CAAC,EAAE,EAAE,CAAC,CAAC;MAC7G;MACA,OAAO;QACHX,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK,CAAC;QACvBS,QAAQ,EAAEM,MAAM,CAACC,IAAI,CAACN,YAAY,CAAC,CAACO,GAAG,CAAC,UAAUC,QAAQ,EAAE;UACxD,OAAOnB,mBAAmB,CAACmB,QAAQ,EAAER,YAAY,CAACQ,QAAQ,CAAC,CAAC;QAChE,CAAC;MACL,CAAC;IACL;IACA;IACA,OAAO;MAAEhB,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAEJ;MAAK;IAAE,CAAC;EACtD;EACA,IAAIb,gBAAgB,CAACc,MAAM,CAAC,EAAE;IAC1B,OAAO;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAEJ;MAAK;IAAE,CAAC;EACvD;EACA,IAAIZ,aAAa,CAACa,MAAM,CAAC,EAAE;IACvB,OAAO;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAEJ;MAAK;IAAE,CAAC;EACpD;EACA,IAAIN,eAAe,CAACO,MAAM,CAAC,EAAE;IACzB,IAAID,IAAI,KAAK,OAAO,IAAIH,cAAc,CAACI,MAAM,CAAC,EAAE;MAC5C,OAAO;QAAEC,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK;MAAE,CAAC;IACrD;IACA,IAAIA,IAAI,KAAK,KAAK,IAAIL,YAAY,CAACM,MAAM,CAAC,EAAE;MACxC,IAAIL,iBAAiB,CAACK,MAAM,CAAC,EAAE;QAC3B,OAAO;UAAEC,IAAI,EAAE,OAAO;UAAEC,KAAK,EAAE;YAAEC,MAAM,EAAEJ;UAAK;QAAE,CAAC;MACrD;MACA,OAAO;QAAEE,IAAI,EAAE,KAAK;QAAEC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK;MAAE,CAAC;IACnD;IACA,IAAIX,mBAAmB,CAACY,MAAM,CAAC,EAAE;MAC7B,OAAO;QAAEC,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK;MAAE,CAAC;IACpD;IACA,IAAIV,aAAa,CAACW,MAAM,CAAC,EAAE;MACvB,OAAO;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK;MAAE,CAAC;IACxD;IACA,IAAIT,gBAAgB,CAACU,MAAM,CAAC,IAAIT,gBAAgB,CAACS,MAAM,CAAC,EAAE;MACtD,OAAO;QAAEC,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;UAAEC,MAAM,EAAEJ;QAAK;MAAE,CAAC;IACtD;IACA,OAAO;MAAEE,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAEJ;MAAK;IAAE,CAAC;EACtD;EACA,IAAIT,gBAAgB,CAACU,MAAM,CAAC,IAAIT,gBAAgB,CAACS,MAAM,CAAC,EAAE;IACtD,OAAO;MAAEC,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAEJ;MAAK;IAAE,CAAC;EACtD;EACA,IAAIP,eAAe,CAACQ,MAAM,CAAC,EAAE;IACzB;IACA,IAAIkB,UAAU,GAAGJ,MAAM,CAACC,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC,CAAC,CAACmB,KAAK,EAAE;IAC/C,IAAIC,UAAU,GAAGpB,MAAM,CAACgB,GAAG,CAAC,UAAUK,CAAC,EAAE;MAAE,OAAOA,CAAC,CAACH,UAAU,CAAC;IAAE,CAAC,CAAC;IACnE,OAAOpB,mBAAmB,CAACC,IAAI,GAAG,GAAG,GAAGmB,UAAU,EAAEE,UAAU,CAAC;EACnE;EACA,OAAO;IAAEnB,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;MAAEC,MAAM,EAAEJ;IAAK;EAAE,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"module"}