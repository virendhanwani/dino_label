{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { useListController, getElementsFromRecords, InferredElement, ListContextProvider, useResourceContext } from 'ra-core';\nimport ListView from './ListView';\nimport listFieldTypes from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nvar ListGuesser = function (props) {\n  var controllerProps = useListController(props);\n  return React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListViewGuesser, __assign({}, props, controllerProps)));\n};\nvar ListViewGuesser = function (props) {\n  var ids = props.ids,\n    data = props.data;\n  var resource = useResourceContext(props);\n  var _a = useState(null),\n    inferredChild = _a[0],\n    setInferredChild = _a[1];\n  useEffect(function () {\n    if (ids.length > 0 && data && !inferredChild) {\n      var inferredElements = getElementsFromRecords(ids.map(function (id) {\n        return data[id];\n      }), listFieldTypes);\n      var inferredChild_1 = new InferredElement(listFieldTypes.table, null, inferredElements);\n      process.env.NODE_ENV !== 'production' &&\n      // eslint-disable-next-line no-console\n      console.log(\"Guessed List:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"List = props => (\\n    <List {...props}>\\n\" + inferredChild_1.getRepresentation() + \"\\n    </List>\\n);\");\n      setInferredChild(inferredChild_1.getElement());\n    }\n  }, [data, ids, inferredChild, resource]);\n  return React.createElement(ListView, __assign({}, props), inferredChild);\n};\nListViewGuesser.propTypes = ListView.propTypes;\nexport default ListGuesser;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useState","useEffect","inflection","useListController","getElementsFromRecords","InferredElement","ListContextProvider","useResourceContext","ListView","listFieldTypes","ListGuesser","props","controllerProps","createElement","value","ListViewGuesser","ids","data","resource","_a","inferredChild","setInferredChild","inferredElements","map","id","inferredChild_1","table","process","env","NODE_ENV","console","log","capitalize","singularize","getRepresentation","getElement","propTypes"],"sources":["/node_modules/ra-ui-materialui/esm/list/ListGuesser.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { useListController, getElementsFromRecords, InferredElement, ListContextProvider, useResourceContext, } from 'ra-core';\nimport ListView from './ListView';\nimport listFieldTypes from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nvar ListGuesser = function (props) {\n    var controllerProps = useListController(props);\n    return (React.createElement(ListContextProvider, { value: controllerProps },\n        React.createElement(ListViewGuesser, __assign({}, props, controllerProps))));\n};\nvar ListViewGuesser = function (props) {\n    var ids = props.ids, data = props.data;\n    var resource = useResourceContext(props);\n    var _a = useState(null), inferredChild = _a[0], setInferredChild = _a[1];\n    useEffect(function () {\n        if (ids.length > 0 && data && !inferredChild) {\n            var inferredElements = getElementsFromRecords(ids.map(function (id) { return data[id]; }), listFieldTypes);\n            var inferredChild_1 = new InferredElement(listFieldTypes.table, null, inferredElements);\n            process.env.NODE_ENV !== 'production' &&\n                // eslint-disable-next-line no-console\n                console.log(\"Guessed List:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"List = props => (\\n    <List {...props}>\\n\" + inferredChild_1.getRepresentation() + \"\\n    </List>\\n);\");\n            setInferredChild(inferredChild_1.getElement());\n        }\n    }, [data, ids, inferredChild, resource]);\n    return React.createElement(ListView, __assign({}, props), inferredChild);\n};\nListViewGuesser.propTypes = ListView.propTypes;\nexport default ListGuesser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}