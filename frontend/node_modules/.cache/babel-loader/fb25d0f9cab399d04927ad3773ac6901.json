{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * Uses a special cache to avoid showing an empty list while re-fetching the\n * list after changing params.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetMainList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetMainList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetMainList = function (resource, pagination, sort, filter, options) {\n  var requestSignature = JSON.stringify({\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  });\n  var memo = useRef({});\n  var _a = useQueryWithStore({\n      type: 'getList',\n      resource: resource,\n      payload: {\n        pagination: pagination,\n        sort: sort,\n        filter: filter\n      }\n    }, options,\n    // ids and data selector\n    function (state) {\n      var ids = get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids']); // default value undefined\n      var total = get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'total']); // default value undefined\n      // When the user changes the page/sort/filter, the list of ids from\n      // the cached requests is empty. To avoid rendering an empty list\n      // at that moment, we override the ids and total with the latest\n      // loaded ones.\n      var mainIds = get(state.admin.resources, [resource, 'list', 'ids']); // default value [] (see list.ids reducer)\n      // Since the total can be empty during the loading phase\n      // We need to override that total with the latest loaded one\n      var mainTotal = get(state.admin.resources, [resource, 'list', 'total']); // default value null (see list.total reducer)\n      // Is [] for a page that was never loaded\n      var finalIds = typeof ids === 'undefined' ? mainIds : ids;\n      // Is null for a page that was never loaded.\n      var finalTotal = typeof total === 'undefined' ? mainTotal : total;\n      var allRecords = get(state.admin.resources, [resource, 'data'], defaultData);\n      // poor man's useMemo inside a hook using a ref\n      if (memo.current.finalIds !== finalIds || memo.current.finalTotal !== finalTotal || memo.current.allRecords !== allRecords) {\n        var result = {\n          finalIds: finalIds,\n          finalTotal: finalTotal,\n          allRecords: allRecords\n        };\n        memo.current = {\n          finalIds: finalIds,\n          finalTotal: finalTotal,\n          allRecords: allRecords,\n          result: result\n        };\n      }\n      return memo.current.result;\n    }, function () {\n      return null;\n    }, isDataLoaded),\n    _b = _a.data,\n    finalIds = _b.finalIds,\n    finalTotal = _b.finalTotal,\n    allRecords = _b.allRecords,\n    error = _a.error,\n    loading = _a.loading,\n    loaded = _a.loaded,\n    refetch = _a.refetch;\n  var data = useMemo(function () {\n    return typeof finalIds === 'undefined' ? defaultData : finalIds.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [finalIds, allRecords]);\n  return {\n    data: data,\n    ids: typeof finalIds === 'undefined' ? defaultIds : finalIds,\n    total: finalTotal,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\nvar isDataLoaded = function (data) {\n  return data.finalTotal != null;\n}; // null or undefined","map":{"version":3,"names":["useMemo","useRef","get","useQueryWithStore","defaultIds","defaultData","useGetMainList","resource","pagination","sort","filter","options","requestSignature","JSON","stringify","memo","_a","type","payload","state","ids","admin","resources","total","mainIds","mainTotal","finalIds","finalTotal","allRecords","current","result","isDataLoaded","_b","data","error","loading","loaded","refetch","map","id","reduce","acc","record"],"sources":["/node_modules/ra-core/esm/dataProvider/useGetMainList.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * Uses a special cache to avoid showing an empty list while re-fetching the\n * list after changing params.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetMainList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetMainList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetMainList = function (resource, pagination, sort, filter, options) {\n    var requestSignature = JSON.stringify({ pagination: pagination, sort: sort, filter: filter });\n    var memo = useRef({});\n    var _a = useQueryWithStore({ type: 'getList', resource: resource, payload: { pagination: pagination, sort: sort, filter: filter } }, options, \n    // ids and data selector\n    function (state) {\n        var ids = get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            requestSignature,\n            'ids',\n        ]); // default value undefined\n        var total = get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            requestSignature,\n            'total',\n        ]); // default value undefined\n        // When the user changes the page/sort/filter, the list of ids from\n        // the cached requests is empty. To avoid rendering an empty list\n        // at that moment, we override the ids and total with the latest\n        // loaded ones.\n        var mainIds = get(state.admin.resources, [\n            resource,\n            'list',\n            'ids',\n        ]); // default value [] (see list.ids reducer)\n        // Since the total can be empty during the loading phase\n        // We need to override that total with the latest loaded one\n        var mainTotal = get(state.admin.resources, [\n            resource,\n            'list',\n            'total',\n        ]); // default value null (see list.total reducer)\n        // Is [] for a page that was never loaded\n        var finalIds = typeof ids === 'undefined' ? mainIds : ids;\n        // Is null for a page that was never loaded.\n        var finalTotal = typeof total === 'undefined' ? mainTotal : total;\n        var allRecords = get(state.admin.resources, [resource, 'data'], defaultData);\n        // poor man's useMemo inside a hook using a ref\n        if (memo.current.finalIds !== finalIds ||\n            memo.current.finalTotal !== finalTotal ||\n            memo.current.allRecords !== allRecords) {\n            var result = {\n                finalIds: finalIds,\n                finalTotal: finalTotal,\n                allRecords: allRecords,\n            };\n            memo.current = { finalIds: finalIds, finalTotal: finalTotal, allRecords: allRecords, result: result };\n        }\n        return memo.current.result;\n    }, function () { return null; }, isDataLoaded), _b = _a.data, finalIds = _b.finalIds, finalTotal = _b.finalTotal, allRecords = _b.allRecords, error = _a.error, loading = _a.loading, loaded = _a.loaded, refetch = _a.refetch;\n    var data = useMemo(function () {\n        return typeof finalIds === 'undefined'\n            ? defaultData\n            : finalIds\n                .map(function (id) { return allRecords[id]; })\n                .reduce(function (acc, record) {\n                if (!record)\n                    return acc;\n                acc[record.id] = record;\n                return acc;\n            }, {});\n    }, [finalIds, allRecords]);\n    return {\n        data: data,\n        ids: typeof finalIds === 'undefined' ? defaultIds : finalIds,\n        total: finalTotal,\n        error: error,\n        loading: loading,\n        loaded: loaded,\n        refetch: refetch,\n    };\n};\nvar isDataLoaded = function (data) { return data.finalTotal != null; }; // null or undefined\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}