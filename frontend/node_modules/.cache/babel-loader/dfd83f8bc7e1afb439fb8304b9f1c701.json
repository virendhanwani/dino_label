{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport useNotify from '../sideEffect/useNotify';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nvar useCheckAuth = function () {\n  var authProvider = useAuthProvider();\n  var notify = useNotify();\n  var logout = useLogout();\n  var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo, disableNotification) {\n    if (params === void 0) {\n      params = {};\n    }\n    if (logoutOnFailure === void 0) {\n      logoutOnFailure = true;\n    }\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n    if (disableNotification === void 0) {\n      disableNotification = false;\n    }\n    return authProvider.checkAuth(params).catch(function (error) {\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo ? error.redirectTo : redirectTo);\n        var shouldSkipNotify = disableNotification || error && error.message === false;\n        !shouldSkipNotify && notify(getErrorMessage(error, 'ra.auth.auth_check_error'), {\n          type: 'warning'\n        });\n      }\n      throw error;\n    });\n  }, [authProvider, logout, notify]);\n  return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\nvar checkAuthWithoutAuthProvider = function () {\n  return Promise.resolve();\n};\nvar getErrorMessage = function (error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};\nexport default useCheckAuth;","map":{"version":3,"names":["useCallback","useAuthProvider","defaultAuthParams","useLogout","useNotify","useCheckAuth","authProvider","notify","logout","checkAuth","params","logoutOnFailure","redirectTo","disableNotification","loginUrl","catch","error","shouldSkipNotify","message","getErrorMessage","type","checkAuthWithoutAuthProvider","Promise","resolve","defaultMessage"],"sources":["/node_modules/ra-core/esm/auth/useCheckAuth.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport useNotify from '../sideEffect/useNotify';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nvar useCheckAuth = function () {\n    var authProvider = useAuthProvider();\n    var notify = useNotify();\n    var logout = useLogout();\n    var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo, disableNotification) {\n        if (params === void 0) { params = {}; }\n        if (logoutOnFailure === void 0) { logoutOnFailure = true; }\n        if (redirectTo === void 0) { redirectTo = defaultAuthParams.loginUrl; }\n        if (disableNotification === void 0) { disableNotification = false; }\n        return authProvider.checkAuth(params).catch(function (error) {\n            if (logoutOnFailure) {\n                logout({}, error && error.redirectTo\n                    ? error.redirectTo\n                    : redirectTo);\n                var shouldSkipNotify = disableNotification ||\n                    (error && error.message === false);\n                !shouldSkipNotify &&\n                    notify(getErrorMessage(error, 'ra.auth.auth_check_error'), { type: 'warning' });\n            }\n            throw error;\n        });\n    }, [authProvider, logout, notify]);\n    return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\nvar checkAuthWithoutAuthProvider = function () { return Promise.resolve(); };\nvar getErrorMessage = function (error, defaultMessage) {\n    return typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n            ? defaultMessage\n            : error.message;\n};\nexport default useCheckAuth;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,eAAe,IAAIC,iBAAiB,QAAQ,mBAAmB;AACtE,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAAA,EAAY;EAC3B,IAAIC,YAAY,GAAGL,eAAe,EAAE;EACpC,IAAIM,MAAM,GAAGH,SAAS,EAAE;EACxB,IAAII,MAAM,GAAGL,SAAS,EAAE;EACxB,IAAIM,SAAS,GAAGT,WAAW,CAAC,UAAUU,MAAM,EAAEC,eAAe,EAAEC,UAAU,EAAEC,mBAAmB,EAAE;IAC5F,IAAIH,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,CAAC,CAAC;IAAE;IACtC,IAAIC,eAAe,KAAK,KAAK,CAAC,EAAE;MAAEA,eAAe,GAAG,IAAI;IAAE;IAC1D,IAAIC,UAAU,KAAK,KAAK,CAAC,EAAE;MAAEA,UAAU,GAAGV,iBAAiB,CAACY,QAAQ;IAAE;IACtE,IAAID,mBAAmB,KAAK,KAAK,CAAC,EAAE;MAAEA,mBAAmB,GAAG,KAAK;IAAE;IACnE,OAAOP,YAAY,CAACG,SAAS,CAACC,MAAM,CAAC,CAACK,KAAK,CAAC,UAAUC,KAAK,EAAE;MACzD,IAAIL,eAAe,EAAE;QACjBH,MAAM,CAAC,CAAC,CAAC,EAAEQ,KAAK,IAAIA,KAAK,CAACJ,UAAU,GAC9BI,KAAK,CAACJ,UAAU,GAChBA,UAAU,CAAC;QACjB,IAAIK,gBAAgB,GAAGJ,mBAAmB,IACrCG,KAAK,IAAIA,KAAK,CAACE,OAAO,KAAK,KAAM;QACtC,CAACD,gBAAgB,IACbV,MAAM,CAACY,eAAe,CAACH,KAAK,EAAE,0BAA0B,CAAC,EAAE;UAAEI,IAAI,EAAE;QAAU,CAAC,CAAC;MACvF;MACA,MAAMJ,KAAK;IACf,CAAC,CAAC;EACN,CAAC,EAAE,CAACV,YAAY,EAAEE,MAAM,EAAED,MAAM,CAAC,CAAC;EAClC,OAAOD,YAAY,GAAGG,SAAS,GAAGY,4BAA4B;AAClE,CAAC;AACD,IAAIA,4BAA4B,GAAG,SAAAA,CAAA,EAAY;EAAE,OAAOC,OAAO,CAACC,OAAO,EAAE;AAAE,CAAC;AAC5E,IAAIJ,eAAe,GAAG,SAAAA,CAAUH,KAAK,EAAEQ,cAAc,EAAE;EACnD,OAAO,OAAOR,KAAK,KAAK,QAAQ,GAC1BA,KAAK,GACL,OAAOA,KAAK,KAAK,WAAW,IAAI,CAACA,KAAK,CAACE,OAAO,GAC1CM,cAAc,GACdR,KAAK,CAACE,OAAO;AAC3B,CAAC;AACD,eAAeb,YAAY"},"metadata":{},"sourceType":"module"}