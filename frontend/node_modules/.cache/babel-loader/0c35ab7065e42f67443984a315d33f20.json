{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback } from 'react';\nimport merge from 'lodash/merge';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Get a callback to fetch the data provider through Redux, usually for mutations.\n *\n * The request starts when the callback is called.\n *\n * useMutation() parameters can be passed:\n *\n * - at definition time\n *\n *       const [mutate] = useMutation(query, options); mutate();\n *\n * - at call time\n *\n *       const [mutate] = useMutation(); mutate(query, options);\n *\n * - both, in which case the definition and call time parameters are merged\n *\n *       const [mutate] = useMutation(query1, options1); mutate(query2, options2);\n *\n * @param {Object} query\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. () => refresh()\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. (error) => notify(error.message)\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @returns A tuple with the mutation callback and the request state. Destructure as [mutate, { data, total, error, loading, loaded }].\n *\n * The return value updates according to the request state:\n *\n * - mount:         [mutate, { loading: false, loaded: false }]\n * - mutate called: [mutate, { loading: true, loaded: false }]\n * - success:       [mutate, { data: [data from response], total: [total from response], loading: false, loaded: true }]\n * - error:         [mutate, { error: [error from response], loading: false, loaded: false }]\n *\n * The mutate function accepts the following arguments\n * - {Object} query\n * - {string} query.type The method called on the data provider, e.g. 'update'\n * - {string} query.resource A resource name, e.g. 'posts', 'comments'\n * - {Object} query.payload The payload object, e.g. { id: 123, data: { isApproved: true } }\n * - {Object} options\n * - {string} options.action Redux action type\n * - {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * - {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * - {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() }\n * - {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n * - {boolean} withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @example\n *\n * // pass parameters at definition time\n * // use when all parameters are determined at definition time\n * // the mutation callback can be used as an even handler\n * // because Event parameters are ignored\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [approve, { loading }] = useMutation({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: { id: record.id, data: { isApproved: true } }\n *     });\n *     return <Button label=\"Approve\" onClick={approve} disabled={loading} />;\n * };\n *\n * @example\n *\n * // pass parameters at call time\n * // use when some parameters are only known at call time\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const approve = event => mutate({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: {\n *             id: event.target.dataset.id,\n *             data: { isApproved: true, updatedAt: new Date() }\n *         },\n *     });\n *     return <Button\n *         label=\"Approve\"\n *         onClick={approve}\n *         disabled={loading}\n *     />;\n * };\n *\n * @example\n *\n * // use the second argument to pass options\n * import { useMutation, useNotify, CRUD_UPDATE } from 'react-admin';\n *\n * const ResetStockButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const notify = useNotify();\n *     const handleClick = () => mutate(\n *         {\n *              type: 'update',\n *              resource: 'items',\n *              payload: { id: record.id, data: { stock: 0 } }\n *         },\n *         {\n *              undoable: true,\n *              action: CRUD_UPDATE,\n *              onSuccess: response => notify('Success !'),\n *              onFailure: error => notify('Failure !')\n *         }\n *     );\n *     return <Button label=\"Reset stock\" onClick={handleClick} disabled={loading} />;\n * };\n */\nvar useMutation = function (query, options) {\n  var _a = useSafeSetState({\n      data: null,\n      error: null,\n      total: null,\n      loading: false,\n      loaded: false\n    }),\n    state = _a[0],\n    setState = _a[1];\n  var dataProvider = useDataProvider();\n  var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n  /* eslint-disable react-hooks/exhaustive-deps */\n  var mutate = useCallback(function (callTimeQuery, callTimeOptions) {\n    var finalDataProvider = hasDeclarativeSideEffectsSupport(options, callTimeOptions) ? dataProviderWithDeclarativeSideEffects : dataProvider;\n    var params = mergeDefinitionAndCallTimeParameters(query, callTimeQuery, options, callTimeOptions);\n    setState(function (prevState) {\n      return __assign(__assign({}, prevState), {\n        loading: true\n      });\n    });\n    var returnPromise = params.options.returnPromise;\n    var promise = finalDataProvider[params.type].apply(finalDataProvider, typeof params.resource !== 'undefined' ? [params.resource, params.payload, params.options] : [params.payload, params.options]).then(function (response) {\n      var data = response.data,\n        total = response.total;\n      setState({\n        data: data,\n        error: null,\n        loaded: true,\n        loading: false,\n        total: total\n      });\n      if (returnPromise) {\n        return response;\n      }\n    }).catch(function (errorFromResponse) {\n      setState({\n        data: null,\n        error: errorFromResponse,\n        loaded: false,\n        loading: false,\n        total: null\n      });\n      if (returnPromise) {\n        throw errorFromResponse;\n      }\n    });\n    if (returnPromise) {\n      return promise;\n    }\n  }, [\n  // deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n  JSON.stringify({\n    query: query,\n    options: options\n  }), dataProvider, dataProviderWithDeclarativeSideEffects, setState]\n  /* eslint-enable react-hooks/exhaustive-deps */);\n\n  return [mutate, state];\n};\n/**\n * Utility function for merging parameters\n *\n * useMutation() parameters can be passed:\n * - at definition time (e.g. useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }) )\n * - at call time (e.g. [mutate] = useMutation(); mutate({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }))\n * - both\n *\n * This function merges the definition time and call time parameters.\n *\n * This is useful because useMutation() is used by higher-level hooks like\n * useCreate() or useUpdate(), and these hooks can be called both ways.\n * So it makes sense to make useMutation() capable of handling both call types\n * as it avoids repetition higher in the hook chain.\n *\n * Also, the call time query may be a DOM Event if the callback is used\n * as an event listener, as in:\n *\n * const UpdateButton = () => {\n *     const mutate = useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } });\n *     return <button onclick={mutate}>Click me</button>\n * };\n *\n * This usage is accepted, and therefore this function checks if the call time\n * query is an Event, and discards it in that case.\n *\n * @param query {Mutation}\n * @param callTimeQuery {Mutation}\n * @param options {Object}\n * @param callTimeOptions {Object}\n *\n * @return { type, resource, payload, options } The merged parameters\n */\nvar mergeDefinitionAndCallTimeParameters = function (query, callTimeQuery, options, callTimeOptions) {\n  if (!query && (!callTimeQuery || callTimeQuery instanceof Event)) {\n    throw new Error('Missing query either at definition or at call time');\n  }\n  var event = callTimeQuery;\n  if (callTimeQuery instanceof Event || !!(event === null || event === void 0 ? void 0 : event.preventDefault)) return {\n    type: query.type,\n    resource: query.resource,\n    payload: query.payload,\n    options: sanitizeOptions(options)\n  };\n  if (query) {\n    return {\n      type: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.type) || query.type,\n      resource: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.resource) || query.resource,\n      payload: callTimeQuery ? merge({}, query.payload, callTimeQuery.payload) : query.payload,\n      options: callTimeOptions ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions)) : sanitizeOptions(options)\n    };\n  }\n  return {\n    type: callTimeQuery.type,\n    resource: callTimeQuery.resource,\n    payload: callTimeQuery.payload,\n    options: options ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions)) : sanitizeOptions(callTimeOptions)\n  };\n};\nvar hasDeclarativeSideEffectsSupport = function (options, callTimeOptions) {\n  if (!options && !callTimeOptions) return false;\n  if (callTimeOptions && callTimeOptions.withDeclarativeSideEffectsSupport) return true;\n  return options && options.withDeclarativeSideEffectsSupport;\n};\nvar sanitizeOptions = function (args) {\n  if (!args) return {\n    onSuccess: undefined\n  };\n  var withDeclarativeSideEffectsSupport = args.withDeclarativeSideEffectsSupport,\n    options = __rest(args, [\"withDeclarativeSideEffectsSupport\"]);\n  return __assign({\n    onSuccess: undefined\n  }, options);\n};\nexport default useMutation;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","useCallback","merge","useSafeSetState","useDataProvider","useDataProviderWithDeclarativeSideEffects","useMutation","query","options","_a","data","error","total","loading","loaded","state","setState","dataProvider","dataProviderWithDeclarativeSideEffects","mutate","callTimeQuery","callTimeOptions","finalDataProvider","hasDeclarativeSideEffectsSupport","params","mergeDefinitionAndCallTimeParameters","prevState","returnPromise","promise","type","resource","payload","then","response","catch","errorFromResponse","JSON","stringify","Event","Error","event","preventDefault","sanitizeOptions","withDeclarativeSideEffectsSupport","args","onSuccess","undefined"],"sources":["/node_modules/ra-core/esm/dataProvider/useMutation.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useCallback } from 'react';\nimport merge from 'lodash/merge';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Get a callback to fetch the data provider through Redux, usually for mutations.\n *\n * The request starts when the callback is called.\n *\n * useMutation() parameters can be passed:\n *\n * - at definition time\n *\n *       const [mutate] = useMutation(query, options); mutate();\n *\n * - at call time\n *\n *       const [mutate] = useMutation(); mutate(query, options);\n *\n * - both, in which case the definition and call time parameters are merged\n *\n *       const [mutate] = useMutation(query1, options1); mutate(query2, options2);\n *\n * @param {Object} query\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. () => refresh()\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. (error) => notify(error.message)\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @returns A tuple with the mutation callback and the request state. Destructure as [mutate, { data, total, error, loading, loaded }].\n *\n * The return value updates according to the request state:\n *\n * - mount:         [mutate, { loading: false, loaded: false }]\n * - mutate called: [mutate, { loading: true, loaded: false }]\n * - success:       [mutate, { data: [data from response], total: [total from response], loading: false, loaded: true }]\n * - error:         [mutate, { error: [error from response], loading: false, loaded: false }]\n *\n * The mutate function accepts the following arguments\n * - {Object} query\n * - {string} query.type The method called on the data provider, e.g. 'update'\n * - {string} query.resource A resource name, e.g. 'posts', 'comments'\n * - {Object} query.payload The payload object, e.g. { id: 123, data: { isApproved: true } }\n * - {Object} options\n * - {string} options.action Redux action type\n * - {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * - {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * - {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() }\n * - {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n * - {boolean} withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @example\n *\n * // pass parameters at definition time\n * // use when all parameters are determined at definition time\n * // the mutation callback can be used as an even handler\n * // because Event parameters are ignored\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [approve, { loading }] = useMutation({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: { id: record.id, data: { isApproved: true } }\n *     });\n *     return <Button label=\"Approve\" onClick={approve} disabled={loading} />;\n * };\n *\n * @example\n *\n * // pass parameters at call time\n * // use when some parameters are only known at call time\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const approve = event => mutate({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: {\n *             id: event.target.dataset.id,\n *             data: { isApproved: true, updatedAt: new Date() }\n *         },\n *     });\n *     return <Button\n *         label=\"Approve\"\n *         onClick={approve}\n *         disabled={loading}\n *     />;\n * };\n *\n * @example\n *\n * // use the second argument to pass options\n * import { useMutation, useNotify, CRUD_UPDATE } from 'react-admin';\n *\n * const ResetStockButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const notify = useNotify();\n *     const handleClick = () => mutate(\n *         {\n *              type: 'update',\n *              resource: 'items',\n *              payload: { id: record.id, data: { stock: 0 } }\n *         },\n *         {\n *              undoable: true,\n *              action: CRUD_UPDATE,\n *              onSuccess: response => notify('Success !'),\n *              onFailure: error => notify('Failure !')\n *         }\n *     );\n *     return <Button label=\"Reset stock\" onClick={handleClick} disabled={loading} />;\n * };\n */\nvar useMutation = function (query, options) {\n    var _a = useSafeSetState({\n        data: null,\n        error: null,\n        total: null,\n        loading: false,\n        loaded: false,\n    }), state = _a[0], setState = _a[1];\n    var dataProvider = useDataProvider();\n    var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n    /* eslint-disable react-hooks/exhaustive-deps */\n    var mutate = useCallback(function (callTimeQuery, callTimeOptions) {\n        var finalDataProvider = hasDeclarativeSideEffectsSupport(options, callTimeOptions)\n            ? dataProviderWithDeclarativeSideEffects\n            : dataProvider;\n        var params = mergeDefinitionAndCallTimeParameters(query, callTimeQuery, options, callTimeOptions);\n        setState(function (prevState) { return (__assign(__assign({}, prevState), { loading: true })); });\n        var returnPromise = params.options.returnPromise;\n        var promise = finalDataProvider[params.type]\n            .apply(finalDataProvider, typeof params.resource !== 'undefined'\n            ? [params.resource, params.payload, params.options]\n            : [params.payload, params.options])\n            .then(function (response) {\n            var data = response.data, total = response.total;\n            setState({\n                data: data,\n                error: null,\n                loaded: true,\n                loading: false,\n                total: total,\n            });\n            if (returnPromise) {\n                return response;\n            }\n        })\n            .catch(function (errorFromResponse) {\n            setState({\n                data: null,\n                error: errorFromResponse,\n                loaded: false,\n                loading: false,\n                total: null,\n            });\n            if (returnPromise) {\n                throw errorFromResponse;\n            }\n        });\n        if (returnPromise) {\n            return promise;\n        }\n    }, [\n        // deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n        JSON.stringify({ query: query, options: options }),\n        dataProvider,\n        dataProviderWithDeclarativeSideEffects,\n        setState,\n    ]\n    /* eslint-enable react-hooks/exhaustive-deps */\n    );\n    return [mutate, state];\n};\n/**\n * Utility function for merging parameters\n *\n * useMutation() parameters can be passed:\n * - at definition time (e.g. useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }) )\n * - at call time (e.g. [mutate] = useMutation(); mutate({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }))\n * - both\n *\n * This function merges the definition time and call time parameters.\n *\n * This is useful because useMutation() is used by higher-level hooks like\n * useCreate() or useUpdate(), and these hooks can be called both ways.\n * So it makes sense to make useMutation() capable of handling both call types\n * as it avoids repetition higher in the hook chain.\n *\n * Also, the call time query may be a DOM Event if the callback is used\n * as an event listener, as in:\n *\n * const UpdateButton = () => {\n *     const mutate = useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } });\n *     return <button onclick={mutate}>Click me</button>\n * };\n *\n * This usage is accepted, and therefore this function checks if the call time\n * query is an Event, and discards it in that case.\n *\n * @param query {Mutation}\n * @param callTimeQuery {Mutation}\n * @param options {Object}\n * @param callTimeOptions {Object}\n *\n * @return { type, resource, payload, options } The merged parameters\n */\nvar mergeDefinitionAndCallTimeParameters = function (query, callTimeQuery, options, callTimeOptions) {\n    if (!query && (!callTimeQuery || callTimeQuery instanceof Event)) {\n        throw new Error('Missing query either at definition or at call time');\n    }\n    var event = callTimeQuery;\n    if (callTimeQuery instanceof Event || !!(event === null || event === void 0 ? void 0 : event.preventDefault))\n        return {\n            type: query.type,\n            resource: query.resource,\n            payload: query.payload,\n            options: sanitizeOptions(options),\n        };\n    if (query) {\n        return {\n            type: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.type) || query.type,\n            resource: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.resource) || query.resource,\n            payload: callTimeQuery\n                ? merge({}, query.payload, callTimeQuery.payload)\n                : query.payload,\n            options: callTimeOptions\n                ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions))\n                : sanitizeOptions(options),\n        };\n    }\n    return {\n        type: callTimeQuery.type,\n        resource: callTimeQuery.resource,\n        payload: callTimeQuery.payload,\n        options: options\n            ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions))\n            : sanitizeOptions(callTimeOptions),\n    };\n};\nvar hasDeclarativeSideEffectsSupport = function (options, callTimeOptions) {\n    if (!options && !callTimeOptions)\n        return false;\n    if (callTimeOptions && callTimeOptions.withDeclarativeSideEffectsSupport)\n        return true;\n    return options && options.withDeclarativeSideEffectsSupport;\n};\nvar sanitizeOptions = function (args) {\n    if (!args)\n        return { onSuccess: undefined };\n    var withDeclarativeSideEffectsSupport = args.withDeclarativeSideEffectsSupport, options = __rest(args, [\"withDeclarativeSideEffectsSupport\"]);\n    return __assign({ onSuccess: undefined }, options);\n};\nexport default useMutation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}