{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useState } from 'react';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { createHashHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport { DataProviderContext, convertLegacyDataProvider } from '../dataProvider';\nimport createAdminStore from './createAdminStore';\nimport TranslationProvider from '../i18n/TranslationProvider';\nvar CoreAdminContext = function (props) {\n  var authProvider = props.authProvider,\n    dataProvider = props.dataProvider,\n    i18nProvider = props.i18nProvider,\n    children = props.children,\n    history = props.history,\n    customReducers = props.customReducers,\n    customSagas = props.customSagas,\n    initialState = props.initialState;\n  var reduxIsAlreadyInitialized = !!useContext(ReactReduxContext);\n  if (!dataProvider) {\n    throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n  }\n  var finalAuthProvider = authProvider instanceof Function ? convertLegacyAuthProvider(authProvider) : authProvider;\n  var finalDataProvider = dataProvider instanceof Function ? convertLegacyDataProvider(dataProvider) : dataProvider;\n  var finalHistory = history || createHashHistory();\n  var renderCore = function () {\n    return React.createElement(AuthContext.Provider, {\n      value: finalAuthProvider\n    }, React.createElement(DataProviderContext.Provider, {\n      value: finalDataProvider\n    }, React.createElement(TranslationProvider, {\n      i18nProvider: i18nProvider\n    }, typeof window !== 'undefined' ? React.createElement(ConnectedRouter, {\n      history: finalHistory\n    }, children) : children)));\n  };\n  var store = useState(function () {\n    return !reduxIsAlreadyInitialized ? createAdminStore({\n      authProvider: finalAuthProvider,\n      customReducers: customReducers,\n      customSagas: customSagas,\n      dataProvider: finalDataProvider,\n      initialState: initialState,\n      history: finalHistory\n    }) : undefined;\n  })[0];\n  if (reduxIsAlreadyInitialized) {\n    if (!history) {\n      throw new Error(\"Missing history prop.\\nWhen integrating react-admin inside an existing redux Provider, you must provide the same 'history' prop to the <Admin> as the one used to bootstrap your routerMiddleware.\\nReact-admin uses this history for its own ConnectedRouter.\");\n    }\n    return renderCore();\n  } else {\n    return React.createElement(Provider, {\n      store: store\n    }, renderCore());\n  }\n};\nexport default CoreAdminContext;","map":{"version":3,"names":["React","useContext","useState","Provider","ReactReduxContext","createHashHistory","ConnectedRouter","AuthContext","convertLegacyAuthProvider","DataProviderContext","convertLegacyDataProvider","createAdminStore","TranslationProvider","CoreAdminContext","props","authProvider","dataProvider","i18nProvider","children","history","customReducers","customSagas","initialState","reduxIsAlreadyInitialized","Error","finalAuthProvider","Function","finalDataProvider","finalHistory","renderCore","createElement","value","window","store","undefined"],"sources":["/node_modules/ra-core/esm/core/CoreAdminContext.js"],"sourcesContent":["import * as React from 'react';\nimport { useContext, useState } from 'react';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { createHashHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport { DataProviderContext, convertLegacyDataProvider, } from '../dataProvider';\nimport createAdminStore from './createAdminStore';\nimport TranslationProvider from '../i18n/TranslationProvider';\nvar CoreAdminContext = function (props) {\n    var authProvider = props.authProvider, dataProvider = props.dataProvider, i18nProvider = props.i18nProvider, children = props.children, history = props.history, customReducers = props.customReducers, customSagas = props.customSagas, initialState = props.initialState;\n    var reduxIsAlreadyInitialized = !!useContext(ReactReduxContext);\n    if (!dataProvider) {\n        throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n    }\n    var finalAuthProvider = authProvider instanceof Function\n        ? convertLegacyAuthProvider(authProvider)\n        : authProvider;\n    var finalDataProvider = dataProvider instanceof Function\n        ? convertLegacyDataProvider(dataProvider)\n        : dataProvider;\n    var finalHistory = history || createHashHistory();\n    var renderCore = function () {\n        return (React.createElement(AuthContext.Provider, { value: finalAuthProvider },\n            React.createElement(DataProviderContext.Provider, { value: finalDataProvider },\n                React.createElement(TranslationProvider, { i18nProvider: i18nProvider }, typeof window !== 'undefined' ? (React.createElement(ConnectedRouter, { history: finalHistory }, children)) : (children)))));\n    };\n    var store = useState(function () {\n        return !reduxIsAlreadyInitialized\n            ? createAdminStore({\n                authProvider: finalAuthProvider,\n                customReducers: customReducers,\n                customSagas: customSagas,\n                dataProvider: finalDataProvider,\n                initialState: initialState,\n                history: finalHistory,\n            })\n            : undefined;\n    })[0];\n    if (reduxIsAlreadyInitialized) {\n        if (!history) {\n            throw new Error(\"Missing history prop.\\nWhen integrating react-admin inside an existing redux Provider, you must provide the same 'history' prop to the <Admin> as the one used to bootstrap your routerMiddleware.\\nReact-admin uses this history for its own ConnectedRouter.\");\n        }\n        return renderCore();\n    }\n    else {\n        return React.createElement(Provider, { store: store }, renderCore());\n    }\n};\nexport default CoreAdminContext;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,SAASC,QAAQ,EAAEC,iBAAiB,QAAQ,aAAa;AACzD,SAASC,iBAAiB,QAAQ,SAAS;AAC3C,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,WAAW,EAAEC,yBAAyB,QAAQ,SAAS;AAChE,SAASC,mBAAmB,EAAEC,yBAAyB,QAAS,iBAAiB;AACjF,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,mBAAmB,MAAM,6BAA6B;AAC7D,IAAIC,gBAAgB,GAAG,SAAAA,CAAUC,KAAK,EAAE;EACpC,IAAIC,YAAY,GAAGD,KAAK,CAACC,YAAY;IAAEC,YAAY,GAAGF,KAAK,CAACE,YAAY;IAAEC,YAAY,GAAGH,KAAK,CAACG,YAAY;IAAEC,QAAQ,GAAGJ,KAAK,CAACI,QAAQ;IAAEC,OAAO,GAAGL,KAAK,CAACK,OAAO;IAAEC,cAAc,GAAGN,KAAK,CAACM,cAAc;IAAEC,WAAW,GAAGP,KAAK,CAACO,WAAW;IAAEC,YAAY,GAAGR,KAAK,CAACQ,YAAY;EAC1Q,IAAIC,yBAAyB,GAAG,CAAC,CAACtB,UAAU,CAACG,iBAAiB,CAAC;EAC/D,IAAI,CAACY,YAAY,EAAE;IACf,MAAM,IAAIQ,KAAK,CAAC,yFAAyF,CAAC;EAC9G;EACA,IAAIC,iBAAiB,GAAGV,YAAY,YAAYW,QAAQ,GAClDlB,yBAAyB,CAACO,YAAY,CAAC,GACvCA,YAAY;EAClB,IAAIY,iBAAiB,GAAGX,YAAY,YAAYU,QAAQ,GAClDhB,yBAAyB,CAACM,YAAY,CAAC,GACvCA,YAAY;EAClB,IAAIY,YAAY,GAAGT,OAAO,IAAId,iBAAiB,EAAE;EACjD,IAAIwB,UAAU,GAAG,SAAAA,CAAA,EAAY;IACzB,OAAQ7B,KAAK,CAAC8B,aAAa,CAACvB,WAAW,CAACJ,QAAQ,EAAE;MAAE4B,KAAK,EAAEN;IAAkB,CAAC,EAC1EzB,KAAK,CAAC8B,aAAa,CAACrB,mBAAmB,CAACN,QAAQ,EAAE;MAAE4B,KAAK,EAAEJ;IAAkB,CAAC,EAC1E3B,KAAK,CAAC8B,aAAa,CAAClB,mBAAmB,EAAE;MAAEK,YAAY,EAAEA;IAAa,CAAC,EAAE,OAAOe,MAAM,KAAK,WAAW,GAAIhC,KAAK,CAAC8B,aAAa,CAACxB,eAAe,EAAE;MAAEa,OAAO,EAAES;IAAa,CAAC,EAAEV,QAAQ,CAAC,GAAKA,QAAS,CAAC,CAAC,CAAC;EAChN,CAAC;EACD,IAAIe,KAAK,GAAG/B,QAAQ,CAAC,YAAY;IAC7B,OAAO,CAACqB,yBAAyB,GAC3BZ,gBAAgB,CAAC;MACfI,YAAY,EAAEU,iBAAiB;MAC/BL,cAAc,EAAEA,cAAc;MAC9BC,WAAW,EAAEA,WAAW;MACxBL,YAAY,EAAEW,iBAAiB;MAC/BL,YAAY,EAAEA,YAAY;MAC1BH,OAAO,EAAES;IACb,CAAC,CAAC,GACAM,SAAS;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC;EACL,IAAIX,yBAAyB,EAAE;IAC3B,IAAI,CAACJ,OAAO,EAAE;MACV,MAAM,IAAIK,KAAK,CAAC,gQAAgQ,CAAC;IACrR;IACA,OAAOK,UAAU,EAAE;EACvB,CAAC,MACI;IACD,OAAO7B,KAAK,CAAC8B,aAAa,CAAC3B,QAAQ,EAAE;MAAE8B,KAAK,EAAEA;IAAM,CAAC,EAAEJ,UAAU,EAAE,CAAC;EACxE;AACJ,CAAC;AACD,eAAehB,gBAAgB"},"metadata":{},"sourceType":"module"}