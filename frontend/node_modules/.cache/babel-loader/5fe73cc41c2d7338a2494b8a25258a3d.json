{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, createElement, isValidElement, useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useVersion } from 'ra-core';\nimport { Table } from '@material-ui/core';\nimport classnames from 'classnames';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport useDatagridStyles from './useDatagridStyles';\nimport DatagridContextProvider from './DatagridContextProvider';\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n *\n * @example Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const currentSort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { ids, data, total, loaded } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         currentSort\n *     );\n *\n *     return (\n *         <Datagrid\n *             basePath=\"\"\n *             currentSort={currentSort}\n *             data={data}\n *             ids={ids}\n *             selectedIds={[]}\n *             loaded={loaded}\n *             total={total}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nvar Datagrid = React.forwardRef(function (props, ref) {\n  var classes = useDatagridStyles(props);\n  var _a = props.optimized,\n    optimized = _a === void 0 ? false : _a,\n    _b = props.body,\n    body = _b === void 0 ? optimized ? PureDatagridBody : DatagridBody : _b,\n    _c = props.header,\n    header = _c === void 0 ? DatagridHeader : _c,\n    children = props.children,\n    classesOverride = props.classes,\n    className = props.className,\n    empty = props.empty,\n    expand = props.expand,\n    // @ts-ignore\n    fullWidth = props.fullWidth,\n    _d = props.hasBulkActions,\n    hasBulkActions = _d === void 0 ? false : _d,\n    hover = props.hover,\n    isRowSelectable = props.isRowSelectable,\n    isRowExpandable = props.isRowExpandable,\n    resource = props.resource,\n    rowClick = props.rowClick,\n    rowStyle = props.rowStyle,\n    _e = props.size,\n    size = _e === void 0 ? 'small' : _e,\n    rest = __rest(props, [\"optimized\", \"body\", \"header\", \"children\", \"classes\", \"className\", \"empty\", \"expand\", \"fullWidth\", \"hasBulkActions\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowStyle\", \"size\"]);\n  var _f = useListContext(props),\n    basePath = _f.basePath,\n    currentSort = _f.currentSort,\n    data = _f.data,\n    ids = _f.ids,\n    loaded = _f.loaded,\n    onSelect = _f.onSelect,\n    onToggleItem = _f.onToggleItem,\n    selectedIds = _f.selectedIds,\n    setSort = _f.setSort,\n    total = _f.total;\n  var version = useVersion();\n  var contextValue = useMemo(function () {\n    return {\n      isRowExpandable: isRowExpandable\n    };\n  }, [isRowExpandable]);\n  var lastSelected = useRef(null);\n  useEffect(function () {\n    if (!selectedIds || selectedIds.length === 0) {\n      lastSelected.current = null;\n    }\n  }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n  var handleToggleItem = useCallback(function (id, event) {\n    var lastSelectedIndex = ids.indexOf(lastSelected.current);\n    lastSelected.current = event.target.checked ? id : null;\n    if (event.shiftKey && lastSelectedIndex !== -1) {\n      var index = ids.indexOf(id);\n      var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n      var newSelectedIds = event.target.checked ? union(selectedIds, idsBetweenSelections) : difference(selectedIds, idsBetweenSelections);\n      onSelect(isRowSelectable ? newSelectedIds.filter(function (id) {\n        return isRowSelectable(data[id]);\n      }) : newSelectedIds);\n    } else {\n      onToggleItem(id);\n    }\n  }, [data, ids, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n  /**\n   * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n   * if loaded is true, the data for the list has at least been returned once by the dataProvider\n   * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n   */\n  if (loaded === false) {\n    return React.createElement(DatagridLoading, {\n      classes: classes,\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the datagrid displays nothing or a custom empty component.\n   */\n  if (loaded && (ids.length === 0 || total === 0)) {\n    if (empty) {\n      return empty;\n    }\n    return null;\n  }\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n  return React.createElement(DatagridContextProvider, {\n    value: contextValue\n  }, React.createElement(Table, __assign({\n    ref: ref,\n    className: classnames(classes.table, className),\n    size: size\n  }, sanitizeListRestProps(rest)), createOrCloneElement(header, {\n    children: children,\n    classes: classes,\n    className: className,\n    currentSort: currentSort,\n    data: data,\n    hasExpand: !!expand,\n    hasBulkActions: hasBulkActions,\n    ids: ids,\n    isRowSelectable: isRowSelectable,\n    onSelect: onSelect,\n    resource: resource,\n    selectedIds: selectedIds,\n    setSort: setSort\n  }, children), createOrCloneElement(body, {\n    basePath: basePath,\n    className: classes.tbody,\n    classes: classes,\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    ids: ids,\n    onToggleItem: handleToggleItem,\n    resource: resource,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    isRowSelectable: isRowSelectable,\n    version: version\n  }, children)));\n});\nvar createOrCloneElement = function (element, props, children) {\n  return isValidElement(element) ? cloneElement(element, props, children) : createElement(element, props, children);\n};\nDatagrid.propTypes = {\n  basePath: PropTypes.string,\n  // @ts-ignore\n  body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  currentSort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  empty: PropTypes.element,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool,\n  // @ts-ignore\n  header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hover: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any),\n  loading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  version: PropTypes.number,\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func\n};\nDatagrid.displayName = 'Datagrid';\nexport default Datagrid;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","cloneElement","createElement","isValidElement","useCallback","useRef","useEffect","useMemo","PropTypes","sanitizeListRestProps","useListContext","useVersion","Table","classnames","union","difference","DatagridHeader","DatagridLoading","DatagridBody","PureDatagridBody","useDatagridStyles","DatagridContextProvider","Datagrid","forwardRef","props","ref","classes","_a","optimized","_b","body","_c","header","children","classesOverride","className","empty","expand","fullWidth","_d","hasBulkActions","hover","isRowSelectable","isRowExpandable","resource","rowClick","rowStyle","_e","size","rest","_f","basePath","currentSort","data","ids","loaded","onSelect","onToggleItem","selectedIds","setSort","total","version","contextValue","lastSelected","current","JSON","stringify","handleToggleItem","id","event","lastSelectedIndex","target","checked","shiftKey","index","idsBetweenSelections","slice","Math","min","max","newSelectedIds","filter","nbChildren","Children","count","value","table","createOrCloneElement","hasExpand","tbody","element","propTypes","string","oneOfType","elementType","node","isRequired","object","exact","field","order","any","bool","arrayOf","loading","func","number","displayName"],"sources":["/node_modules/ra-ui-materialui/esm/list/datagrid/Datagrid.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { cloneElement, createElement, isValidElement, useCallback, useRef, useEffect, useMemo, } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useVersion, } from 'ra-core';\nimport { Table } from '@material-ui/core';\nimport classnames from 'classnames';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport useDatagridStyles from './useDatagridStyles';\nimport DatagridContextProvider from './DatagridContextProvider';\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n *\n * @example Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const currentSort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { ids, data, total, loaded } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         currentSort\n *     );\n *\n *     return (\n *         <Datagrid\n *             basePath=\"\"\n *             currentSort={currentSort}\n *             data={data}\n *             ids={ids}\n *             selectedIds={[]}\n *             loaded={loaded}\n *             total={total}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nvar Datagrid = React.forwardRef(function (props, ref) {\n    var classes = useDatagridStyles(props);\n    var _a = props.optimized, optimized = _a === void 0 ? false : _a, _b = props.body, body = _b === void 0 ? optimized ? PureDatagridBody : DatagridBody : _b, _c = props.header, header = _c === void 0 ? DatagridHeader : _c, children = props.children, classesOverride = props.classes, className = props.className, empty = props.empty, expand = props.expand, \n    // @ts-ignore\n    fullWidth = props.fullWidth, _d = props.hasBulkActions, hasBulkActions = _d === void 0 ? false : _d, hover = props.hover, isRowSelectable = props.isRowSelectable, isRowExpandable = props.isRowExpandable, resource = props.resource, rowClick = props.rowClick, rowStyle = props.rowStyle, _e = props.size, size = _e === void 0 ? 'small' : _e, rest = __rest(props, [\"optimized\", \"body\", \"header\", \"children\", \"classes\", \"className\", \"empty\", \"expand\", \"fullWidth\", \"hasBulkActions\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowStyle\", \"size\"]);\n    var _f = useListContext(props), basePath = _f.basePath, currentSort = _f.currentSort, data = _f.data, ids = _f.ids, loaded = _f.loaded, onSelect = _f.onSelect, onToggleItem = _f.onToggleItem, selectedIds = _f.selectedIds, setSort = _f.setSort, total = _f.total;\n    var version = useVersion();\n    var contextValue = useMemo(function () { return ({ isRowExpandable: isRowExpandable }); }, [\n        isRowExpandable,\n    ]);\n    var lastSelected = useRef(null);\n    useEffect(function () {\n        if (!selectedIds || selectedIds.length === 0) {\n            lastSelected.current = null;\n        }\n    }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n    var handleToggleItem = useCallback(function (id, event) {\n        var lastSelectedIndex = ids.indexOf(lastSelected.current);\n        lastSelected.current = event.target.checked ? id : null;\n        if (event.shiftKey && lastSelectedIndex !== -1) {\n            var index = ids.indexOf(id);\n            var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n            var newSelectedIds = event.target.checked\n                ? union(selectedIds, idsBetweenSelections)\n                : difference(selectedIds, idsBetweenSelections);\n            onSelect(isRowSelectable\n                ? newSelectedIds.filter(function (id) {\n                    return isRowSelectable(data[id]);\n                })\n                : newSelectedIds);\n        }\n        else {\n            onToggleItem(id);\n        }\n    }, [data, ids, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n    /**\n     * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n     * if loaded is true, the data for the list has at least been returned once by the dataProvider\n     * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n     */\n    if (loaded === false) {\n        return (React.createElement(DatagridLoading, { classes: classes, className: className, expand: expand, hasBulkActions: hasBulkActions, nbChildren: React.Children.count(children), size: size }));\n    }\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the datagrid displays nothing or a custom empty component.\n     */\n    if (loaded && (ids.length === 0 || total === 0)) {\n        if (empty) {\n            return empty;\n        }\n        return null;\n    }\n    /**\n     * After the initial load, if the data for the list isn't empty,\n     * and even if the data is refreshing (e.g. after a filter change),\n     * the datagrid displays the current data.\n     */\n    return (React.createElement(DatagridContextProvider, { value: contextValue },\n        React.createElement(Table, __assign({ ref: ref, className: classnames(classes.table, className), size: size }, sanitizeListRestProps(rest)),\n            createOrCloneElement(header, {\n                children: children,\n                classes: classes,\n                className: className,\n                currentSort: currentSort,\n                data: data,\n                hasExpand: !!expand,\n                hasBulkActions: hasBulkActions,\n                ids: ids,\n                isRowSelectable: isRowSelectable,\n                onSelect: onSelect,\n                resource: resource,\n                selectedIds: selectedIds,\n                setSort: setSort,\n            }, children),\n            createOrCloneElement(body, {\n                basePath: basePath,\n                className: classes.tbody,\n                classes: classes,\n                expand: expand,\n                rowClick: rowClick,\n                data: data,\n                hasBulkActions: hasBulkActions,\n                hover: hover,\n                ids: ids,\n                onToggleItem: handleToggleItem,\n                resource: resource,\n                rowStyle: rowStyle,\n                selectedIds: selectedIds,\n                isRowSelectable: isRowSelectable,\n                version: version,\n            }, children))));\n});\nvar createOrCloneElement = function (element, props, children) {\n    return isValidElement(element)\n        ? cloneElement(element, props, children)\n        : createElement(element, props, children);\n};\nDatagrid.propTypes = {\n    basePath: PropTypes.string,\n    // @ts-ignore\n    body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    children: PropTypes.node.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    currentSort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    empty: PropTypes.element,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool,\n    // @ts-ignore\n    header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hover: PropTypes.bool,\n    ids: PropTypes.arrayOf(PropTypes.any),\n    loading: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n    total: PropTypes.number,\n    version: PropTypes.number,\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n};\nDatagrid.displayName = 'Datagrid';\nexport default Datagrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}