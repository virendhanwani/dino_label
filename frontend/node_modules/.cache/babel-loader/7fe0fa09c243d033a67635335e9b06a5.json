{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useFormState } from 'react-final-form';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nvar useWarnWhenUnsavedChanges = function (enable, formRootPathname) {\n  var history = useHistory();\n  var translate = useTranslate();\n  var _a = useFormState(UseFormStateSubscription),\n    pristine = _a.pristine,\n    submitSucceeded = _a.submitSucceeded,\n    submitting = _a.submitting;\n  var initialLocation = useRef(formRootPathname || history.location.pathname);\n  useEffect(function () {\n    if (!enable) {\n      return;\n    }\n    var release = history.block(function (location) {\n      var isInsideForm = location.pathname.startsWith(initialLocation.current);\n      if (!pristine && !isInsideForm && !submitSucceeded && !submitting) {\n        return translate('ra.message.unsaved_changes');\n      }\n      return undefined;\n    });\n    return function () {\n      if (release) {\n        release();\n      }\n    };\n  }, [pristine, enable, history, translate, submitSucceeded, submitting]);\n};\nvar UseFormStateSubscription = {\n  // For some reason, subscribing only to pristine does not rerender when a field become dirty\n  // because it has a defaultValue (not initialValue as setting an initialValue does not make the field dirty)\n  subscription: {\n    pristine: true,\n    dirtyFields: true,\n    submitSucceeded: true,\n    submitting: true\n  }\n};\nexport default useWarnWhenUnsavedChanges;","map":{"version":3,"names":["useEffect","useRef","useFormState","useHistory","useTranslate","useWarnWhenUnsavedChanges","enable","formRootPathname","history","translate","_a","UseFormStateSubscription","pristine","submitSucceeded","submitting","initialLocation","location","pathname","release","block","isInsideForm","startsWith","current","undefined","subscription","dirtyFields"],"sources":["/node_modules/ra-core/esm/form/useWarnWhenUnsavedChanges.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useFormState } from 'react-final-form';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nvar useWarnWhenUnsavedChanges = function (enable, formRootPathname) {\n    var history = useHistory();\n    var translate = useTranslate();\n    var _a = useFormState(UseFormStateSubscription), pristine = _a.pristine, submitSucceeded = _a.submitSucceeded, submitting = _a.submitting;\n    var initialLocation = useRef(formRootPathname || history.location.pathname);\n    useEffect(function () {\n        if (!enable) {\n            return;\n        }\n        var release = history.block(function (location) {\n            var isInsideForm = location.pathname.startsWith(initialLocation.current);\n            if (!pristine && !isInsideForm && !submitSucceeded && !submitting) {\n                return translate('ra.message.unsaved_changes');\n            }\n            return undefined;\n        });\n        return function () {\n            if (release) {\n                release();\n            }\n        };\n    }, [pristine, enable, history, translate, submitSucceeded, submitting]);\n};\nvar UseFormStateSubscription = {\n    // For some reason, subscribing only to pristine does not rerender when a field become dirty\n    // because it has a defaultValue (not initialValue as setting an initialValue does not make the field dirty)\n    subscription: {\n        pristine: true,\n        dirtyFields: true,\n        submitSucceeded: true,\n        submitting: true,\n    },\n};\nexport default useWarnWhenUnsavedChanges;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,YAAY,QAAQ,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA,IAAIC,yBAAyB,GAAG,SAAAA,CAAUC,MAAM,EAAEC,gBAAgB,EAAE;EAChE,IAAIC,OAAO,GAAGL,UAAU,EAAE;EAC1B,IAAIM,SAAS,GAAGL,YAAY,EAAE;EAC9B,IAAIM,EAAE,GAAGR,YAAY,CAACS,wBAAwB,CAAC;IAAEC,QAAQ,GAAGF,EAAE,CAACE,QAAQ;IAAEC,eAAe,GAAGH,EAAE,CAACG,eAAe;IAAEC,UAAU,GAAGJ,EAAE,CAACI,UAAU;EACzI,IAAIC,eAAe,GAAGd,MAAM,CAACM,gBAAgB,IAAIC,OAAO,CAACQ,QAAQ,CAACC,QAAQ,CAAC;EAC3EjB,SAAS,CAAC,YAAY;IAClB,IAAI,CAACM,MAAM,EAAE;MACT;IACJ;IACA,IAAIY,OAAO,GAAGV,OAAO,CAACW,KAAK,CAAC,UAAUH,QAAQ,EAAE;MAC5C,IAAII,YAAY,GAAGJ,QAAQ,CAACC,QAAQ,CAACI,UAAU,CAACN,eAAe,CAACO,OAAO,CAAC;MACxE,IAAI,CAACV,QAAQ,IAAI,CAACQ,YAAY,IAAI,CAACP,eAAe,IAAI,CAACC,UAAU,EAAE;QAC/D,OAAOL,SAAS,CAAC,4BAA4B,CAAC;MAClD;MACA,OAAOc,SAAS;IACpB,CAAC,CAAC;IACF,OAAO,YAAY;MACf,IAAIL,OAAO,EAAE;QACTA,OAAO,EAAE;MACb;IACJ,CAAC;EACL,CAAC,EAAE,CAACN,QAAQ,EAAEN,MAAM,EAAEE,OAAO,EAAEC,SAAS,EAAEI,eAAe,EAAEC,UAAU,CAAC,CAAC;AAC3E,CAAC;AACD,IAAIH,wBAAwB,GAAG;EAC3B;EACA;EACAa,YAAY,EAAE;IACVZ,QAAQ,EAAE,IAAI;IACda,WAAW,EAAE,IAAI;IACjBZ,eAAe,EAAE,IAAI;IACrBC,UAAU,EAAE;EAChB;AACJ,CAAC;AACD,eAAeT,yBAAyB"},"metadata":{},"sourceType":"module"}