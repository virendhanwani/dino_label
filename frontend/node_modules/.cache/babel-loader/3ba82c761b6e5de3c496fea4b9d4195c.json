{"ast":null,"code":"import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultPagination = {\n  page: 1,\n  perPage: 25\n};\nvar defaultSort = {\n  field: 'id',\n  order: 'DESC'\n};\nvar defaultFilter = {};\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\nvar useGetList = function (resource, pagination, sort, filter, options) {\n  if (pagination === void 0) {\n    pagination = defaultPagination;\n  }\n  if (sort === void 0) {\n    sort = defaultSort;\n  }\n  if (filter === void 0) {\n    filter = defaultFilter;\n  }\n  var requestSignature = JSON.stringify({\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  });\n  var _a = useQueryWithStore({\n      type: 'getList',\n      resource: resource,\n      payload: {\n        pagination: pagination,\n        sort: sort,\n        filter: filter\n      }\n    }, options,\n    // ids and data selector\n    function (state) {\n      return {\n        ids: get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids'], null),\n        allRecords: get(state.admin.resources, [resource, 'data'], defaultData)\n      };\n    },\n    // total selector (may return undefined)\n    function (state) {\n      return get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'total']);\n    }, isDataLoaded),\n    _b = _a.data,\n    ids = _b.ids,\n    allRecords = _b.allRecords,\n    total = _a.total,\n    error = _a.error,\n    loading = _a.loading,\n    loaded = _a.loaded,\n    refetch = _a.refetch;\n  var data = useMemo(function () {\n    return ids === null ? defaultData : ids.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [ids, allRecords]);\n  return {\n    data: data,\n    ids: ids === null ? defaultIds : ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\nvar isDataLoaded = function (data) {\n  return data.ids !== null;\n};\nexport default useGetList;","map":{"version":3,"names":["useMemo","get","useQueryWithStore","defaultPagination","page","perPage","defaultSort","field","order","defaultFilter","defaultIds","defaultData","useGetList","resource","pagination","sort","filter","options","requestSignature","JSON","stringify","_a","type","payload","state","ids","admin","resources","allRecords","isDataLoaded","_b","data","total","error","loading","loaded","refetch","map","id","reduce","acc","record"],"sources":["/node_modules/ra-core/esm/dataProvider/useGetList.js"],"sourcesContent":["import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultPagination = { page: 1, perPage: 25 };\nvar defaultSort = { field: 'id', order: 'DESC' };\nvar defaultFilter = {};\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\nvar useGetList = function (resource, pagination, sort, filter, options) {\n    if (pagination === void 0) { pagination = defaultPagination; }\n    if (sort === void 0) { sort = defaultSort; }\n    if (filter === void 0) { filter = defaultFilter; }\n    var requestSignature = JSON.stringify({ pagination: pagination, sort: sort, filter: filter });\n    var _a = useQueryWithStore({ type: 'getList', resource: resource, payload: { pagination: pagination, sort: sort, filter: filter } }, options, \n    // ids and data selector\n    function (state) { return ({\n        ids: get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids'], null),\n        allRecords: get(state.admin.resources, [resource, 'data'], defaultData),\n    }); }, \n    // total selector (may return undefined)\n    function (state) {\n        return get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            requestSignature,\n            'total',\n        ]);\n    }, isDataLoaded), _b = _a.data, ids = _b.ids, allRecords = _b.allRecords, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded, refetch = _a.refetch;\n    var data = useMemo(function () {\n        return ids === null\n            ? defaultData\n            : ids\n                .map(function (id) { return allRecords[id]; })\n                .reduce(function (acc, record) {\n                if (!record)\n                    return acc;\n                acc[record.id] = record;\n                return acc;\n            }, {});\n    }, [ids, allRecords]);\n    return {\n        data: data,\n        ids: ids === null ? defaultIds : ids,\n        total: total,\n        error: error,\n        loading: loading,\n        loaded: loaded,\n        refetch: refetch,\n    };\n};\nvar isDataLoaded = function (data) { return data.ids !== null; };\nexport default useGetList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}