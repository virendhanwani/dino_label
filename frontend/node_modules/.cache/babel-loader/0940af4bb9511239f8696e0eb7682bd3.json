{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nvar getPermissionsWithoutProvider = function () {\n  return Promise.resolve([]);\n};\n/**\n * Get a callback for calling the authProvider.getPermissions() method.\n *\n * @see useAuthProvider\n *\n * @returns {Function} getPermissions callback\n *\n * This is a low level hook. See those more specialized hooks\n * offering state handling.\n *\n * @see usePermissions\n *\n * @example\n *\n * import { useGetPermissions } from 'react-admin';\n *\n * const Roles = () => {\n *     const [permissions, setPermissions] = useState([]);\n *     const getPermissions = useGetPermissions();\n *     useEffect(() => {\n *         getPermissions().then(permissions => setPermissions(permissions))\n *     }, [])\n *     return (\n *         <ul>\n *             {permissions.map((permission, key) => (\n *                 <li key={key}>{permission}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n */\nvar useGetPermissions = function () {\n  var authProvider = useAuthProvider();\n  var getPermissions = useCallback(function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n    return authProvider.getPermissions(params);\n  }, [authProvider]);\n  return authProvider ? getPermissions : getPermissionsWithoutProvider;\n};\nexport default useGetPermissions;","map":{"version":3,"names":["useCallback","useAuthProvider","getPermissionsWithoutProvider","Promise","resolve","useGetPermissions","authProvider","getPermissions","params"],"sources":["/node_modules/ra-core/esm/auth/useGetPermissions.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nvar getPermissionsWithoutProvider = function () { return Promise.resolve([]); };\n/**\n * Get a callback for calling the authProvider.getPermissions() method.\n *\n * @see useAuthProvider\n *\n * @returns {Function} getPermissions callback\n *\n * This is a low level hook. See those more specialized hooks\n * offering state handling.\n *\n * @see usePermissions\n *\n * @example\n *\n * import { useGetPermissions } from 'react-admin';\n *\n * const Roles = () => {\n *     const [permissions, setPermissions] = useState([]);\n *     const getPermissions = useGetPermissions();\n *     useEffect(() => {\n *         getPermissions().then(permissions => setPermissions(permissions))\n *     }, [])\n *     return (\n *         <ul>\n *             {permissions.map((permission, key) => (\n *                 <li key={key}>{permission}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n */\nvar useGetPermissions = function () {\n    var authProvider = useAuthProvider();\n    var getPermissions = useCallback(function (params) {\n        if (params === void 0) { params = {}; }\n        return authProvider.getPermissions(params);\n    }, [authProvider]);\n    return authProvider ? getPermissions : getPermissionsWithoutProvider;\n};\nexport default useGetPermissions;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,IAAIC,6BAA6B,GAAG,SAAAA,CAAA,EAAY;EAAE,OAAOC,OAAO,CAACC,OAAO,CAAC,EAAE,CAAC;AAAE,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,SAAAA,CAAA,EAAY;EAChC,IAAIC,YAAY,GAAGL,eAAe,EAAE;EACpC,IAAIM,cAAc,GAAGP,WAAW,CAAC,UAAUQ,MAAM,EAAE;IAC/C,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,CAAC,CAAC;IAAE;IACtC,OAAOF,YAAY,CAACC,cAAc,CAACC,MAAM,CAAC;EAC9C,CAAC,EAAE,CAACF,YAAY,CAAC,CAAC;EAClB,OAAOA,YAAY,GAAGC,cAAc,GAAGL,6BAA6B;AACxE,CAAC;AACD,eAAeG,iBAAiB"},"metadata":{},"sourceType":"module"}