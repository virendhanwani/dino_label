{"ast":null,"code":"import { useEffect } from 'react';\nimport useCheckAuth from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - loading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - loaded: the opposite of loading.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { authenticated, error, loading, loaded }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { loading, authenticated } = useAuthState();\n *     if (loading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\nvar useAuthState = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n  var _a = useSafeSetState({\n      loading: true,\n      loaded: false,\n      authenticated: true // optimistic\n    }),\n    state = _a[0],\n    setState = _a[1];\n  var checkAuth = useCheckAuth();\n  useEffect(function () {\n    checkAuth(params, false).then(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: true\n      });\n    }).catch(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: false\n      });\n    });\n  }, [checkAuth, params, setState]);\n  return state;\n};\nexport default useAuthState;","map":{"version":3,"names":["useEffect","useCheckAuth","useSafeSetState","emptyParams","useAuthState","params","_a","loading","loaded","authenticated","state","setState","checkAuth","then","catch"],"sources":["/node_modules/ra-core/esm/auth/useAuthState.js"],"sourcesContent":["import { useEffect } from 'react';\nimport useCheckAuth from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - loading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - loaded: the opposite of loading.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { authenticated, error, loading, loaded }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { loading, authenticated } = useAuthState();\n *     if (loading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\nvar useAuthState = function (params) {\n    if (params === void 0) { params = emptyParams; }\n    var _a = useSafeSetState({\n        loading: true,\n        loaded: false,\n        authenticated: true, // optimistic\n    }), state = _a[0], setState = _a[1];\n    var checkAuth = useCheckAuth();\n    useEffect(function () {\n        checkAuth(params, false)\n            .then(function () {\n            return setState({ loading: false, loaded: true, authenticated: true });\n        })\n            .catch(function () {\n            return setState({ loading: false, loaded: true, authenticated: false });\n        });\n    }, [checkAuth, params, setState]);\n    return state;\n};\nexport default useAuthState;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,eAAe,QAAQ,eAAe;AAC/C,IAAIC,WAAW,GAAG,CAAC,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAAUC,MAAM,EAAE;EACjC,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAGF,WAAW;EAAE;EAC/C,IAAIG,EAAE,GAAGJ,eAAe,CAAC;MACrBK,OAAO,EAAE,IAAI;MACbC,MAAM,EAAE,KAAK;MACbC,aAAa,EAAE,IAAI,CAAE;IACzB,CAAC,CAAC;IAAEC,KAAK,GAAGJ,EAAE,CAAC,CAAC,CAAC;IAAEK,QAAQ,GAAGL,EAAE,CAAC,CAAC,CAAC;EACnC,IAAIM,SAAS,GAAGX,YAAY,EAAE;EAC9BD,SAAS,CAAC,YAAY;IAClBY,SAAS,CAACP,MAAM,EAAE,KAAK,CAAC,CACnBQ,IAAI,CAAC,YAAY;MAClB,OAAOF,QAAQ,CAAC;QAAEJ,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAK,CAAC,CAAC;IAC1E,CAAC,CAAC,CACGK,KAAK,CAAC,YAAY;MACnB,OAAOH,QAAQ,CAAC;QAAEJ,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAM,CAAC,CAAC;IAC3E,CAAC,CAAC;EACN,CAAC,EAAE,CAACG,SAAS,EAAEP,MAAM,EAAEM,QAAQ,CAAC,CAAC;EACjC,OAAOD,KAAK;AAChB,CAAC;AACD,eAAeN,YAAY"},"metadata":{},"sourceType":"module"}