{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport pickBy from 'lodash/pickBy';\nvar defaultCacheDuration = 10 * 60 * 1000; // ten minutes\n/**\n * Returns a list of fetch dates by record id\n *\n * Given a list of new record ids and a previous list of fetch dates by record id,\n * add the new record ids at the current date,\n * and removes those among the old record ids that are stale.\n *\n * @param newRecordIds an array of record identifiers, e.g. [34, 56]\n * @param oldRecordFetchedAt the fetch dates of old records, e.g. { 12: new Date('12 minutes ago), 34: new Date('5 minutes ago') }\n * @param now Current time (useful for tests)\n * @param cacheDuration How long until an old record is removed from the list\n */\nvar getFetchedAt = function (newRecordIds, oldRecordFetchedAt, now, cacheDuration) {\n  if (newRecordIds === void 0) {\n    newRecordIds = [];\n  }\n  if (oldRecordFetchedAt === void 0) {\n    oldRecordFetchedAt = {};\n  }\n  if (now === void 0) {\n    now = new Date();\n  }\n  if (cacheDuration === void 0) {\n    cacheDuration = defaultCacheDuration;\n  }\n  // prepare new records and timestamp them\n  var newFetchedAt = {};\n  newRecordIds.forEach(function (recordId) {\n    return newFetchedAt[recordId] = now;\n  });\n  // remove outdated entry\n  var latestValidDate = new Date();\n  latestValidDate.setTime(latestValidDate.getTime() - cacheDuration);\n  var stillValidFetchedAt = pickBy(oldRecordFetchedAt, function (date) {\n    return date > latestValidDate;\n  });\n  return __assign(__assign({}, stillValidFetchedAt), newFetchedAt);\n};\nexport default getFetchedAt;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","pickBy","defaultCacheDuration","getFetchedAt","newRecordIds","oldRecordFetchedAt","now","cacheDuration","Date","newFetchedAt","forEach","recordId","latestValidDate","setTime","getTime","stillValidFetchedAt","date"],"sources":["/node_modules/ra-core/esm/util/getFetchedAt.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport pickBy from 'lodash/pickBy';\nvar defaultCacheDuration = 10 * 60 * 1000; // ten minutes\n/**\n * Returns a list of fetch dates by record id\n *\n * Given a list of new record ids and a previous list of fetch dates by record id,\n * add the new record ids at the current date,\n * and removes those among the old record ids that are stale.\n *\n * @param newRecordIds an array of record identifiers, e.g. [34, 56]\n * @param oldRecordFetchedAt the fetch dates of old records, e.g. { 12: new Date('12 minutes ago), 34: new Date('5 minutes ago') }\n * @param now Current time (useful for tests)\n * @param cacheDuration How long until an old record is removed from the list\n */\nvar getFetchedAt = function (newRecordIds, oldRecordFetchedAt, now, cacheDuration) {\n    if (newRecordIds === void 0) { newRecordIds = []; }\n    if (oldRecordFetchedAt === void 0) { oldRecordFetchedAt = {}; }\n    if (now === void 0) { now = new Date(); }\n    if (cacheDuration === void 0) { cacheDuration = defaultCacheDuration; }\n    // prepare new records and timestamp them\n    var newFetchedAt = {};\n    newRecordIds.forEach(function (recordId) { return (newFetchedAt[recordId] = now); });\n    // remove outdated entry\n    var latestValidDate = new Date();\n    latestValidDate.setTime(latestValidDate.getTime() - cacheDuration);\n    var stillValidFetchedAt = pickBy(oldRecordFetchedAt, function (date) { return date > latestValidDate; });\n    return __assign(__assign({}, stillValidFetchedAt), newFetchedAt);\n};\nexport default getFetchedAt;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,OAAOO,MAAM,MAAM,eAAe;AAClC,IAAIC,oBAAoB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAAUC,YAAY,EAAEC,kBAAkB,EAAEC,GAAG,EAAEC,aAAa,EAAE;EAC/E,IAAIH,YAAY,KAAK,KAAK,CAAC,EAAE;IAAEA,YAAY,GAAG,EAAE;EAAE;EAClD,IAAIC,kBAAkB,KAAK,KAAK,CAAC,EAAE;IAAEA,kBAAkB,GAAG,CAAC,CAAC;EAAE;EAC9D,IAAIC,GAAG,KAAK,KAAK,CAAC,EAAE;IAAEA,GAAG,GAAG,IAAIE,IAAI,EAAE;EAAE;EACxC,IAAID,aAAa,KAAK,KAAK,CAAC,EAAE;IAAEA,aAAa,GAAGL,oBAAoB;EAAE;EACtE;EACA,IAAIO,YAAY,GAAG,CAAC,CAAC;EACrBL,YAAY,CAACM,OAAO,CAAC,UAAUC,QAAQ,EAAE;IAAE,OAAQF,YAAY,CAACE,QAAQ,CAAC,GAAGL,GAAG;EAAG,CAAC,CAAC;EACpF;EACA,IAAIM,eAAe,GAAG,IAAIJ,IAAI,EAAE;EAChCI,eAAe,CAACC,OAAO,CAACD,eAAe,CAACE,OAAO,EAAE,GAAGP,aAAa,CAAC;EAClE,IAAIQ,mBAAmB,GAAGd,MAAM,CAACI,kBAAkB,EAAE,UAAUW,IAAI,EAAE;IAAE,OAAOA,IAAI,GAAGJ,eAAe;EAAE,CAAC,CAAC;EACxG,OAAOzB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE4B,mBAAmB,CAAC,EAAEN,YAAY,CAAC;AACpE,CAAC;AACD,eAAeN,YAAY"},"metadata":{},"sourceType":"module"}