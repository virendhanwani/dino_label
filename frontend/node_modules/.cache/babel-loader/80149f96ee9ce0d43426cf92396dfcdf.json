{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useContext, useMemo } from 'react';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport DataProviderContext from './DataProviderContext';\nimport defaultDataProvider from './defaultDataProvider';\nimport useLogoutIfAccessDenied from '../auth/useLogoutIfAccessDenied';\nimport { getDataProviderCallArguments } from './getDataProviderCallArguments';\nimport { doQuery, stackCall, stackOptimisticCall, getRemainingStackedCalls } from './performQuery';\n/**\n * Hook for getting a dataProvider\n *\n * Gets a dataProvider object, which behaves just like the real dataProvider\n * (same methods returning a Promise). But it's actually a Proxy object, which\n * dispatches Redux actions along the process. The benefit is that react-admin\n * tracks the loading state when using this hook, and stores results in the\n * Redux store for future use.\n *\n * In addition to the 2 usual parameters of the dataProvider methods (resource,\n * payload), the Proxy supports a third parameter for every call. It's an\n * object literal which may contain side effects, or make the action optimistic\n * (with mutationMode: optimistic) or undoable (with mutationMode: undoable).\n *\n * @return dataProvider\n *\n * @example Basic usage\n *\n * import * as React from 'react';\n * import { useState } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const PostList = () => {\n *      const [posts, setPosts] = useState([])\n *      const dataProvider = useDataProvider();\n *      useEffect(() => {\n *          dataProvider.getList('posts', { filter: { status: 'pending' }})\n *            .then(({ data }) => setPosts(data));\n *      }, [])\n *\n *      return (\n *          <Fragment>\n *              {posts.map((post, key) => <PostDetail post={post} key={key} />)}\n *          </Fragment>\n *     );\n * }\n *\n * @example Handling all states (loading, error, success)\n *\n * import { useState, useEffect } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const UserProfile = ({ userId }) => {\n *     const dataProvider = useDataProvider();\n *     const [user, setUser] = useState();\n *     const [loading, setLoading] = useState(true);\n *     const [error, setError] = useState();\n *     useEffect(() => {\n *         dataProvider.getOne('users', { id: userId })\n *             .then(({ data }) => {\n *                 setUser(data);\n *                 setLoading(false);\n *             })\n *             .catch(error => {\n *                 setError(error);\n *                 setLoading(false);\n *             })\n *     }, []);\n *\n *     if (loading) return <Loading />;\n *     if (error) return <Error />\n *     if (!user) return null;\n *\n *     return (\n *         <ul>\n *             <li>Name: {user.name}</li>\n *             <li>Email: {user.email}</li>\n *         </ul>\n *     )\n * }\n *\n * @example Action customization\n *\n * dataProvider.getOne('users', { id: 123 });\n * // will dispatch the following actions:\n * // - CUSTOM_FETCH\n * // - CUSTOM_FETCH_LOADING\n * // - FETCH_START\n * // - CUSTOM_FETCH_SUCCESS\n * // - FETCH_END\n *\n * dataProvider.getOne('users', { id: 123 }, { action: CRUD_GET_ONE });\n * // will dispatch the following actions:\n * // - CRUD_GET_ONE\n * // - CRUD_GET_ONE_LOADING\n * // - FETCH_START\n * // - CRUD_GET_ONE_SUCCESS\n * // - FETCH_END\n */\nvar useDataProvider = function () {\n  var dispatch = useDispatch();\n  var dataProvider = useContext(DataProviderContext) || defaultDataProvider;\n  // optimistic mode can be triggered by a previous optimistic or undoable query\n  var isOptimistic = useSelector(function (state) {\n    return state.admin.ui.optimistic;\n  });\n  var store = useStore();\n  var logoutIfAccessDenied = useLogoutIfAccessDenied();\n  var dataProviderProxy = useMemo(function () {\n    return new Proxy(dataProvider, {\n      get: function (target, name) {\n        if (typeof name === 'symbol' || name === 'then') {\n          return;\n        }\n        return function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          var _a = getDataProviderCallArguments(args),\n            resource = _a.resource,\n            payload = _a.payload,\n            allArguments = _a.allArguments,\n            options = _a.options;\n          var type = name.toString();\n          var _b = options || {},\n            _c = _b.action,\n            action = _c === void 0 ? 'CUSTOM_FETCH' : _c,\n            _d = _b.undoable,\n            undoable = _d === void 0 ? false : _d,\n            _e = _b.onSuccess,\n            onSuccess = _e === void 0 ? undefined : _e,\n            _f = _b.onFailure,\n            onFailure = _f === void 0 ? undefined : _f,\n            _g = _b.mutationMode,\n            mutationMode = _g === void 0 ? undoable ? 'undoable' : 'pessimistic' : _g,\n            _h = _b.enabled,\n            enabled = _h === void 0 ? true : _h,\n            rest = __rest(_b, [\"action\", \"undoable\", \"onSuccess\", \"onFailure\", \"mutationMode\", \"enabled\"]);\n          if (typeof dataProvider[type] !== 'function') {\n            throw new Error(\"Unknown dataProvider function: \" + type);\n          }\n          if (onSuccess && typeof onSuccess !== 'function') {\n            throw new Error('The onSuccess option must be a function');\n          }\n          if (onFailure && typeof onFailure !== 'function') {\n            throw new Error('The onFailure option must be a function');\n          }\n          if (mutationMode === 'undoable' && !onSuccess) {\n            throw new Error('You must pass an onSuccess callback calling notify() to use the undoable mode');\n          }\n          if (typeof enabled !== 'boolean') {\n            throw new Error('The enabled option must be a boolean');\n          }\n          if (enabled === false) {\n            return Promise.resolve({});\n          }\n          var params = {\n            resource: resource,\n            type: type,\n            payload: payload,\n            action: action,\n            onFailure: onFailure,\n            onSuccess: onSuccess,\n            rest: rest,\n            mutationMode: mutationMode,\n            // these ones are passed down because of the rules of hooks\n            dataProvider: dataProvider,\n            store: store,\n            dispatch: dispatch,\n            logoutIfAccessDenied: logoutIfAccessDenied,\n            allArguments: allArguments\n          };\n          if (isOptimistic) {\n            // When in optimistic mode, fetch calls aren't executed\n            // right away. Instead, they are are stacked, to be\n            // executed once the dataProvider leaves optimistic mode.\n            // In the meantime, the admin uses data from the store.\n            if (mutationMode === 'undoable' || mutationMode === 'optimistic') {\n              // optimistic and undoable calls are added to a\n              // specific stack, as they must be replayed first\n              stackOptimisticCall(params);\n            } else {\n              // pessimistic calls are added to the regular stack\n              // and will be replayed last\n              stackCall(params);\n            }\n            // Return a Promise that only resolves when the optimistic call was made\n            // otherwise hooks like useQueryWithStore will return loaded = true\n            // before the content actually reaches the Redux store.\n            // But as we can't determine when this particular query was finished,\n            // the Promise resolves only when *all* optimistic queries are done.\n            return waitFor(function () {\n              return getRemainingStackedCalls() === 0;\n            });\n          } else {\n            return doQuery(params);\n          }\n        };\n      }\n    });\n  }, [dataProvider, dispatch, isOptimistic, logoutIfAccessDenied, store]);\n  return dataProviderProxy;\n};\n// get a Promise that resolves after a delay in milliseconds\nvar later = function (delay) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n};\n// get a Promise that resolves once a condition is satisfied\nvar waitFor = function (condition) {\n  return new Promise(function (resolve) {\n    return condition() ? resolve() : later().then(function () {\n      return waitFor(condition).then(function () {\n        return resolve();\n      });\n    });\n  });\n};\nexport default useDataProvider;","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useContext","useMemo","useDispatch","useSelector","useStore","DataProviderContext","defaultDataProvider","useLogoutIfAccessDenied","getDataProviderCallArguments","doQuery","stackCall","stackOptimisticCall","getRemainingStackedCalls","useDataProvider","dispatch","dataProvider","isOptimistic","state","admin","ui","optimistic","store","logoutIfAccessDenied","dataProviderProxy","Proxy","get","target","name","args","_i","arguments","_a","resource","payload","allArguments","options","type","toString","_b","_c","action","_d","undoable","_e","onSuccess","undefined","_f","onFailure","_g","mutationMode","_h","enabled","rest","Error","Promise","resolve","params","waitFor","later","delay","setTimeout","condition","then"],"sources":["/node_modules/ra-core/esm/dataProvider/useDataProvider.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useContext, useMemo } from 'react';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport DataProviderContext from './DataProviderContext';\nimport defaultDataProvider from './defaultDataProvider';\nimport useLogoutIfAccessDenied from '../auth/useLogoutIfAccessDenied';\nimport { getDataProviderCallArguments } from './getDataProviderCallArguments';\nimport { doQuery, stackCall, stackOptimisticCall, getRemainingStackedCalls, } from './performQuery';\n/**\n * Hook for getting a dataProvider\n *\n * Gets a dataProvider object, which behaves just like the real dataProvider\n * (same methods returning a Promise). But it's actually a Proxy object, which\n * dispatches Redux actions along the process. The benefit is that react-admin\n * tracks the loading state when using this hook, and stores results in the\n * Redux store for future use.\n *\n * In addition to the 2 usual parameters of the dataProvider methods (resource,\n * payload), the Proxy supports a third parameter for every call. It's an\n * object literal which may contain side effects, or make the action optimistic\n * (with mutationMode: optimistic) or undoable (with mutationMode: undoable).\n *\n * @return dataProvider\n *\n * @example Basic usage\n *\n * import * as React from 'react';\n * import { useState } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const PostList = () => {\n *      const [posts, setPosts] = useState([])\n *      const dataProvider = useDataProvider();\n *      useEffect(() => {\n *          dataProvider.getList('posts', { filter: { status: 'pending' }})\n *            .then(({ data }) => setPosts(data));\n *      }, [])\n *\n *      return (\n *          <Fragment>\n *              {posts.map((post, key) => <PostDetail post={post} key={key} />)}\n *          </Fragment>\n *     );\n * }\n *\n * @example Handling all states (loading, error, success)\n *\n * import { useState, useEffect } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const UserProfile = ({ userId }) => {\n *     const dataProvider = useDataProvider();\n *     const [user, setUser] = useState();\n *     const [loading, setLoading] = useState(true);\n *     const [error, setError] = useState();\n *     useEffect(() => {\n *         dataProvider.getOne('users', { id: userId })\n *             .then(({ data }) => {\n *                 setUser(data);\n *                 setLoading(false);\n *             })\n *             .catch(error => {\n *                 setError(error);\n *                 setLoading(false);\n *             })\n *     }, []);\n *\n *     if (loading) return <Loading />;\n *     if (error) return <Error />\n *     if (!user) return null;\n *\n *     return (\n *         <ul>\n *             <li>Name: {user.name}</li>\n *             <li>Email: {user.email}</li>\n *         </ul>\n *     )\n * }\n *\n * @example Action customization\n *\n * dataProvider.getOne('users', { id: 123 });\n * // will dispatch the following actions:\n * // - CUSTOM_FETCH\n * // - CUSTOM_FETCH_LOADING\n * // - FETCH_START\n * // - CUSTOM_FETCH_SUCCESS\n * // - FETCH_END\n *\n * dataProvider.getOne('users', { id: 123 }, { action: CRUD_GET_ONE });\n * // will dispatch the following actions:\n * // - CRUD_GET_ONE\n * // - CRUD_GET_ONE_LOADING\n * // - FETCH_START\n * // - CRUD_GET_ONE_SUCCESS\n * // - FETCH_END\n */\nvar useDataProvider = function () {\n    var dispatch = useDispatch();\n    var dataProvider = (useContext(DataProviderContext) ||\n        defaultDataProvider);\n    // optimistic mode can be triggered by a previous optimistic or undoable query\n    var isOptimistic = useSelector(function (state) { return state.admin.ui.optimistic; });\n    var store = useStore();\n    var logoutIfAccessDenied = useLogoutIfAccessDenied();\n    var dataProviderProxy = useMemo(function () {\n        return new Proxy(dataProvider, {\n            get: function (target, name) {\n                if (typeof name === 'symbol' || name === 'then') {\n                    return;\n                }\n                return function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var _a = getDataProviderCallArguments(args), resource = _a.resource, payload = _a.payload, allArguments = _a.allArguments, options = _a.options;\n                    var type = name.toString();\n                    var _b = options || {}, _c = _b.action, action = _c === void 0 ? 'CUSTOM_FETCH' : _c, _d = _b.undoable, undoable = _d === void 0 ? false : _d, _e = _b.onSuccess, onSuccess = _e === void 0 ? undefined : _e, _f = _b.onFailure, onFailure = _f === void 0 ? undefined : _f, _g = _b.mutationMode, mutationMode = _g === void 0 ? undoable ? 'undoable' : 'pessimistic' : _g, _h = _b.enabled, enabled = _h === void 0 ? true : _h, rest = __rest(_b, [\"action\", \"undoable\", \"onSuccess\", \"onFailure\", \"mutationMode\", \"enabled\"]);\n                    if (typeof dataProvider[type] !== 'function') {\n                        throw new Error(\"Unknown dataProvider function: \" + type);\n                    }\n                    if (onSuccess && typeof onSuccess !== 'function') {\n                        throw new Error('The onSuccess option must be a function');\n                    }\n                    if (onFailure && typeof onFailure !== 'function') {\n                        throw new Error('The onFailure option must be a function');\n                    }\n                    if (mutationMode === 'undoable' && !onSuccess) {\n                        throw new Error('You must pass an onSuccess callback calling notify() to use the undoable mode');\n                    }\n                    if (typeof enabled !== 'boolean') {\n                        throw new Error('The enabled option must be a boolean');\n                    }\n                    if (enabled === false) {\n                        return Promise.resolve({});\n                    }\n                    var params = {\n                        resource: resource,\n                        type: type,\n                        payload: payload,\n                        action: action,\n                        onFailure: onFailure,\n                        onSuccess: onSuccess,\n                        rest: rest,\n                        mutationMode: mutationMode,\n                        // these ones are passed down because of the rules of hooks\n                        dataProvider: dataProvider,\n                        store: store,\n                        dispatch: dispatch,\n                        logoutIfAccessDenied: logoutIfAccessDenied,\n                        allArguments: allArguments,\n                    };\n                    if (isOptimistic) {\n                        // When in optimistic mode, fetch calls aren't executed\n                        // right away. Instead, they are are stacked, to be\n                        // executed once the dataProvider leaves optimistic mode.\n                        // In the meantime, the admin uses data from the store.\n                        if (mutationMode === 'undoable' ||\n                            mutationMode === 'optimistic') {\n                            // optimistic and undoable calls are added to a\n                            // specific stack, as they must be replayed first\n                            stackOptimisticCall(params);\n                        }\n                        else {\n                            // pessimistic calls are added to the regular stack\n                            // and will be replayed last\n                            stackCall(params);\n                        }\n                        // Return a Promise that only resolves when the optimistic call was made\n                        // otherwise hooks like useQueryWithStore will return loaded = true\n                        // before the content actually reaches the Redux store.\n                        // But as we can't determine when this particular query was finished,\n                        // the Promise resolves only when *all* optimistic queries are done.\n                        return waitFor(function () { return getRemainingStackedCalls() === 0; });\n                    }\n                    else {\n                        return doQuery(params);\n                    }\n                };\n            },\n        });\n    }, [dataProvider, dispatch, isOptimistic, logoutIfAccessDenied, store]);\n    return dataProviderProxy;\n};\n// get a Promise that resolves after a delay in milliseconds\nvar later = function (delay) {\n    if (delay === void 0) { delay = 100; }\n    return new Promise(function (resolve) {\n        setTimeout(resolve, delay);\n    });\n};\n// get a Promise that resolves once a condition is satisfied\nvar waitFor = function (condition) {\n    return new Promise(function (resolve) {\n        return condition()\n            ? resolve()\n            : later().then(function () { return waitFor(condition).then(function () { return resolve(); }); });\n    });\n};\nexport default useDataProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}