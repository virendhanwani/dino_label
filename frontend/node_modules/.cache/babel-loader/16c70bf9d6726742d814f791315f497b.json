{"ast":null,"code":"import { useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n// keep a cache of already fetched permissions to initialize state for new\n// components and avoid a useless rerender if the permissions haven't changed\nvar alreadyFetchedPermissions = {\n  '{}': undefined\n};\n/**\n * Hook for getting user permissions without the loading state.\n *\n * When compared to usePermissions, this hook doesn't cause a re-render\n * when the permissions haven't changed since the last call.\n *\n * This hook doesn't handle the loading state.\n *\n * @see usePermissions\n *\n * Calls the authProvider.getPermissions() method asynchronously.\n * If the authProvider returns a rejected promise, returns empty permissions.\n *\n * The return value updates according to the request state:\n *\n * - start:   { permissions: [previously fetched permissions for these params] }\n * - success: { permissions: [permissions returned by the authProvider (usually the same as on start)] }\n * - error:   { error: [error from provider] }\n *\n * Useful to enable features based on user permissions\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { permissions, error }.\n *\n * @example\n *     import { usePermissionsOptimized } from 'react-admin';\n *\n *     const PostDetail = props => {\n *         const { permissions } = usePermissionsOptimized();\n *         if (permissions !== 'editor') {\n *             return <Redirect to={`posts/${props.id}/show`} />\n *         } else {\n *             return <PostEdit {...props} />\n *         }\n *     };\n */\nvar usePermissionsOptimized = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n  var key = JSON.stringify(params);\n  var _a = useSafeSetState({\n      permissions: alreadyFetchedPermissions[key]\n    }),\n    state = _a[0],\n    setState = _a[1];\n  var getPermissions = useGetPermissions();\n  useEffect(function () {\n    getPermissions(params).then(function (permissions) {\n      if (!isEqual(permissions, state.permissions)) {\n        alreadyFetchedPermissions[key] = permissions;\n        setState({\n          permissions: permissions\n        });\n      }\n    }).catch(function (error) {\n      setState({\n        error: error\n      });\n    });\n  }, [getPermissions, key]); // eslint-disable-line react-hooks/exhaustive-deps\n  return state;\n};\nexport default usePermissionsOptimized;","map":{"version":3,"names":["useEffect","isEqual","useGetPermissions","useSafeSetState","emptyParams","alreadyFetchedPermissions","undefined","usePermissionsOptimized","params","key","JSON","stringify","_a","permissions","state","setState","getPermissions","then","catch","error"],"sources":["/node_modules/ra-core/esm/auth/usePermissionsOptimized.js"],"sourcesContent":["import { useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n// keep a cache of already fetched permissions to initialize state for new\n// components and avoid a useless rerender if the permissions haven't changed\nvar alreadyFetchedPermissions = { '{}': undefined };\n/**\n * Hook for getting user permissions without the loading state.\n *\n * When compared to usePermissions, this hook doesn't cause a re-render\n * when the permissions haven't changed since the last call.\n *\n * This hook doesn't handle the loading state.\n *\n * @see usePermissions\n *\n * Calls the authProvider.getPermissions() method asynchronously.\n * If the authProvider returns a rejected promise, returns empty permissions.\n *\n * The return value updates according to the request state:\n *\n * - start:   { permissions: [previously fetched permissions for these params] }\n * - success: { permissions: [permissions returned by the authProvider (usually the same as on start)] }\n * - error:   { error: [error from provider] }\n *\n * Useful to enable features based on user permissions\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { permissions, error }.\n *\n * @example\n *     import { usePermissionsOptimized } from 'react-admin';\n *\n *     const PostDetail = props => {\n *         const { permissions } = usePermissionsOptimized();\n *         if (permissions !== 'editor') {\n *             return <Redirect to={`posts/${props.id}/show`} />\n *         } else {\n *             return <PostEdit {...props} />\n *         }\n *     };\n */\nvar usePermissionsOptimized = function (params) {\n    if (params === void 0) { params = emptyParams; }\n    var key = JSON.stringify(params);\n    var _a = useSafeSetState({\n        permissions: alreadyFetchedPermissions[key],\n    }), state = _a[0], setState = _a[1];\n    var getPermissions = useGetPermissions();\n    useEffect(function () {\n        getPermissions(params)\n            .then(function (permissions) {\n            if (!isEqual(permissions, state.permissions)) {\n                alreadyFetchedPermissions[key] = permissions;\n                setState({ permissions: permissions });\n            }\n        })\n            .catch(function (error) {\n            setState({\n                error: error,\n            });\n        });\n    }, [getPermissions, key]); // eslint-disable-line react-hooks/exhaustive-deps\n    return state;\n};\nexport default usePermissionsOptimized;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,SAASC,eAAe,QAAQ,eAAe;AAC/C,IAAIC,WAAW,GAAG,CAAC,CAAC;AACpB;AACA;AACA,IAAIC,yBAAyB,GAAG;EAAE,IAAI,EAAEC;AAAU,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,uBAAuB,GAAG,SAAAA,CAAUC,MAAM,EAAE;EAC5C,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAGJ,WAAW;EAAE;EAC/C,IAAIK,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC;EAChC,IAAII,EAAE,GAAGT,eAAe,CAAC;MACrBU,WAAW,EAAER,yBAAyB,CAACI,GAAG;IAC9C,CAAC,CAAC;IAAEK,KAAK,GAAGF,EAAE,CAAC,CAAC,CAAC;IAAEG,QAAQ,GAAGH,EAAE,CAAC,CAAC,CAAC;EACnC,IAAII,cAAc,GAAGd,iBAAiB,EAAE;EACxCF,SAAS,CAAC,YAAY;IAClBgB,cAAc,CAACR,MAAM,CAAC,CACjBS,IAAI,CAAC,UAAUJ,WAAW,EAAE;MAC7B,IAAI,CAACZ,OAAO,CAACY,WAAW,EAAEC,KAAK,CAACD,WAAW,CAAC,EAAE;QAC1CR,yBAAyB,CAACI,GAAG,CAAC,GAAGI,WAAW;QAC5CE,QAAQ,CAAC;UAAEF,WAAW,EAAEA;QAAY,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC,CACGK,KAAK,CAAC,UAAUC,KAAK,EAAE;MACxBJ,QAAQ,CAAC;QACLI,KAAK,EAAEA;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,EAAE,CAACH,cAAc,EAAEP,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3B,OAAOK,KAAK;AAChB,CAAC;AACD,eAAeP,uBAAuB"},"metadata":{},"sourceType":"module"}