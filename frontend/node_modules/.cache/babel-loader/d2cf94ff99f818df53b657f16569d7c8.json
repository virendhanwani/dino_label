{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext } from 'ra-core';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport var NumberField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    locales = props.locales,\n    options = props.options,\n    textAlign = props.textAlign,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n  var record = useRecordContext(props);\n  if (!record) {\n    return null;\n  }\n  var value = get(record, source);\n  if (value == null) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText) : null;\n  }\n  return React.createElement(Typography, __assign({\n    variant: \"body2\",\n    component: \"span\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), hasNumberFormat ? value.toLocaleString(locales, options) : value);\n});\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\nNumberField.defaultProps = {\n  addLabel: true,\n  textAlign: 'right'\n};\nNumberField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object\n});\nexport default NumberField;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","memo","PropTypes","get","Typography","useRecordContext","sanitizeFieldRestProps","fieldPropTypes","hasNumberFormat","Intl","NumberFormat","NumberField","props","className","emptyText","source","locales","options","textAlign","rest","record","value","createElement","component","variant","toLocaleString","displayName","defaultProps","addLabel","propTypes","oneOfType","string","arrayOf","object"],"sources":["/node_modules/ra-ui-materialui/esm/field/NumberField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext } from 'ra-core';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nvar hasNumberFormat = !!(typeof Intl === 'object' &&\n    Intl &&\n    typeof Intl.NumberFormat === 'function');\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport var NumberField = memo(function (props) {\n    var className = props.className, emptyText = props.emptyText, source = props.source, locales = props.locales, options = props.options, textAlign = props.textAlign, rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n    var record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    var value = get(record, source);\n    if (value == null) {\n        return emptyText ? (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeFieldRestProps(rest)), emptyText)) : null;\n    }\n    return (React.createElement(Typography, __assign({ variant: \"body2\", component: \"span\", className: className }, sanitizeFieldRestProps(rest)), hasNumberFormat ? value.toLocaleString(locales, options) : value));\n});\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\nNumberField.defaultProps = {\n    addLabel: true,\n    textAlign: 'right',\n};\nNumberField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), { locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]), options: PropTypes.object });\nexport default NumberField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}