{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { getFieldLabelTranslationArgs } from '../util';\nimport useLocale from './useLocale';\nimport useTranslate from './useTranslate';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport var useTranslatable = function (options) {\n  var localeFromUI = useLocale();\n  var _a = options.defaultLocale,\n    defaultLocale = _a === void 0 ? localeFromUI : _a,\n    locales = options.locales;\n  var _b = useState(defaultLocale),\n    selectedLocale = _b[0],\n    setSelectedLocale = _b[1];\n  var resource = useResourceContext({});\n  var translate = useTranslate();\n  var context = useMemo(function () {\n    return {\n      getSource: function (source, locale) {\n        if (locale === void 0) {\n          locale = selectedLocale;\n        }\n        return source + \".\" + locale;\n      },\n      getLabel: function (source, label) {\n        return translate.apply(void 0, getFieldLabelTranslationArgs({\n          source: source,\n          resource: resource,\n          label: label\n        }));\n      },\n      locales: locales,\n      selectedLocale: selectedLocale,\n      selectLocale: setSelectedLocale\n    };\n  }, [locales, resource, selectedLocale, translate]);\n  return context;\n};","map":{"version":3,"names":["useState","useMemo","useResourceContext","getFieldLabelTranslationArgs","useLocale","useTranslate","useTranslatable","options","localeFromUI","_a","defaultLocale","locales","_b","selectedLocale","setSelectedLocale","resource","translate","context","getSource","source","locale","getLabel","label","apply","selectLocale"],"sources":["/node_modules/ra-core/esm/i18n/useTranslatable.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { getFieldLabelTranslationArgs } from '../util';\nimport useLocale from './useLocale';\nimport useTranslate from './useTranslate';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport var useTranslatable = function (options) {\n    var localeFromUI = useLocale();\n    var _a = options.defaultLocale, defaultLocale = _a === void 0 ? localeFromUI : _a, locales = options.locales;\n    var _b = useState(defaultLocale), selectedLocale = _b[0], setSelectedLocale = _b[1];\n    var resource = useResourceContext({});\n    var translate = useTranslate();\n    var context = useMemo(function () { return ({\n        getSource: function (source, locale) {\n            if (locale === void 0) { locale = selectedLocale; }\n            return source + \".\" + locale;\n        },\n        getLabel: function (source, label) {\n            return translate.apply(void 0, getFieldLabelTranslationArgs({\n                source: source,\n                resource: resource,\n                label: label,\n            }));\n        },\n        locales: locales,\n        selectedLocale: selectedLocale,\n        selectLocale: setSelectedLocale,\n    }); }, [locales, resource, selectedLocale, translate]);\n    return context;\n};\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACzC,SAASC,kBAAkB,QAAQ,SAAS;AAC5C,SAASC,4BAA4B,QAAQ,SAAS;AACtD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,YAAY,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,eAAe,GAAG,SAAAA,CAAUC,OAAO,EAAE;EAC5C,IAAIC,YAAY,GAAGJ,SAAS,EAAE;EAC9B,IAAIK,EAAE,GAAGF,OAAO,CAACG,aAAa;IAAEA,aAAa,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGD,YAAY,GAAGC,EAAE;IAAEE,OAAO,GAAGJ,OAAO,CAACI,OAAO;EAC5G,IAAIC,EAAE,GAAGZ,QAAQ,CAACU,aAAa,CAAC;IAAEG,cAAc,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,iBAAiB,GAAGF,EAAE,CAAC,CAAC,CAAC;EACnF,IAAIG,QAAQ,GAAGb,kBAAkB,CAAC,CAAC,CAAC,CAAC;EACrC,IAAIc,SAAS,GAAGX,YAAY,EAAE;EAC9B,IAAIY,OAAO,GAAGhB,OAAO,CAAC,YAAY;IAAE,OAAQ;MACxCiB,SAAS,EAAE,SAAAA,CAAUC,MAAM,EAAEC,MAAM,EAAE;QACjC,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;UAAEA,MAAM,GAAGP,cAAc;QAAE;QAClD,OAAOM,MAAM,GAAG,GAAG,GAAGC,MAAM;MAChC,CAAC;MACDC,QAAQ,EAAE,SAAAA,CAAUF,MAAM,EAAEG,KAAK,EAAE;QAC/B,OAAON,SAAS,CAACO,KAAK,CAAC,KAAK,CAAC,EAAEpB,4BAA4B,CAAC;UACxDgB,MAAM,EAAEA,MAAM;UACdJ,QAAQ,EAAEA,QAAQ;UAClBO,KAAK,EAAEA;QACX,CAAC,CAAC,CAAC;MACP,CAAC;MACDX,OAAO,EAAEA,OAAO;MAChBE,cAAc,EAAEA,cAAc;MAC9BW,YAAY,EAAEV;IAClB,CAAC;EAAG,CAAC,EAAE,CAACH,OAAO,EAAEI,QAAQ,EAAEF,cAAc,EAAEG,SAAS,CAAC,CAAC;EACtD,OAAOC,OAAO;AAClB,CAAC"},"metadata":{},"sourceType":"module"}