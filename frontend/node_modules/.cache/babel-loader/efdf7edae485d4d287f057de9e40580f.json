{"ast":null,"code":"/**\n * Helper function for calling the dataProvider.getMany() method,\n * and getting a Promise for the records indexed by id in return.\n *\n * @example\n *     fetchRelatedRecords(dataProvider)(records, 'post_id', 'posts').then(posts =>\n *         posts.map(record => ({\n *             ...record,\n *             post_title: posts[record.post_id].title,\n *         }))\n *     );\n */\nvar fetchRelatedRecords = function (dataProvider) {\n  return function (data, field, resource) {\n    return dataProvider.getMany(resource, {\n      ids: getRelatedIds(data, field)\n    }).then(function (_a) {\n      var data = _a.data;\n      return data.reduce(function (acc, post) {\n        acc[post.id] = post;\n        return acc;\n      }, {});\n    });\n  };\n};\n/**\n * Extracts, aggregates and deduplicates the ids of related records\n *\n * @example\n *     const books = [\n *         { id: 1, author_id: 123, title: 'Pride and Prejudice' },\n *         { id: 2, author_id: 123, title: 'Sense and Sensibility' },\n *         { id: 3, author_id: 456, title: 'War and Peace' },\n *     ];\n *     getRelatedIds(books, 'author_id'); => [123, 456]\n *\n * @example\n *     const books = [\n *         { id: 1, tag_ids: [1, 2], title: 'Pride and Prejudice' },\n *         { id: 2, tag_ids: [2, 3], title: 'Sense and Sensibility' },\n *         { id: 3, tag_ids: [4], title: 'War and Peace' },\n *     ];\n *     getRelatedIds(records, 'tag_ids'); => [1, 2, 3, 4]\n *\n * @param {Object[]} records An array of records\n * @param {string} field the identifier of the record field to use\n */\nexport var getRelatedIds = function (records, field) {\n  return Array.from(new Set(records.filter(function (record) {\n    return record[field] != null;\n  }).map(function (record) {\n    return record[field];\n  }).reduce(function (ids, value) {\n    return ids.concat(value);\n  }, [])));\n};\nexport default fetchRelatedRecords;","map":{"version":3,"names":["fetchRelatedRecords","dataProvider","data","field","resource","getMany","ids","getRelatedIds","then","_a","reduce","acc","post","id","records","Array","from","Set","filter","record","map","value","concat"],"sources":["/node_modules/ra-core/esm/export/fetchRelatedRecords.js"],"sourcesContent":["/**\n * Helper function for calling the dataProvider.getMany() method,\n * and getting a Promise for the records indexed by id in return.\n *\n * @example\n *     fetchRelatedRecords(dataProvider)(records, 'post_id', 'posts').then(posts =>\n *         posts.map(record => ({\n *             ...record,\n *             post_title: posts[record.post_id].title,\n *         }))\n *     );\n */\nvar fetchRelatedRecords = function (dataProvider) { return function (data, field, resource) {\n    return dataProvider\n        .getMany(resource, { ids: getRelatedIds(data, field) })\n        .then(function (_a) {\n        var data = _a.data;\n        return data.reduce(function (acc, post) {\n            acc[post.id] = post;\n            return acc;\n        }, {});\n    });\n}; };\n/**\n * Extracts, aggregates and deduplicates the ids of related records\n *\n * @example\n *     const books = [\n *         { id: 1, author_id: 123, title: 'Pride and Prejudice' },\n *         { id: 2, author_id: 123, title: 'Sense and Sensibility' },\n *         { id: 3, author_id: 456, title: 'War and Peace' },\n *     ];\n *     getRelatedIds(books, 'author_id'); => [123, 456]\n *\n * @example\n *     const books = [\n *         { id: 1, tag_ids: [1, 2], title: 'Pride and Prejudice' },\n *         { id: 2, tag_ids: [2, 3], title: 'Sense and Sensibility' },\n *         { id: 3, tag_ids: [4], title: 'War and Peace' },\n *     ];\n *     getRelatedIds(records, 'tag_ids'); => [1, 2, 3, 4]\n *\n * @param {Object[]} records An array of records\n * @param {string} field the identifier of the record field to use\n */\nexport var getRelatedIds = function (records, field) {\n    return Array.from(new Set(records\n        .filter(function (record) { return record[field] != null; })\n        .map(function (record) { return record[field]; })\n        .reduce(function (ids, value) { return ids.concat(value); }, [])));\n};\nexport default fetchRelatedRecords;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,mBAAmB,GAAG,SAAAA,CAAUC,YAAY,EAAE;EAAE,OAAO,UAAUC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IACxF,OAAOH,YAAY,CACdI,OAAO,CAACD,QAAQ,EAAE;MAAEE,GAAG,EAAEC,aAAa,CAACL,IAAI,EAAEC,KAAK;IAAE,CAAC,CAAC,CACtDK,IAAI,CAAC,UAAUC,EAAE,EAAE;MACpB,IAAIP,IAAI,GAAGO,EAAE,CAACP,IAAI;MAClB,OAAOA,IAAI,CAACQ,MAAM,CAAC,UAAUC,GAAG,EAAEC,IAAI,EAAE;QACpCD,GAAG,CAACC,IAAI,CAACC,EAAE,CAAC,GAAGD,IAAI;QACnB,OAAOD,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACV,CAAC,CAAC;EACN,CAAC;AAAE,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIJ,aAAa,GAAG,SAAAA,CAAUO,OAAO,EAAEX,KAAK,EAAE;EACjD,OAAOY,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACH,OAAO,CAC5BI,MAAM,CAAC,UAAUC,MAAM,EAAE;IAAE,OAAOA,MAAM,CAAChB,KAAK,CAAC,IAAI,IAAI;EAAE,CAAC,CAAC,CAC3DiB,GAAG,CAAC,UAAUD,MAAM,EAAE;IAAE,OAAOA,MAAM,CAAChB,KAAK,CAAC;EAAE,CAAC,CAAC,CAChDO,MAAM,CAAC,UAAUJ,GAAG,EAAEe,KAAK,EAAE;IAAE,OAAOf,GAAG,CAACgB,MAAM,CAACD,KAAK,CAAC;EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1E,CAAC;AACD,eAAerB,mBAAmB"},"metadata":{},"sourceType":"module"}