{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport { CRUD_GET_MATCHING } from '../actions/dataActions/crudGetMatching';\nimport { useQueryWithStore } from './useQueryWithStore';\nimport { getReferenceResource, getPossibleReferenceValues, getPossibleReferences } from '../reducer';\nvar referenceSource = function (resource, source) {\n  return resource + \"@\" + source;\n};\n/**\n * Call the dataProvider.getList() method return the resolved result\n * as well as the loading state.\n *\n * React-admin uses a different store location for the result of this query\n * than for useGetList(). Therefore, calling useGetMatching() does not modify\n * the ids and total for the resource.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'tags'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {string} source The field in resource containing the ids of the referenced records, e.g. 'tag_ids'\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to build a cache key\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetMatching } from 'react-admin';\n *\n * const PostTags = () => {\n *     // call dataProvider.getList('tags', { pagination: { page: 1, perPage: 10 }, sort: { { field: 'published_at', order: 'DESC' } } })\n *     const { data, loading, error } = useGetMatching(\n *         'tags',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' },\n *         {},\n *         'tag_ids',\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\nvar useGetMatching = function (resource, pagination, sort, filter, source, referencingResource, options) {\n  var relatedTo = referenceSource(referencingResource, source);\n  var payload = {\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  };\n  var _a = useQueryWithStore({\n      type: 'getList',\n      resource: resource,\n      payload: payload\n    }, __assign(__assign({}, options), {\n      relatedTo: relatedTo,\n      action: CRUD_GET_MATCHING\n    }), function (state) {\n      return getPossibleReferenceValues(state, {\n        referenceSource: referenceSource,\n        resource: referencingResource,\n        source: source\n      });\n    }, function (state) {\n      return get(state.admin.resources, [resource, 'list', 'cachedRequests', JSON.stringify(payload), 'total'], null);\n    }),\n    possibleValues = _a.data,\n    total = _a.total,\n    error = _a.error,\n    loading = _a.loading,\n    loaded = _a.loaded,\n    refetch = _a.refetch;\n  var referenceState = useSelector(function (state) {\n    return getReferenceResource(state, {\n      reference: resource\n    });\n  });\n  var possibleReferences = getPossibleReferences(referenceState, possibleValues, []);\n  return {\n    data: possibleReferences,\n    ids: possibleValues,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\nexport default useGetMatching;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useSelector","get","CRUD_GET_MATCHING","useQueryWithStore","getReferenceResource","getPossibleReferenceValues","getPossibleReferences","referenceSource","resource","source","useGetMatching","pagination","sort","filter","referencingResource","options","relatedTo","payload","_a","type","action","state","admin","resources","JSON","stringify","possibleValues","data","total","error","loading","loaded","refetch","referenceState","reference","possibleReferences","ids"],"sources":["/node_modules/ra-core/esm/dataProvider/useGetMatching.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport { CRUD_GET_MATCHING } from '../actions/dataActions/crudGetMatching';\nimport { useQueryWithStore } from './useQueryWithStore';\nimport { getReferenceResource, getPossibleReferenceValues, getPossibleReferences, } from '../reducer';\nvar referenceSource = function (resource, source) { return resource + \"@\" + source; };\n/**\n * Call the dataProvider.getList() method return the resolved result\n * as well as the loading state.\n *\n * React-admin uses a different store location for the result of this query\n * than for useGetList(). Therefore, calling useGetMatching() does not modify\n * the ids and total for the resource.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'tags'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {string} source The field in resource containing the ids of the referenced records, e.g. 'tag_ids'\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to build a cache key\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetMatching } from 'react-admin';\n *\n * const PostTags = () => {\n *     // call dataProvider.getList('tags', { pagination: { page: 1, perPage: 10 }, sort: { { field: 'published_at', order: 'DESC' } } })\n *     const { data, loading, error } = useGetMatching(\n *         'tags',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' },\n *         {},\n *         'tag_ids',\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\nvar useGetMatching = function (resource, pagination, sort, filter, source, referencingResource, options) {\n    var relatedTo = referenceSource(referencingResource, source);\n    var payload = { pagination: pagination, sort: sort, filter: filter };\n    var _a = useQueryWithStore({\n        type: 'getList',\n        resource: resource,\n        payload: payload,\n    }, __assign(__assign({}, options), { relatedTo: relatedTo, action: CRUD_GET_MATCHING }), function (state) {\n        return getPossibleReferenceValues(state, {\n            referenceSource: referenceSource,\n            resource: referencingResource,\n            source: source,\n        });\n    }, function (state) {\n        return get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            JSON.stringify(payload),\n            'total',\n        ], null);\n    }), possibleValues = _a.data, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded, refetch = _a.refetch;\n    var referenceState = useSelector(function (state) {\n        return getReferenceResource(state, {\n            reference: resource,\n        });\n    });\n    var possibleReferences = getPossibleReferences(referenceState, possibleValues, []);\n    return {\n        data: possibleReferences,\n        ids: possibleValues,\n        total: total,\n        error: error,\n        loading: loading,\n        loaded: loaded,\n        refetch: refetch,\n    };\n};\nexport default useGetMatching;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}