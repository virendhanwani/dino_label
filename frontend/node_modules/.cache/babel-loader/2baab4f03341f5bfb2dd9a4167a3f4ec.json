{"ast":null,"code":"import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.delete() method, the result\n * of the call (the deleted record), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteOne, { loading: false, loaded: false }]\n * - start:   [deleteOne, { loading: true, loaded: false }]\n * - success: [deleteOne, { data: [data from response], loading: false, loaded: true }]\n * - error:   [deleteOne, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param previousData The record before the delete is applied\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [deleteOne, { data, error, loading, loaded }].\n *\n * The deleteOne() function can be called in 3 different ways:\n *  - with the same parameters as the useDelete() hook: deleteOne(resource, id, previousData, options)\n *  - with the same syntax as useMutation: deleteOne({ resource, payload: { id, previousData } }, options)\n *  - with no parameter (if they were already passed to useDelete()): deleteOne()\n *\n * @example // set params when calling the deleteOne callback\n *\n * import { useDelete } from 'react-admin';\n *\n * const DeleteButton = ({ record }) => {\n *     const [deleteOne, { loading, error }] = useDelete();\n *     const handleClick = () => {\n *         deleteOne('likes', record.id, record)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Delete</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDelete } from 'react-admin';\n *\n * const DeleteButton = ({ record }) => {\n *     const [deleteOne, { loading, error }] = useDelete('likes', record.id, record);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteOne}>Delete</button>;\n * };\n */\nvar useDelete = function (resource, id, previousData, options) {\n  if (previousData === void 0) {\n    previousData = {};\n  }\n  var _a = useMutation({\n      type: 'delete',\n      resource: resource,\n      payload: {\n        id: id,\n        previousData: previousData\n      }\n    }, options),\n    mutate = _a[0],\n    state = _a[1];\n  var deleteOne = useCallback(function (resource, id, previousData, options) {\n    if (typeof resource === 'string') {\n      var query = {\n        type: 'delete',\n        resource: resource,\n        payload: {\n          id: id,\n          previousData: previousData\n        }\n      };\n      return mutate(query, options);\n    } else {\n      return mutate(resource, id);\n    }\n  }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return [deleteOne, state];\n};\nexport default useDelete;","map":{"version":3,"names":["useCallback","useMutation","useDelete","resource","id","previousData","options","_a","type","payload","mutate","state","deleteOne","query"],"sources":["/node_modules/ra-core/esm/dataProvider/useDelete.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.delete() method, the result\n * of the call (the deleted record), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteOne, { loading: false, loaded: false }]\n * - start:   [deleteOne, { loading: true, loaded: false }]\n * - success: [deleteOne, { data: [data from response], loading: false, loaded: true }]\n * - error:   [deleteOne, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param previousData The record before the delete is applied\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [deleteOne, { data, error, loading, loaded }].\n *\n * The deleteOne() function can be called in 3 different ways:\n *  - with the same parameters as the useDelete() hook: deleteOne(resource, id, previousData, options)\n *  - with the same syntax as useMutation: deleteOne({ resource, payload: { id, previousData } }, options)\n *  - with no parameter (if they were already passed to useDelete()): deleteOne()\n *\n * @example // set params when calling the deleteOne callback\n *\n * import { useDelete } from 'react-admin';\n *\n * const DeleteButton = ({ record }) => {\n *     const [deleteOne, { loading, error }] = useDelete();\n *     const handleClick = () => {\n *         deleteOne('likes', record.id, record)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Delete</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDelete } from 'react-admin';\n *\n * const DeleteButton = ({ record }) => {\n *     const [deleteOne, { loading, error }] = useDelete('likes', record.id, record);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteOne}>Delete</button>;\n * };\n */\nvar useDelete = function (resource, id, previousData, options) {\n    if (previousData === void 0) { previousData = {}; }\n    var _a = useMutation({ type: 'delete', resource: resource, payload: { id: id, previousData: previousData } }, options), mutate = _a[0], state = _a[1];\n    var deleteOne = useCallback(function (resource, id, previousData, options) {\n        if (typeof resource === 'string') {\n            var query = {\n                type: 'delete',\n                resource: resource,\n                payload: {\n                    id: id,\n                    previousData: previousData,\n                },\n            };\n            return mutate(query, options);\n        }\n        else {\n            return mutate(resource, id);\n        }\n    }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n    return [deleteOne, state];\n};\nexport default useDelete;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,WAAW,MAAM,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,EAAE,EAAEC,YAAY,EAAEC,OAAO,EAAE;EAC3D,IAAID,YAAY,KAAK,KAAK,CAAC,EAAE;IAAEA,YAAY,GAAG,CAAC,CAAC;EAAE;EAClD,IAAIE,EAAE,GAAGN,WAAW,CAAC;MAAEO,IAAI,EAAE,QAAQ;MAAEL,QAAQ,EAAEA,QAAQ;MAAEM,OAAO,EAAE;QAAEL,EAAE,EAAEA,EAAE;QAAEC,YAAY,EAAEA;MAAa;IAAE,CAAC,EAAEC,OAAO,CAAC;IAAEI,MAAM,GAAGH,EAAE,CAAC,CAAC,CAAC;IAAEI,KAAK,GAAGJ,EAAE,CAAC,CAAC,CAAC;EACrJ,IAAIK,SAAS,GAAGZ,WAAW,CAAC,UAAUG,QAAQ,EAAEC,EAAE,EAAEC,YAAY,EAAEC,OAAO,EAAE;IACvE,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE;MAC9B,IAAIU,KAAK,GAAG;QACRL,IAAI,EAAE,QAAQ;QACdL,QAAQ,EAAEA,QAAQ;QAClBM,OAAO,EAAE;UACLL,EAAE,EAAEA,EAAE;UACNC,YAAY,EAAEA;QAClB;MACJ,CAAC;MACD,OAAOK,MAAM,CAACG,KAAK,EAAEP,OAAO,CAAC;IACjC,CAAC,MACI;MACD,OAAOI,MAAM,CAACP,QAAQ,EAAEC,EAAE,CAAC;IAC/B;EACJ,CAAC,EAAE,CAACM,MAAM,CAAC,CAAC;EAAA,CACX;;EACD,OAAO,CAACE,SAAS,EAAED,KAAK,CAAC;AAC7B,CAAC;AACD,eAAeT,SAAS"},"metadata":{},"sourceType":"module"}