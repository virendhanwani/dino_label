{"ast":null,"code":"import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport getFormInitialValues from './getFormInitialValues';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\nvar useInitializeFormWithRecord = function (record) {\n  var form = useForm();\n  useEffect(function () {\n    if (!record) {\n      return;\n    }\n    var initialValues = getFormInitialValues(form.getState().initialValues, undefined, record);\n    if (isEqual(form.getState().initialValues, initialValues)) {\n      return;\n    }\n    // Disable this option when re-initializing the form because in this case, it should reset the dirty state of all fields\n    // We do need to keep this option for dynamically added inputs though which is why it is kept at the form level\n    form.setConfig('keepDirtyOnReinitialize', false);\n    form.restart(initialValues);\n    form.setConfig('keepDirtyOnReinitialize', true);\n  }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nexport default useInitializeFormWithRecord;","map":{"version":3,"names":["useEffect","useForm","isEqual","getFormInitialValues","useInitializeFormWithRecord","record","form","initialValues","getState","undefined","setConfig","restart","JSON","stringify"],"sources":["/node_modules/ra-core/esm/form/useInitializeFormWithRecord.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport getFormInitialValues from './getFormInitialValues';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\nvar useInitializeFormWithRecord = function (record) {\n    var form = useForm();\n    useEffect(function () {\n        if (!record) {\n            return;\n        }\n        var initialValues = getFormInitialValues(form.getState().initialValues, undefined, record);\n        if (isEqual(form.getState().initialValues, initialValues)) {\n            return;\n        }\n        // Disable this option when re-initializing the form because in this case, it should reset the dirty state of all fields\n        // We do need to keep this option for dynamically added inputs though which is why it is kept at the form level\n        form.setConfig('keepDirtyOnReinitialize', false);\n        form.restart(initialValues);\n        form.setConfig('keepDirtyOnReinitialize', true);\n    }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\nexport default useInitializeFormWithRecord;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD;AACA;AACA;AACA,IAAIC,2BAA2B,GAAG,SAAAA,CAAUC,MAAM,EAAE;EAChD,IAAIC,IAAI,GAAGL,OAAO,EAAE;EACpBD,SAAS,CAAC,YAAY;IAClB,IAAI,CAACK,MAAM,EAAE;MACT;IACJ;IACA,IAAIE,aAAa,GAAGJ,oBAAoB,CAACG,IAAI,CAACE,QAAQ,EAAE,CAACD,aAAa,EAAEE,SAAS,EAAEJ,MAAM,CAAC;IAC1F,IAAIH,OAAO,CAACI,IAAI,CAACE,QAAQ,EAAE,CAACD,aAAa,EAAEA,aAAa,CAAC,EAAE;MACvD;IACJ;IACA;IACA;IACAD,IAAI,CAACI,SAAS,CAAC,yBAAyB,EAAE,KAAK,CAAC;IAChDJ,IAAI,CAACK,OAAO,CAACJ,aAAa,CAAC;IAC3BD,IAAI,CAACI,SAAS,CAAC,yBAAyB,EAAE,IAAI,CAAC;EACnD,CAAC,EAAE,CAACJ,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACR,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC;;AACD,eAAeD,2BAA2B"},"metadata":{},"sourceType":"module"}