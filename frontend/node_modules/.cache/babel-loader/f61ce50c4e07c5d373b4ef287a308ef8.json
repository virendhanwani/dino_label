{"ast":null,"code":"import { useMemo } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { setListSelectedIds, toggleListItem } from '../actions/listActions';\nvar defaultRecords = [];\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\nvar useRecordSelection = function (resource) {\n  var dispatch = useDispatch();\n  var selectedIds = useSelector(function (reduxState) {\n    return reduxState.admin.resources[resource] ? reduxState.admin.resources[resource].list.selectedIds : defaultRecords;\n  }, shallowEqual);\n  var selectionModifiers = useMemo(function () {\n    return {\n      select: function (newIds) {\n        dispatch(setListSelectedIds(resource, newIds));\n      },\n      toggle: function (id) {\n        dispatch(toggleListItem(resource, id));\n      },\n      clearSelection: function () {\n        dispatch(setListSelectedIds(resource, []));\n      }\n    };\n  }, [dispatch, resource]);\n  return [selectedIds, selectionModifiers];\n};\nexport default useRecordSelection;","map":{"version":3,"names":["useMemo","useSelector","useDispatch","shallowEqual","setListSelectedIds","toggleListItem","defaultRecords","useRecordSelection","resource","dispatch","selectedIds","reduxState","admin","resources","list","selectionModifiers","select","newIds","toggle","id","clearSelection"],"sources":["/node_modules/ra-core/esm/controller/useRecordSelection.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { setListSelectedIds, toggleListItem } from '../actions/listActions';\nvar defaultRecords = [];\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\nvar useRecordSelection = function (resource) {\n    var dispatch = useDispatch();\n    var selectedIds = useSelector(function (reduxState) {\n        return reduxState.admin.resources[resource]\n            ? reduxState.admin.resources[resource].list.selectedIds\n            : defaultRecords;\n    }, shallowEqual);\n    var selectionModifiers = useMemo(function () { return ({\n        select: function (newIds) {\n            dispatch(setListSelectedIds(resource, newIds));\n        },\n        toggle: function (id) {\n            dispatch(toggleListItem(resource, id));\n        },\n        clearSelection: function () {\n            dispatch(setListSelectedIds(resource, []));\n        },\n    }); }, [dispatch, resource]);\n    return [selectedIds, selectionModifiers];\n};\nexport default useRecordSelection;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,WAAW,EAAEC,WAAW,EAAEC,YAAY,QAAQ,aAAa;AACpE,SAASC,kBAAkB,EAAEC,cAAc,QAAQ,wBAAwB;AAC3E,IAAIC,cAAc,GAAG,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,kBAAkB,GAAG,SAAAA,CAAUC,QAAQ,EAAE;EACzC,IAAIC,QAAQ,GAAGP,WAAW,EAAE;EAC5B,IAAIQ,WAAW,GAAGT,WAAW,CAAC,UAAUU,UAAU,EAAE;IAChD,OAAOA,UAAU,CAACC,KAAK,CAACC,SAAS,CAACL,QAAQ,CAAC,GACrCG,UAAU,CAACC,KAAK,CAACC,SAAS,CAACL,QAAQ,CAAC,CAACM,IAAI,CAACJ,WAAW,GACrDJ,cAAc;EACxB,CAAC,EAAEH,YAAY,CAAC;EAChB,IAAIY,kBAAkB,GAAGf,OAAO,CAAC,YAAY;IAAE,OAAQ;MACnDgB,MAAM,EAAE,SAAAA,CAAUC,MAAM,EAAE;QACtBR,QAAQ,CAACL,kBAAkB,CAACI,QAAQ,EAAES,MAAM,CAAC,CAAC;MAClD,CAAC;MACDC,MAAM,EAAE,SAAAA,CAAUC,EAAE,EAAE;QAClBV,QAAQ,CAACJ,cAAc,CAACG,QAAQ,EAAEW,EAAE,CAAC,CAAC;MAC1C,CAAC;MACDC,cAAc,EAAE,SAAAA,CAAA,EAAY;QACxBX,QAAQ,CAACL,kBAAkB,CAACI,QAAQ,EAAE,EAAE,CAAC,CAAC;MAC9C;IACJ,CAAC;EAAG,CAAC,EAAE,CAACC,QAAQ,EAAED,QAAQ,CAAC,CAAC;EAC5B,OAAO,CAACE,WAAW,EAAEK,kBAAkB,CAAC;AAC5C,CAAC;AACD,eAAeR,kBAAkB"},"metadata":{},"sourceType":"module"}