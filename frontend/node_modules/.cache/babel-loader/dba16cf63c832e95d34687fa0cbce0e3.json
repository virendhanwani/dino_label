{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useRef, useEffect } from 'react';\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\nexport default function useWhyDidYouUpdate(name, props) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  var previousProps = useRef();\n  useEffect(function () {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      var allKeys = Object.keys(__assign(__assign({}, previousProps.current), props));\n      // Use this object to keep track of changed props\n      var changesObj_1 = {};\n      // Iterate through keys\n      allKeys.forEach(function (key) {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj_1[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n      // If changesObj not empty then output to console\n      if (Object.keys(changesObj_1).length) {\n        console.log('[why-did-you-update]', name, changesObj_1);\n      }\n    }\n    // Finally update previousProps with current props for next hook call\n    previousProps.current = props;\n  });\n}","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useRef","useEffect","useWhyDidYouUpdate","name","props","previousProps","current","allKeys","keys","changesObj_1","forEach","key","from","to","console","log"],"sources":["/node_modules/ra-core/esm/util/useWhyDidYouUpdate.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useRef, useEffect } from 'react';\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\nexport default function useWhyDidYouUpdate(name, props) {\n    // Get a mutable ref object where we can store props ...\n    // ... for comparison next time this hook runs.\n    var previousProps = useRef();\n    useEffect(function () {\n        if (previousProps.current) {\n            // Get all keys from previous and current props\n            var allKeys = Object.keys(__assign(__assign({}, previousProps.current), props));\n            // Use this object to keep track of changed props\n            var changesObj_1 = {};\n            // Iterate through keys\n            allKeys.forEach(function (key) {\n                // If previous is different from current\n                if (previousProps.current[key] !== props[key]) {\n                    // Add to changesObj\n                    changesObj_1[key] = {\n                        from: previousProps.current[key],\n                        to: props[key],\n                    };\n                }\n            });\n            // If changesObj not empty then output to console\n            if (Object.keys(changesObj_1).length) {\n                console.log('[why-did-you-update]', name, changesObj_1);\n            }\n        }\n        // Finally update previousProps with current props for next hook call\n        previousProps.current = props;\n    });\n}\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,SAASO,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,kBAAkBA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACpD;EACA;EACA,IAAIC,aAAa,GAAGL,MAAM,EAAE;EAC5BC,SAAS,CAAC,YAAY;IAClB,IAAII,aAAa,CAACC,OAAO,EAAE;MACvB;MACA,IAAIC,OAAO,GAAGpB,MAAM,CAACqB,IAAI,CAACtB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEmB,aAAa,CAACC,OAAO,CAAC,EAAEF,KAAK,CAAC,CAAC;MAC/E;MACA,IAAIK,YAAY,GAAG,CAAC,CAAC;MACrB;MACAF,OAAO,CAACG,OAAO,CAAC,UAAUC,GAAG,EAAE;QAC3B;QACA,IAAIN,aAAa,CAACC,OAAO,CAACK,GAAG,CAAC,KAAKP,KAAK,CAACO,GAAG,CAAC,EAAE;UAC3C;UACAF,YAAY,CAACE,GAAG,CAAC,GAAG;YAChBC,IAAI,EAAEP,aAAa,CAACC,OAAO,CAACK,GAAG,CAAC;YAChCE,EAAE,EAAET,KAAK,CAACO,GAAG;UACjB,CAAC;QACL;MACJ,CAAC,CAAC;MACF;MACA,IAAIxB,MAAM,CAACqB,IAAI,CAACC,YAAY,CAAC,CAACf,MAAM,EAAE;QAClCoB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEZ,IAAI,EAAEM,YAAY,CAAC;MAC3D;IACJ;IACA;IACAJ,aAAa,CAACC,OAAO,GAAGF,KAAK;EACjC,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}