{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the Redux state.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\nvar useLogout = function () {\n  var authProvider = useAuthProvider();\n  var dispatch = useDispatch();\n  /**\n   * We need the current location to pass in the router state\n   * so that the login hook knows where to redirect to as next route after login.\n   *\n   * But if we used useLocation to get it, the logout function\n   * would be rebuilt each time the user changes location. Consequently, that\n   * would force a rerender of all components using this hook upon navigation\n   * (CoreAdminRouter for example).\n   *\n   * To avoid that, we read the location directly from history which is mutable.\n   * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\n   */\n  var history = useHistory();\n  var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n    if (params === void 0) {\n      params = {};\n    }\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n    if (redirectToCurrentLocationAfterLogin === void 0) {\n      redirectToCurrentLocationAfterLogin = true;\n    }\n    return authProvider.logout(params).then(function (redirectToFromProvider) {\n      if (redirectToFromProvider === false) {\n        dispatch(clearState());\n        // do not redirect\n        return;\n      }\n      // redirectTo can contain a query string, e.g. '/login?foo=bar'\n      // we must split the redirectTo to pass a structured location to history.push()\n      var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n      var newLocation = {\n        pathname: redirectToParts[0]\n      };\n      if (redirectToCurrentLocationAfterLogin && history.location && history.location.pathname) {\n        newLocation.state = {\n          nextPathname: history.location.pathname,\n          nextSearch: history.location.search\n        };\n      }\n      if (redirectToParts[1]) {\n        newLocation.search = redirectToParts[1];\n      }\n      history.push(newLocation);\n      dispatch(clearState());\n      return redirectToFromProvider;\n    });\n  }, [authProvider, history, dispatch]);\n  var logoutWithoutProvider = useCallback(function (_) {\n    history.push({\n      pathname: defaultAuthParams.loginUrl,\n      state: {\n        nextPathname: history.location && history.location.pathname\n      }\n    });\n    dispatch(clearState());\n    return Promise.resolve();\n  }, [dispatch, history]);\n  return authProvider ? logout : logoutWithoutProvider;\n};\nexport default useLogout;","map":{"version":3,"names":["useCallback","useDispatch","useAuthProvider","defaultAuthParams","clearState","useHistory","useLogout","authProvider","dispatch","history","logout","params","redirectTo","redirectToCurrentLocationAfterLogin","loginUrl","then","redirectToFromProvider","redirectToParts","split","newLocation","pathname","location","state","nextPathname","nextSearch","search","push","logoutWithoutProvider","_","Promise","resolve"],"sources":["/node_modules/ra-core/esm/auth/useLogout.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the Redux state.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\nvar useLogout = function () {\n    var authProvider = useAuthProvider();\n    var dispatch = useDispatch();\n    /**\n     * We need the current location to pass in the router state\n     * so that the login hook knows where to redirect to as next route after login.\n     *\n     * But if we used useLocation to get it, the logout function\n     * would be rebuilt each time the user changes location. Consequently, that\n     * would force a rerender of all components using this hook upon navigation\n     * (CoreAdminRouter for example).\n     *\n     * To avoid that, we read the location directly from history which is mutable.\n     * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\n     */\n    var history = useHistory();\n    var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n        if (params === void 0) { params = {}; }\n        if (redirectTo === void 0) { redirectTo = defaultAuthParams.loginUrl; }\n        if (redirectToCurrentLocationAfterLogin === void 0) { redirectToCurrentLocationAfterLogin = true; }\n        return authProvider.logout(params).then(function (redirectToFromProvider) {\n            if (redirectToFromProvider === false) {\n                dispatch(clearState());\n                // do not redirect\n                return;\n            }\n            // redirectTo can contain a query string, e.g. '/login?foo=bar'\n            // we must split the redirectTo to pass a structured location to history.push()\n            var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n            var newLocation = {\n                pathname: redirectToParts[0],\n            };\n            if (redirectToCurrentLocationAfterLogin &&\n                history.location &&\n                history.location.pathname) {\n                newLocation.state = {\n                    nextPathname: history.location.pathname,\n                    nextSearch: history.location.search,\n                };\n            }\n            if (redirectToParts[1]) {\n                newLocation.search = redirectToParts[1];\n            }\n            history.push(newLocation);\n            dispatch(clearState());\n            return redirectToFromProvider;\n        });\n    }, [authProvider, history, dispatch]);\n    var logoutWithoutProvider = useCallback(function (_) {\n        history.push({\n            pathname: defaultAuthParams.loginUrl,\n            state: {\n                nextPathname: history.location && history.location.pathname,\n            },\n        });\n        dispatch(clearState());\n        return Promise.resolve();\n    }, [dispatch, history]);\n    return authProvider ? logout : logoutWithoutProvider;\n};\nexport default useLogout;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,eAAe,IAAIC,iBAAiB,QAAQ,mBAAmB;AACtE,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,SAAAA,CAAA,EAAY;EACxB,IAAIC,YAAY,GAAGL,eAAe,EAAE;EACpC,IAAIM,QAAQ,GAAGP,WAAW,EAAE;EAC5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIQ,OAAO,GAAGJ,UAAU,EAAE;EAC1B,IAAIK,MAAM,GAAGV,WAAW,CAAC,UAAUW,MAAM,EAAEC,UAAU,EAAEC,mCAAmC,EAAE;IACxF,IAAIF,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,CAAC,CAAC;IAAE;IACtC,IAAIC,UAAU,KAAK,KAAK,CAAC,EAAE;MAAEA,UAAU,GAAGT,iBAAiB,CAACW,QAAQ;IAAE;IACtE,IAAID,mCAAmC,KAAK,KAAK,CAAC,EAAE;MAAEA,mCAAmC,GAAG,IAAI;IAAE;IAClG,OAAON,YAAY,CAACG,MAAM,CAACC,MAAM,CAAC,CAACI,IAAI,CAAC,UAAUC,sBAAsB,EAAE;MACtE,IAAIA,sBAAsB,KAAK,KAAK,EAAE;QAClCR,QAAQ,CAACJ,UAAU,EAAE,CAAC;QACtB;QACA;MACJ;MACA;MACA;MACA,IAAIa,eAAe,GAAG,CAACD,sBAAsB,IAAIJ,UAAU,EAAEM,KAAK,CAAC,GAAG,CAAC;MACvE,IAAIC,WAAW,GAAG;QACdC,QAAQ,EAAEH,eAAe,CAAC,CAAC;MAC/B,CAAC;MACD,IAAIJ,mCAAmC,IACnCJ,OAAO,CAACY,QAAQ,IAChBZ,OAAO,CAACY,QAAQ,CAACD,QAAQ,EAAE;QAC3BD,WAAW,CAACG,KAAK,GAAG;UAChBC,YAAY,EAAEd,OAAO,CAACY,QAAQ,CAACD,QAAQ;UACvCI,UAAU,EAAEf,OAAO,CAACY,QAAQ,CAACI;QACjC,CAAC;MACL;MACA,IAAIR,eAAe,CAAC,CAAC,CAAC,EAAE;QACpBE,WAAW,CAACM,MAAM,GAAGR,eAAe,CAAC,CAAC,CAAC;MAC3C;MACAR,OAAO,CAACiB,IAAI,CAACP,WAAW,CAAC;MACzBX,QAAQ,CAACJ,UAAU,EAAE,CAAC;MACtB,OAAOY,sBAAsB;IACjC,CAAC,CAAC;EACN,CAAC,EAAE,CAACT,YAAY,EAAEE,OAAO,EAAED,QAAQ,CAAC,CAAC;EACrC,IAAImB,qBAAqB,GAAG3B,WAAW,CAAC,UAAU4B,CAAC,EAAE;IACjDnB,OAAO,CAACiB,IAAI,CAAC;MACTN,QAAQ,EAAEjB,iBAAiB,CAACW,QAAQ;MACpCQ,KAAK,EAAE;QACHC,YAAY,EAAEd,OAAO,CAACY,QAAQ,IAAIZ,OAAO,CAACY,QAAQ,CAACD;MACvD;IACJ,CAAC,CAAC;IACFZ,QAAQ,CAACJ,UAAU,EAAE,CAAC;IACtB,OAAOyB,OAAO,CAACC,OAAO,EAAE;EAC5B,CAAC,EAAE,CAACtB,QAAQ,EAAEC,OAAO,CAAC,CAAC;EACvB,OAAOF,YAAY,GAAGG,MAAM,GAAGiB,qBAAqB;AACxD,CAAC;AACD,eAAerB,SAAS"},"metadata":{},"sourceType":"module"}