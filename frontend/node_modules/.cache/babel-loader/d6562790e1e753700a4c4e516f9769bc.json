{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\nimport { CRUD_GET_MANY_REFERENCE } from '../actions/dataActions/crudGetManyReference';\nimport { useQueryWithStore } from './useQueryWithStore';\nimport { getIds, getTotal, nameRelatedTo } from '../reducer/admin/references/oneToMany';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'comments'\n * @param {string} target The target resource key, e.g. 'post_id'\n * @param {Object} id The identifier of the record to look for in 'target'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { body: 'hello, world' }\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to generate a cache key\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetManyReference } from 'react-admin';\n *\n * const PostComments = ({ post_id }) => {\n *     const { data, ids, loading, error } = useGetManyReference(\n *         'comments',\n *         'post_id',\n *         post_id,\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *         {},\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].body}</li>\n *     )}</ul>;\n * };\n */\nvar useGetManyReference = function (resource, target, id, pagination, sort, filter, referencingResource, options) {\n  var relatedTo = useMemo(function () {\n    return nameRelatedTo(resource, id, referencingResource, target, filter);\n  }, [filter, resource, id, referencingResource, target]);\n  var _a = useQueryWithStore({\n      type: 'getManyReference',\n      resource: resource,\n      payload: {\n        target: target,\n        id: id,\n        pagination: pagination,\n        sort: sort,\n        filter: filter\n      }\n    }, __assign(__assign({}, options), {\n      relatedTo: relatedTo,\n      action: CRUD_GET_MANY_REFERENCE\n    }),\n    // ids and data selector\n    function (state) {\n      return {\n        ids: getIds(state, relatedTo),\n        allRecords: get(state.admin.resources, [resource, 'data'], defaultData)\n      };\n    }, function (state) {\n      return getTotal(state, relatedTo);\n    }, isDataLoaded),\n    _b = _a.data,\n    ids = _b.ids,\n    allRecords = _b.allRecords,\n    total = _a.total,\n    error = _a.error,\n    loading = _a.loading,\n    loaded = _a.loaded,\n    refetch = _a.refetch;\n  var data = useMemo(function () {\n    return ids == null ? defaultData : ids.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [ids, allRecords]);\n  return {\n    data: data,\n    ids: ids || defaultIds,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\nvar isDataLoaded = function (data) {\n  return data.ids != null;\n};\nexport default useGetManyReference;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","get","useMemo","CRUD_GET_MANY_REFERENCE","useQueryWithStore","getIds","getTotal","nameRelatedTo","defaultIds","defaultData","useGetManyReference","resource","target","id","pagination","sort","filter","referencingResource","options","relatedTo","_a","type","payload","action","state","ids","allRecords","admin","resources","isDataLoaded","_b","data","total","error","loading","loaded","refetch","map","reduce","acc","record"],"sources":["/node_modules/ra-core/esm/dataProvider/useGetManyReference.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\nimport { CRUD_GET_MANY_REFERENCE } from '../actions/dataActions/crudGetManyReference';\nimport { useQueryWithStore } from './useQueryWithStore';\nimport { getIds, getTotal, nameRelatedTo, } from '../reducer/admin/references/oneToMany';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'comments'\n * @param {string} target The target resource key, e.g. 'post_id'\n * @param {Object} id The identifier of the record to look for in 'target'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { body: 'hello, world' }\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to generate a cache key\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetManyReference } from 'react-admin';\n *\n * const PostComments = ({ post_id }) => {\n *     const { data, ids, loading, error } = useGetManyReference(\n *         'comments',\n *         'post_id',\n *         post_id,\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *         {},\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].body}</li>\n *     )}</ul>;\n * };\n */\nvar useGetManyReference = function (resource, target, id, pagination, sort, filter, referencingResource, options) {\n    var relatedTo = useMemo(function () { return nameRelatedTo(resource, id, referencingResource, target, filter); }, [filter, resource, id, referencingResource, target]);\n    var _a = useQueryWithStore({\n        type: 'getManyReference',\n        resource: resource,\n        payload: { target: target, id: id, pagination: pagination, sort: sort, filter: filter },\n    }, __assign(__assign({}, options), { relatedTo: relatedTo, action: CRUD_GET_MANY_REFERENCE }), \n    // ids and data selector\n    function (state) { return ({\n        ids: getIds(state, relatedTo),\n        allRecords: get(state.admin.resources, [resource, 'data'], defaultData),\n    }); }, function (state) { return getTotal(state, relatedTo); }, isDataLoaded), _b = _a.data, ids = _b.ids, allRecords = _b.allRecords, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded, refetch = _a.refetch;\n    var data = useMemo(function () {\n        return ids == null\n            ? defaultData\n            : ids\n                .map(function (id) { return allRecords[id]; })\n                .reduce(function (acc, record) {\n                if (!record)\n                    return acc;\n                acc[record.id] = record;\n                return acc;\n            }, {});\n    }, [ids, allRecords]);\n    return {\n        data: data,\n        ids: ids || defaultIds,\n        total: total,\n        error: error,\n        loading: loading,\n        loaded: loaded,\n        refetch: refetch,\n    };\n};\nvar isDataLoaded = function (data) { return data.ids != null; };\nexport default useGetManyReference;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,OAAOO,GAAG,MAAM,YAAY;AAC5B,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,uBAAuB,QAAQ,6CAA6C;AACrF,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,MAAM,EAAEC,QAAQ,EAAEC,aAAa,QAAS,uCAAuC;AACxF,IAAIC,UAAU,GAAG,EAAE;AACnB,IAAIC,WAAW,GAAG,CAAC,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,UAAU,EAAEC,IAAI,EAAEC,MAAM,EAAEC,mBAAmB,EAAEC,OAAO,EAAE;EAC9G,IAAIC,SAAS,GAAGjB,OAAO,CAAC,YAAY;IAAE,OAAOK,aAAa,CAACI,QAAQ,EAAEE,EAAE,EAAEI,mBAAmB,EAAEL,MAAM,EAAEI,MAAM,CAAC;EAAE,CAAC,EAAE,CAACA,MAAM,EAAEL,QAAQ,EAAEE,EAAE,EAAEI,mBAAmB,EAAEL,MAAM,CAAC,CAAC;EACtK,IAAIQ,EAAE,GAAGhB,iBAAiB,CAAC;MACvBiB,IAAI,EAAE,kBAAkB;MACxBV,QAAQ,EAAEA,QAAQ;MAClBW,OAAO,EAAE;QAAEV,MAAM,EAAEA,MAAM;QAAEC,EAAE,EAAEA,EAAE;QAAEC,UAAU,EAAEA,UAAU;QAAEC,IAAI,EAAEA,IAAI;QAAEC,MAAM,EAAEA;MAAO;IAC1F,CAAC,EAAE7B,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE+B,OAAO,CAAC,EAAE;MAAEC,SAAS,EAAEA,SAAS;MAAEI,MAAM,EAAEpB;IAAwB,CAAC,CAAC;IAC7F;IACA,UAAUqB,KAAK,EAAE;MAAE,OAAQ;QACvBC,GAAG,EAAEpB,MAAM,CAACmB,KAAK,EAAEL,SAAS,CAAC;QAC7BO,UAAU,EAAEzB,GAAG,CAACuB,KAAK,CAACG,KAAK,CAACC,SAAS,EAAE,CAACjB,QAAQ,EAAE,MAAM,CAAC,EAAEF,WAAW;MAC1E,CAAC;IAAG,CAAC,EAAE,UAAUe,KAAK,EAAE;MAAE,OAAOlB,QAAQ,CAACkB,KAAK,EAAEL,SAAS,CAAC;IAAE,CAAC,EAAEU,YAAY,CAAC;IAAEC,EAAE,GAAGV,EAAE,CAACW,IAAI;IAAEN,GAAG,GAAGK,EAAE,CAACL,GAAG;IAAEC,UAAU,GAAGI,EAAE,CAACJ,UAAU;IAAEM,KAAK,GAAGZ,EAAE,CAACY,KAAK;IAAEC,KAAK,GAAGb,EAAE,CAACa,KAAK;IAAEC,OAAO,GAAGd,EAAE,CAACc,OAAO;IAAEC,MAAM,GAAGf,EAAE,CAACe,MAAM;IAAEC,OAAO,GAAGhB,EAAE,CAACgB,OAAO;EACzO,IAAIL,IAAI,GAAG7B,OAAO,CAAC,YAAY;IAC3B,OAAOuB,GAAG,IAAI,IAAI,GACZhB,WAAW,GACXgB,GAAG,CACAY,GAAG,CAAC,UAAUxB,EAAE,EAAE;MAAE,OAAOa,UAAU,CAACb,EAAE,CAAC;IAAE,CAAC,CAAC,CAC7CyB,MAAM,CAAC,UAAUC,GAAG,EAAEC,MAAM,EAAE;MAC/B,IAAI,CAACA,MAAM,EACP,OAAOD,GAAG;MACdA,GAAG,CAACC,MAAM,CAAC3B,EAAE,CAAC,GAAG2B,MAAM;MACvB,OAAOD,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;EACd,CAAC,EAAE,CAACd,GAAG,EAAEC,UAAU,CAAC,CAAC;EACrB,OAAO;IACHK,IAAI,EAAEA,IAAI;IACVN,GAAG,EAAEA,GAAG,IAAIjB,UAAU;IACtBwB,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAEA,KAAK;IACZC,OAAO,EAAEA,OAAO;IAChBC,MAAM,EAAEA,MAAM;IACdC,OAAO,EAAEA;EACb,CAAC;AACL,CAAC;AACD,IAAIP,YAAY,GAAG,SAAAA,CAAUE,IAAI,EAAE;EAAE,OAAOA,IAAI,CAACN,GAAG,IAAI,IAAI;AAAE,CAAC;AAC/D,eAAef,mBAAmB"},"metadata":{},"sourceType":"module"}