{"ast":null,"code":"import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\nvar ListPaginationContext = createContext({\n  loading: null,\n  page: null,\n  perPage: null,\n  setPage: null,\n  setPerPage: null,\n  total: null,\n  resource: null\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n  return useMemo(function () {\n    return pick(context, ['loading', 'page', 'perPage', 'setPage', 'setPerPage', 'total', 'resource']);\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context.loading, context.page, context.perPage, context.setPage, context.setPerPage, context.total]);\n};\nexport default ListPaginationContext;","map":{"version":3,"names":["createContext","useMemo","pick","ListPaginationContext","loading","page","perPage","setPage","setPerPage","total","resource","displayName","usePickPaginationContext","context"],"sources":["/node_modules/ra-core/esm/controller/ListPaginationContext.js"],"sourcesContent":["import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\nvar ListPaginationContext = createContext({\n    loading: null,\n    page: null,\n    perPage: null,\n    setPage: null,\n    setPerPage: null,\n    total: null,\n    resource: null,\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n    return useMemo(function () {\n        return pick(context, [\n            'loading',\n            'page',\n            'perPage',\n            'setPage',\n            'setPerPage',\n            'total',\n            'resource',\n        ]);\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        context.loading,\n        context.page,\n        context.perPage,\n        context.setPage,\n        context.setPerPage,\n        context.total,\n    ]);\n};\nexport default ListPaginationContext;\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,OAAO,QAAQ,OAAO;AAC9C,OAAOC,IAAI,MAAM,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,qBAAqB,GAAGH,aAAa,CAAC;EACtCI,OAAO,EAAE,IAAI;EACbC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE;AACd,CAAC,CAAC;AACFP,qBAAqB,CAACQ,WAAW,GAAG,uBAAuB;AAC3D,OAAO,IAAIC,wBAAwB,GAAG,SAAAA,CAAUC,OAAO,EAAE;EACrD,OAAOZ,OAAO,CAAC,YAAY;IACvB,OAAOC,IAAI,CAACW,OAAO,EAAE,CACjB,SAAS,EACT,MAAM,EACN,SAAS,EACT,SAAS,EACT,YAAY,EACZ,OAAO,EACP,UAAU,CACb,CAAC;EACN,CAAC;EACD;EACA,CACIA,OAAO,CAACT,OAAO,EACfS,OAAO,CAACR,IAAI,EACZQ,OAAO,CAACP,OAAO,EACfO,OAAO,CAACN,OAAO,EACfM,OAAO,CAACL,UAAU,EAClBK,OAAO,CAACJ,KAAK,CAChB,CAAC;AACN,CAAC;AACD,eAAeN,qBAAqB"},"metadata":{},"sourceType":"module"}